

# Python3 program to add two numbers 
  
num1 = 15
num2 = 12
  
# Adding two nos 
sum = num1 + num2 
  
# printing values 
print("Sum of {0} and {1} is {2}" .format(num1, num2, sum)) 




# Python3 program to add two numbers 
  
number1 = input("First number: ") 
number2 = input("\nSecond number: ") 
  
# Adding two numbers 
# User might also enter float numbers 
sum = float(number1) + float(number2) 
  
# Display the sum 
# will print value in float 
print("The sum of {0} and {1} is {2}" .format(number1, number2, sum)) 




# Python program to find the 
# maximum of two numbers 
  
  
def maximum(a, b): 
      
    if a >= b: 
        return a 
    else: 
        return b 
      
# Driver code 
a = 2
b = 4
print(maximum(a, b)) 




# Python program to find the 
# maximum of two numbers 
  
  
a = 2
b = 4
  
maximum = max(a, b) 
print(maximum) 




# Python 3 program to find  
# factorial of given number 
def factorial(n): 
      
    # single line to find factorial 
    return 1 if (n==1 or n==0) else n * factorial(n - 1);  
  
# Driver Code 
num = 5; 
print("Factorial of",num,"is", 
factorial(num)) 
  
# This code is contributed by Smitha Dinesh Semwal 




# Python 3 program to find   
# factorial of given number 
def factorial(n): 
    if n < 0: 
        return 0
    elif n == 0 or n == 1: 
        return 1
    else: 
        fact = 1
        while(n > 1): 
            fact *= n 
            n -= 1
        return fact 
  
# Driver Code 
num = 5; 
print("Factorial of",num,"is", 
factorial(num)) 
  
# This code is contributed by Dharmik Thakkar 




# Python 3 program to find 
# factorial of given number 
  
def factorial(n): 
  
    # single line to find factorial 
    return 1 if (n==1 or n==0) else n * factorial(n - 1)  
  
  
# Driver Code 
num = 5
print ("Factorial of",num,"is", 
      factorial(num)) 
  
# This code is contributed 
# by Smitha Dinesh Semwal. 




# Python3 program to find simple interest 
# for given principal amount, time and 
# rate of interest. 
  
  
def simple_interest(p,t,r): 
    print('The principal is', p) 
    print('The time period is', t) 
    print('The rate of interest is',r) 
      
    si = (p * t * r)/100
      
    print('The Simple Interest is', si) 
    return si 
      
# Driver code 
simple_interest(8, 6, 8) 




# Python3 program to find compound 
# interest for given values. 
  
def compound_interest(principle, rate, time): 
  
    # Calculates compound interest  
    Amount = principle * (pow((1 + rate / 100), time)) 
    CI = Amount - principle 
    print("Compound interest is", CI) 
  
# Driver Code  
compound_interest(10000, 10.25, 5) 
  
# This code is contributed by Abhishek Agrawal. 




# Python program to determine whether 
# the number is Armstrong number or not 
  
# Function to calculate x raised to  
# the power y 
def power(x, y): 
      
    if y == 0: 
        return 1
    if y % 2 == 0: 
        return power(x, y // 2) * power(x, y // 2) 
          
    return x * power(x, y // 2) * power(x, y // 2) 
  
# Function to calculate order of the number 
def order(x): 
  
    # Variable to store of the number 
    n = 0
    while (x != 0): 
        n = n + 1
        x = x // 10
          
    return n 
  
# Function to check whether the given  
# number is Armstrong number or not 
def isArmstrong(x): 
      
    n = order(x) 
    temp = x 
    sum1 = 0
      
    while (temp != 0): 
        r = temp % 10
        sum1 = sum1 + power(r, n) 
        temp = temp // 10
  
    # If condition satisfies 
    return (sum1 == x) 
  
# Driver code 
x = 153
print(isArmstrong(x)) 
  
x = 1253
print(isArmstrong(x)) 




# Python program to find Area of a circle 
  
def findArea(r): 
    PI = 3.142
    return PI * (r*r); 
  
# Driver method 
print("Area is %.6f" % findArea(5)); 
  
# This code is contributed by Chinmoy Lenka 




# Python program to print all  
# prime number in an interval 
# number should be greater than 1 
start = 11
end = 25
  
for i in range(start, end+1): 
  if i>1: 
    for j in range(2,i): 
        if(i % j==0): 
            break
    else: 
        print(i) 




// C program for
// the above approach
#include <stdio.h>
int main()
{
    // Given number
    int n = 11;
    // checking the given number
    // whether it is 1 or not
    if (n == 1) {
        printf("%d is not a prime number", n);
    }
    else {
        int f = 0;
        // iterate from 2 to n/2
        for (int i = 2; i <= (n / 2); i++) {
           
            // If n is divisible by any number between
            // 2 and n/2, it is not prime
            if (n % 2 == 0) {
                f = 1;
               
                // break out of for loop as
                // it is not prime
                break;
            }
        }
        if (f == 1) {
            printf("%d is not a prime number", n);
        }
        else {
            printf("%d is a prime number", n);
        }
    }
    return 0;
}
// This Code is Contributed by
// Murarishetty Santhosh Charan




# Python program to check if
# given number is prime or not
 
num = 11
 
# If given number is greater than 1
if num > 1:
 
    # Iterate from 2 to n / 2
    for i in range(2, int(num/2)+1):
 
        # If num is divisible by any number between
        # 2 and n / 2, it is not prime
        if (num % i) == 0:
            print(num, "is not a prime number")
            break
    else:
        print(num, "is a prime number")
 
else:
    print(num, "is not a prime number")




// C++ program for
// the above approach
#include <bits/stdc++.h>
using namespace std;
 
int main() {
    // Given number
    int n=11;
    // checking the given number 
    // whether it is 1 or not
      if(n==1)
      {
          cout<<n<<" is not a prime number";
      }
      else
      {
          int f=0;
          // iterate from 2 to n/2
          for(int i=2;i<=(n/2);i++)
          {
              // If n is divisible by any number between
            // 2 and n/2, it is not prime
              if(n%2==0)
              {
                  f=1;
                  // break out of for loop as 
                  // it is not prime
                  break;
              }
          }
          if(f==1)
          {
              cout<<n<<" is not a prime number";
          }
          else
          {
              cout<<n<<" is a prime number";
          }
      }
    return 0;
}
// This code is contributed by
// Murarishetty Santhosh Charan




# A optimized school method based 
# Python3 program to check 
# if a number is prime 
 
 
def isPrime(n) : 
 
    # Corner cases 
    if (n <= 1) : 
        return False
    if (n <= 3) : 
        return True
 
    # This is checked so that we can skip 
    # middle five numbers in below loop 
    if (n % 2 == 0 or n % 3 == 0) : 
        return False
 
    i = 5
    while(i * i <= n) : 
        if (n % i == 0 or n % (i + 2) == 0) : 
            return False
        i = i + 6
 
    return True
 
 
# Driver Program 
if (isPrime(11)) : 
    print(" true") 
else : 
    print(" false") 
     
if(isPrime(15)) : 
    print(" true") 
else : 
    print(" false") 
     
     
# This code is contributed 
# by Nikita Tiwari. 




# Function for nth Fibonacci number 
  
def Fibonacci(n): 
    if n<0: 
        print("Incorrect input") 
    # First Fibonacci number is 0 
    elif n==1: 
        return 0
    # Second Fibonacci number is 1 
    elif n==2: 
        return 1
    else: 
        return Fibonacci(n-1)+Fibonacci(n-2) 
  
# Driver Program 
  
print(Fibonacci(9)) 
  
#This code is contributed by Saket Modi 




# Function for nth fibonacci number - Dynamic Programing 
# Taking 1st two fibonacci nubers as 0 and 1 
  
FibArray = [0,1] 
  
def fibonacci(n): 
    if n<0: 
        print("Incorrect input") 
    elif n<=len(FibArray): 
        return FibArray[n-1] 
    else: 
        temp_fib = fibonacci(n-1)+fibonacci(n-2) 
        FibArray.append(temp_fib) 
        return temp_fib 
  
# Driver Program 
  
print(fibonacci(9)) 
  
#This code is contributed by Saket Modi 




# Function for nth fibonacci number - Space Optimisataion 
# Taking 1st two fibonacci numbers as 0 and 1 
  
def fibonacci(n): 
    a = 0
    b = 1
    if n < 0: 
        print("Incorrect input") 
    elif n == 0: 
        return a 
    elif n == 1: 
        return b 
    else: 
        for i in range(2,n): 
            c = a + b 
            a = b 
            b = c 
        return b 
  
# Driver Program 
  
print(fibonacci(9)) 
  
#This code is contributed by Saket Modi 




#creating an array in the function to find the nth number in fibonacci series. [0,1,1,...] 
  
def fibonacci (n): 
  
   arr = [0] * (n+1) 
  
   arr[1] = 1
  
   for i in range (2,n+1): 
  
       arr[i] = arr[i-1] + arr[i-2] 
  
   return arr[n] 
  
#Driver Program 
  
if __name__ == "__main__": 
  
   print(fibonacci (int (input ("Enter the term :" ) ) ) ) #lets assume the input as 12 
  
# This Code is contributed by Prasun Parate (prasun_parate)




# python program to check if x is a perfect square 
import math 
  
# A utility function that returns true if x is perfect square 
def isPerfectSquare(x): 
    s = int(math.sqrt(x)) 
    return s*s == x 
  
# Returns true if n is a Fibinacci Number, else false 
def isFibonacci(n): 
  
    # n is Fibinacci if one of 5*n*n + 4 or 5*n*n - 4 or both 
    # is a perferct square 
    return isPerfectSquare(5*n*n + 4) or isPerfectSquare(5*n*n - 4) 
     
# A utility function to test above functions 
for i in range(1,11): 
     if (isFibonacci(i) == True): 
         print i,"is a Fibonacci Number"
     else: 
         print i,"is a not Fibonacci Number "




# Python Program to find position of n\'th multiple 
# of a mumber k in Fibonacci Series 
  
def findPosition(k, n): 
    f1 = 0
    f2 = 1
    i =2;  
    while i!=0: 
        f3 = f1 + f2; 
        f1 = f2; 
        f2 = f3; 
  
        if f2%k == 0: 
            return n*i 
  
        i+=1
          
    return 
  
  
# Multiple no. 
n = 5; 
# Number of whose multiple we are finding 
k = 4; 
  
print("Position of n\'th multiple of k in"
                "Fibonacci Seires is", findPosition(k,n)); 
  
# Code contributed by Mohit Gupta_OMG 




# Python program to print  
# ASCII Value of Character 
  
# In c we can assign different 
# characters of which we want ASCII value  
  
c = 'g'
# print the ASCII value of assigned character in c 
print("The ASCII value of '" + c + "' is", ord(c)) 




// C program to print 
// ASCII Value of Character 
#include <stdio.h> 
int main() 
{ 
    char c = 'k'; 
  
    // %d displays the integer value of a character 
    // %c displays the actual character 
    printf("The ASCII value of %c is %d", c, c); 
    return 0; 
} 




// CPP program to print 
// ASCII Value of Character 
#include <iostream> 
using namespace std; 
int main() 
{ 
    char c = 'A'; 
    cout << "The ASCII value of " << c << " is " << int(c); 
    return 0; 
} 




// Java program to print 
// ASCII Value of Character 
public class AsciiValue { 
  
    public static void main(String[] args) 
    { 
  
        char c = 'e'; 
        int ascii = c; 
        System.out.println("The ASCII value of " + c + " is: " + ascii); 
    } 
} 




// C# program to print 
// ASCII Value of Character 
using System; 
  
public class AsciiValue  
{ 
    public static void Main() 
    { 
  
        char c = 'e'; 
        int ascii = c; 
        Console.Write("The ASCII value of " +  
                        c + " is: " + ascii); 
    } 
} 
  
// This code is contributed  
// by nitin mittal 




# Python3 Program to 
# find sum of square 
# of first n natural  
# numbers 
  
  
# Return the sum of 
# square of first n 
# natural numbers 
def squaresum(n) : 
  
    # Iterate i from 1  
    # and n finding  
    # square of i and 
    # add to sum. 
    sm = 0
    for i in range(1, n+1) : 
        sm = sm + (i * i) 
      
    return sm 
  
# Driven Program 
n = 4
print(squaresum(n)) 
  
# This code is contributed by Nikita Tiwari.*/ 




# Python3 Program to 
# find sum of square  
# of first n natural  
# numbers 
  
# Return the sum of  
# square of first n 
# natural numbers 
def squaresum(n) : 
    return (n * (n + 1) * (2 * n + 1)) // 6
  
# Driven Program 
n = 4
print(squaresum(n)) 
  
#This code is contributed by Nikita Tiwari.                                                                




# Python Program to find sum of square of first 
# n natural numbers. This program avoids 
# overflow upto some extent for large value 
# of n.y 
  
def squaresum(n): 
    return (n * (n + 1) / 2) * (2 * n + 1) / 3
  
# main() 
n = 4
print(squaresum(n)); 
  
# Code Contributed by Mohit Gupta_OMG <(0_o)> 




# Simple Python program to find sum of series 
# with cubes of first n natural numbers 
  
# Returns the sum of series  
def sumOfSeries(n): 
    sum = 0
    for i in range(1, n+1): 
        sum +=i*i*i 
          
    return sum
  
   
# Driver Function 
n = 5
print(sumOfSeries(n)) 
  
# Code Contributed by Mohit Gupta_OMG <(0_o)> 




# A formula based Python program to find sum 
# of series with cubes of first n natural  
# numbers 
  
# Returns the sum of series  
def sumOfSeries(n): 
    x = (n * (n + 1)  / 2) 
    return (int)(x * x) 
  
  
   
# Driver Function 
n = 5
print(sumOfSeries(n)) 
  
# Code Contributed by Mohit Gupta_OMG <(0_o)> 




# Efficient Python program to find sum of cubes  
# of first n natural numbers that avoids  
# overflow if result is going to be withing  
# limits. 
  
# Returns the sum of series  
def sumOfSeries(n): 
    x = 0
    if n % 2 == 0 :  
        x = (n/2) * (n+1) 
    else: 
        x = ((n + 1) / 2) * n 
          
    return (int)(x * x) 
  
   
# Driver Function 
n = 5
print(sumOfSeries(n)) 
  
# Code Contributed by Mohit Gupta_OMG <(0_o)> 




# Python 3 code to find sum  
# of elements in given array  
def _sum(arr):  
      
    # initialize a variable 
    # to store the sum 
    # while iterating through 
    # the array later 
    sum=0
      
    # iterate through the array 
    # and add each element to the sum variable 
    # one at a time 
    for i in arr: 
        sum = sum + i 
          
    return(sum)  
  
# driver function  
arr=[]  
# input values to list  
arr = [12, 3, 4, 15]  
  
# calculating length of array  
n = len(arr)  
  
ans = _sum(arr)  
  
# display sum  
print ('Sum of the array is ', ans)  
  
# This code is contributed by Himanshu Ranjan  




# Python 3 code to find sum  
# of elements in given array 
# driver function 
arr = [] 
  
# input values to list 
arr = [12, 3, 4, 15] 
  
# sum() is an inbuilt function in python that adds  
# all the elements in list,set and tuples and returns 
# the value  
ans = sum(arr) 
  
# display sum 
print ('Sum of the array is ',ans) 
  
# This code is contributed by Dhananjay Patil  




# Python3 program to find maximum 
# in arr[] of size n  
  
# python function to find maximum 
# in arr[] of size n 
def largest(arr,n): 
  
    # Initialize maximum element 
    max = arr[0] 
  
    # Traverse array elements from second 
    # and compare every element with  
    # current max 
    for i in range(1, n): 
        if arr[i] > max: 
            max = arr[i] 
    return max
  
# Driver Code 
arr = [10, 324, 45, 90, 9808] 
n = len(arr) 
Ans = largest(arr,n) 
print ("Largest in given array is",Ans) 
  
# This code is contributed by Smitha Dinesh Semwal 




# function to rotate array by d elements using temp array
def rotateArray(arr, n, d):
    temp = []
    i = 0
    while (i < d):
        temp.append(arr[i])
        i = i + 1
    i = 0
    while (d < n):
        arr[i] = arr[d]
        i = i + 1
        d = d + 1
    arr[:] = arr[: i] + temp
    return arr
 
 
# Driver function to test above function
arr = [1, 2, 3, 4, 5, 6, 7]
print("Array after left rotation is: ", end=' ')
print(rotateArray(arr, len(arr), 2))
 
# this code is contributed by Anabhra Tyagi




#Function to left rotate arr[] of size n by d*/
def leftRotate(arr, d, n):
    for i in range(d):
        leftRotatebyOne(arr, n)
 
#Function to left Rotate arr[] of size n by 1*/ 
def leftRotatebyOne(arr, n):
    temp = arr[0]
    for i in range(n-1):
        arr[i] = arr[i+1]
    arr[n-1] = temp
         
 
# utility function to print an array */
def printArray(arr,size):
    for i in range(size):
        print ("%d"% arr[i],end=" ")
 
  
# Driver program to test above functions */
arr = [1, 2, 3, 4, 5, 6, 7]
leftRotate(arr, 2, 7)
printArray(arr, 7)
 
# This code is contributed by Shreyanshi Arun




#Function to left rotate arr[] of size n by d
def leftRotate(arr, d, n):
    for i in range(gcd(d,n)):
         
        # move i-th values of blocks 
        temp = arr[i]
        j = i
        while 1:
            k = j + d
            if k >= n:
                k = k - n
            if k == i:
                break
            arr[j] = arr[k]
            j = k
        arr[j] = temp
 
#UTILITY FUNCTIONS
#function to print an array 
def printArray(arr, size):
    for i in range(size):
        print ("%d" % arr[i], end=" ")
  
#Function to get gcd of a and b
def gcd(a, b):
    if b == 0:
        return a;
    else:
        return gcd(b, a%b)
  
# Driver program to test above functions 
arr = [1, 2, 3, 4, 5, 6, 7]
leftRotate(arr, 2, 7)
printArray(arr, 7)
 
# This code is contributed by Shreyanshi Arun




# Python program using the List 
# slicing approch to rotate the array
def rotateList(arr,d,n):
  arr[:]=arr[d:n]+arr[0:d]
  return arr
# Driver function to test above function 
arr = [1, 2, 3, 4, 5, 6] 
print(arr) 
print("Rotated list is") 
print(rotateList(arr,2,len(arr)))  
 
# this code is contributed by virusbuddah




# Python program for reversal algorithm of array rotation 
  
# Function to reverse arr[] from index start to end 
def rverseArray(arr, start, end): 
    while (start < end): 
        temp = arr[start] 
        arr[start] = arr[end] 
        arr[end] = temp 
        start += 1
        end = end-1
  
# Function to left rotate arr[] of size n by d 
def leftRotate(arr, d): 
    n = len(arr) 
    rverseArray(arr, 0, d-1) 
    rverseArray(arr, d, n-1) 
    rverseArray(arr, 0, n-1) 
  
# Function to print an array 
def printArray(arr): 
    for i in range(0, len(arr)): 
        print (arr[i]) 
  
# Driver function to test above functions 
arr = [1, 2, 3, 4, 5, 6, 7] 
leftRotate(arr, 2) # Rotate array by 2 
printArray(arr) 
  
# This code is contributed by Devesh Agrawal 




# Python program to split array and move first 
# part to end. 
  
def splitArr(arr, n, k):  
    for i in range(0, k):  
        x = arr[0] 
        for j in range(0, n-1): 
            arr[j] = arr[j + 1] 
          
        arr[n-1] = x 
          
  
# main 
arr = [12, 10, 5, 6, 52, 36] 
n = len(arr) 
position = 2
  
splitArr(arr, n, position) 
  
for i in range(0, n):  
    print(arr[i], end = ' ') 
  
# Code Contributed by Mohit Gupta_OMG <(0_o)>    




# Python program to split array and move first 
# part to end. 
  
def splitArr(a, n, k):  
   b = a[:k] 
   return (a[k::]+b[::]) 
          
  
# main 
arr = [12, 10, 5, 6, 52, 36] 
n = len(arr) 
position = 2
arr = splitArr(arr, n, position) 
for i in range(0, n):  
    print(arr[i], end = ' ') 




# Python3 program to 
# find remainder when 
# all array elements 
# are multiplied. 
  
# Find remainder of arr[0] * arr[1] 
# * .. * arr[n-1] 
def findremainder(arr, lens, n): 
    mul = 1
  
    # find the individual 
    # remainder and  
    # multiple with mul. 
    for i in range(lens):  
        mul = (mul * (arr[i] % n)) % n 
      
    return mul % n 
  
# Driven code 
arr = [ 100, 10, 5, 25, 35, 14 ] 
lens = len(arr) 
n = 11
  
# print the remainder 
# of after multiple 
# all the numbers 
print( findremainder(arr, lens, n)) 
  
# This code is contributed by "rishabh_jain". 




# Python3 program to find sum in Nth group 
  
# Check if given array is Monotonic 
def isMonotonic(A): 
  
    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or
            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) 
  
# Driver program 
A = [6, 5, 4, 4] 
  
# Print required result 
print(isMonotonic(A)) 
  
# This code is written by 
# Sanjit_Prasad 




# Python3 program to swap first 
# and last element of a list 
  
# Swap function 
def swapList(newList): 
    size = len(newList) 
      
    # Swapping  
    temp = newList[0] 
    newList[0] = newList[size - 1] 
    newList[size - 1] = temp 
      
    return newList 
      
# Driver code 
newList = [12, 35, 9, 56, 24] 
  
print(swapList(newList)) 




# Python3 program to swap first 
# and last element of a list 
  
# Swap function 
def swapList(newList): 
      
    newList[0], newList[-1] = newList[-1], newList[0] 
  
    return newList 
      
# Driver code 
newList = [12, 35, 9, 56, 24] 
print(swapList(newList)) 




# Python3 program to swap first 
# and last element of a list 
  
# Swap function 
def swapList(list): 
      
    # Storing the first and last element  
    # as a pair in a tuple variable get 
    get = list[-1], list[0] 
      
    # unpacking those elements 
    list[0], list[-1] = get 
      
    return list
      
# Driver code 
newList = [12, 35, 9, 56, 24] 
print(swapList(newList)) 




# Python3 program to illustrate  
# the usage of * operarnd 
list = [1, 2, 3, 4] 
  
a, *b, c = list
  
print(a) 
print(b) 
print(c) 




# Python3 program to swap first 
# and last element of a list 
  
# Swap function 
def swapList(list): 
      
    start, *middle, end = list
    list = [end, *middle, start] 
      
    return list
      
# Driver code 
newList = [12, 35, 9, 56, 24] 
  
print(swapList(newList)) 




# Python3 program to swap first 
# and last element of a list 
  
# Swap function 
def swapList(list): 
      
    first = list.pop(0)    
    last = list.pop(-1) 
      
    list.insert(0, last)   
    list.append(first)    
      
    return list
      
# Driver code 
newList = [12, 35, 9, 56, 24] 
  
print(swapList(newList)) 




# Python3 program to swap elements 
# at given positions 
  
# Swap function 
def swapPositions(list, pos1, pos2): 
      
    list[pos1], list[pos2] = list[pos2], list[pos1] 
    return list
  
# Driver function 
List = [23, 65, 19, 90] 
pos1, pos2  = 1, 3
  
print(swapPositions(List, pos1-1, pos2-1)) 




# Python3 program to swap elements 
# at given positions 
  
# Swap function 
def swapPositions(list, pos1, pos2): 
      
    # popping both the elements from list 
    first_ele = list.pop(pos1)    
    second_ele = list.pop(pos2-1) 
     
    # inserting in each others positions 
    list.insert(pos1, second_ele)   
    list.insert(pos2, first_ele)   
      
    return list
  
# Driver function 
List = [23, 65, 19, 90] 
pos1, pos2  = 1, 3
  
print(swapPositions(List, pos1-1, pos2-1)) 




# Python3 program to swap elements at 
# given positions 
  
# Swap function 
def swapPositions(list, pos1, pos2): 
  
    # Storing the two elements 
    # as a pair in a tuple variable get 
    get = list[pos1], list[pos2] 
       
    # unpacking those elements 
    list[pos2], list[pos1] = get 
       
    return list
  
# Driver Code 
List = [23, 65, 19, 90] 
  
pos1, pos2  = 1, 3
print(swapPositions(List, pos1-1, pos2-1)) 




# Python3 program to swap elements 
# at given positions 
  
def swapPositions(list, pos1, pos2): 
    list[pos1],list[pos2] = list[pos2],list[pos1] 
    return list
  
# Driver Code 
List = [23, 65, 19, 90] 
pos1, pos2  = 1, 3
print(swapPositions(List, pos1-1, pos2-1)) 




# Python code to demonstrate 
# length of list 
# using naive method 
  
# Initializing list  
test_list = [ 1, 4, 5, 7, 8 ] 
  
# Printing test_list 
print ("The list is : " + str(test_list)) 
  
# Finding length of list  
# using loop 
# Initializing counter 
counter = 0
for i in test_list: 
      
    # incrementing counter 
    counter = counter + 1
  
# Printing length of list  
print ("Length of list using naive method is : " + str(counter)) 




# Python program to demonstrate working 
# of len() 
a = [] 
a.append("Hello") 
a.append("Geeks") 
a.append("For") 
a.append("Geeks") 
print("The length of list is: ", len(a)) 




# Python program to demonstrate working 
# of len() 
n = len([10, 20, 30]) 
print("The length of list is: ", n) 




# Python code to demonstrate 
# length of list 
# using len() and length_hint 
from operator import length_hint 
  
# Initializing list  
test_list = [ 1, 4, 5, 7, 8 ] 
  
# Printing test_list 
print ("The list is : " + str(test_list)) 
  
# Finding length of list  
# using len() 
list_len = len(test_list) 
  
# Finding length of list  
# using length_hint() 
list_len_hint = length_hint(test_list) 
  
# Printing length of list  
print ("Length of list using len() is : " + str(list_len)) 
print ("Length of list using length_hint() is : " + str(list_len_hint)) 




# Python code to demonstrate 
# length of list 
# Performance Analysis 
from operator import length_hint 
import time 
  
# Initializing list  
test_list = [ 1, 4, 5, 7, 8 ] 
  
# Printing test_list 
print ("The list is : " + str(test_list)) 
  
# Finding length of list  
# using loop 
# Initializing counter 
start_time_naive = time.time() 
counter = 0
for i in test_list: 
      
    # incrementing counter 
    counter = counter + 1
end_time_naive = str(time.time() - start_time_naive) 
  
# Finding length of list  
# using len() 
start_time_len = time.time() 
list_len = len(test_list) 
end_time_len = str(time.time() - start_time_len) 
  
# Finding length of list  
# using length_hint() 
start_time_hint = time.time() 
list_len_hint = length_hint(test_list) 
end_time_hint = str(time.time() - start_time_hint) 
  
# Printing Times of each  
print ("Time taken using naive method is : " + end_time_naive) 
print ("Time taken using len() is : " + end_time_len) 
print ("Time taken using length_hint() is : " + end_time_hint) 




# Python code to demonstrate 
# checking of element existence 
# using loops and in 
  
# Initializing list  
test_list = [ 1, 6, 3, 5, 3, 4 ] 
  
print("Checking if 4 exists in list ( using loop ) : ") 
  
# Checking if 4 exists in list  
# using loop 
for i in test_list: 
    if(i == 4) : 
        print ("Element Exists") 
  
print("Checking if 4 exists in list ( using in ) : ") 
  
# Checking if 4 exists in list  
# using in 
if (4 in test_list): 
    print ("Element Exists") 




# Python code to demonstrate 
# checking of element existence 
# using set() + in 
# using sort() + bisect_left() 
from bisect import bisect_left  
  
# Initializing list  
test_list_set = [ 1, 6, 3, 5, 3, 4 ] 
test_list_bisect = [ 1, 6, 3, 5, 3, 4 ] 
  
print("Checking if 4 exists in list ( using set() + in) : ") 
  
# Checking if 4 exists in list  
# using set() + in 
test_list_set = set(test_list_set) 
if 4 in test_list_set : 
    print ("Element Exists") 
  
print("Checking if 4 exists in list ( using sort() + bisect_left() ) : ") 
  
# Checking if 4 exists in list  
# using sort() + bisect_left() 
test_list_bisect.sort() 
if bisect_left(test_list_bisect, 4): 
    print ("Element Exists") 




# Python program to clear a list 
# using clear() method  
  
# Creating list 
GEEK = [6, 0, 4, 1] 
print('GEEK before clear:', GEEK)  
  
# Clearing list  
GEEK.clear()  
print('GEEK after clear:', GEEK)  




# Python3 code to demonstrate  
# clearing a list using 
# clear and Reinitializing  
  
# Initializing lists 
list1 = [1, 2, 3] 
list2 = [5, 6, 7] 
  
# Printing list1 before deleting  
print ("List1 before deleting is : " 
+  str(list1)) 
  
# deleting list using clear() 
list1.clear() 
  
# Printing list1 after clearing 
print ("List1 after clearing using clear() : " 
+ str(list1)) 
  
# Printing list2 before deleting  
print ("List2 before deleting is : "
 +  str(list2)) 
  
# deleting list using reinitialization 
list2 = [] 
  
# Printing list2 after reinitialization 
print ("List2 after clearing using reinitialization : " 
+ str(list2)) 




# Python3 code to demonstrate  
# clearing a list using 
# *= 0 method 
  
# Initializing lists 
list1 = [1, 2, 3] 
  
# Printing list1 before deleting  
print ("List1 before deleting is : " + str(list1)) 
  
# deleting list using *= 0 
list1 *= 0
  
# Printing list1 after *= 0 
print ("List1 after clearing using *= 0: " + str(list1)) 




# Python3 code to demonstrate  
# clearing a list using 
# del method 
  
# Initializing lists 
list1 = [1, 2, 3] 
list2 = [5, 6, 7] 
  
# Printing list1 before deleting  
print ("List1 before deleting is : " + str(list1)) 
  
# deleting list1 using del 
del list1[:] 
print ("List1 after clearing using del : " + str(list1)) 
  
  
# Printing list2 before deleting  
print ("List2 before deleting is : " + str(list2)) 
  
# deleting list using del 
del list2[:] 
print ("List2 after clearing using del : " + str(list2)) 




# Reversing a list using reversed() 
def Reverse(lst): 
    return [ele for ele in reversed(lst)] 
      
# Driver Code 
lst = [10, 11, 12, 13, 14, 15] 
print(Reverse(lst)) 




# Reversing a list using reverse() 
def Reverse(lst): 
    lst.reverse() 
    return lst 
      
lst = [10, 11, 12, 13, 14, 15] 
print(Reverse(lst)) 




# Reversing a list using slicing technique 
def Reverse(lst): 
    new_lst = lst[::-1] 
    return new_lst 
      
lst = [10, 11, 12, 13, 14, 15] 
print(Reverse(lst)) 




# Python program to find sum of elements in list
total = 0
 
# creating a list
list1 = [11, 5, 17, 18, 23] 
 
# Iterate each element in list
# and add them in variale total
for ele in range(0, len(list1)):
    total = total + list1[ele]
 
# printing total value
print("Sum of all elements in given list: ", total)




# Python program to find sum of elements in list
total = 0
ele = 0
 
# creating a list
list1 = [11, 5, 17, 18, 23] 
 
# Iterate each element in list
# and add them in variale total
while(ele < len(list1)):
    total = total + list1[ele]
    ele += 1
     
# printing total value
print("Sum of all elements in given list: ", total)




# Python program to find sum of all 
# elements in list using recursion
 
# creating a list
list1 = [11, 5, 17, 18, 23]
 
# creating sum_list function
def sumOfList(list, size):
   if (size == 0):
     return 0
   else:
     return list[size - 1] + sumOfList(list, size - 1)
  
# Driver code     
total = sumOfList(list1, len(list1))
 
print("Sum of all elements in given list: ", total)




# Python program to find sum of elements in list
 
# creating a list
list1 = [11, 5, 17, 18, 23]
 
# using sum() function
total = sum(list1)
 
# printing total value
print("Sum of all elements in given list: ", total)




# Python program to multiply all values in the
# list using traversal
 
def multiplyList(myList) :
     
    # Multiply elements one by one
    result = 1
    for x in myList:
         result = result * x 
    return result 
     
# Driver code
list1 = [1, 2, 3] 
list2 = [3, 2, 4]
print(multiplyList(list1))
print(multiplyList(list2))




# Python3 program to multiply all values in the
# list using numpy.prod()
 
import numpy 
list1 = [1, 2, 3] 
list2 = [3, 2, 4]
 
# using numpy.prod() to get the multiplications 
result1 = numpy.prod(list1)
result2 = numpy.prod(list2)
print(result1)
print(result2)




# Python3 program to multiply all values in the
# list using lambda function and reduce()
 
from functools import reduce
list1 = [1, 2, 3] 
list2 = [3, 2, 4]
 
 
result1 = reduce((lambda x, y: x * y), list1)
result2 = reduce((lambda x, y: x * y), list2)
print(result1)
print(result2)




# Python3 program to multiply all values in the
# list using math.prod
 
import math
list1 = [1, 2, 3] 
list2 = [3, 2, 4]
 
 
result1 = math.prod(list1)
result2 = math.prod(list2)
print(result1)
print(result2)




# Python program to find smallest 
# number in a list
 
# list of numbers
list1 = [10, 20, 4, 45, 99]
 
# sorting the list
list1.sort()
 
# printing the first element
print("Smallest element is:", *list1[:1])




# Python program to find smallest 
# number in a list
 
# list of numbers
list1 = [10, 20, 1, 45, 99]
 
 
# printing the maximum element
print("Smallest element is:", min(list1))




# Python program to find smallest 
# number in a list
 
# creating empty list
list1 = []
 
# asking number of elements to put in list
num = int(input("Enter number of elements in list: "))
 
# iterating till num to append elements in list
for i in range(1, num + 1):
    ele= int(input("Enter elements: "))
    list1.append(ele)
     
# print maximum element
print("Smallest element is:", min(list1))




# Python program to find smallest 
# number in a list
 
l=[ int(l) for l in input("List:").split(",")]
print("The list is ",l)
 
# Assign first element as a minimum.
min1 = l[0]
 
for i in range(len(l)):
 
    # If the other element is min than first element
    if l[i] < min1: 
        min1 = l[i] #It will change
 
print("The smallest element in the list is ",min1)




# Python program to find largest 
# number in a list 
  
# list of numbers 
list1 = [10, 20, 4, 45, 99] 
  
# sorting the list 
list1.sort() 
  
# printing the last element 
print("Largest element is:", list1[-1]) 




# Python program to find largest 
# number in a list 
  
# list of numbers 
list1 = [10, 20, 4, 45, 99] 
  
  
# printing the maximum element 
print("Largest element is:", max(list1)) 




# Python program to find largest 
# number in a list 
  
# creating empty list 
list1 = [] 
  
# asking number of elements to put in list 
num = int(input("Enter number of elements in list: ")) 
  
# iterating till num to append elements in list 
for i in range(1, num + 1): 
    ele = int(input("Enter elements: ")) 
    list1.append(ele) 
      
# print maximum element 
print("Largest element is:", max(list1)) 




# Python program to find largest 
# number in a list 
  
def myMax(list1): 
  
    # Assume first number in list is largest 
    # initially and assign it to variable "max" 
    max = list1[0] 
   
    # Now traverse through the list and compare  
    # each number with "max" value. Whichever is  
    # largest assign that value to "max'. 
    for x in list1: 
        if x > max : 
             max = x 
      
    # after complete traversing the list  
    # return the "max" value 
    return max
  
  
# Driver code 
list1 = [10, 20, 4, 45, 99] 
print("Largest element is:", myMax(list1)) 




# Python program to find second largest
# number in a list
 
# list of numbers - length of 
# list should be at least 2
list1 = [10, 20, 4, 45, 99]
 
mx=max(list1[0],list1[1]) 
secondmax=min(list1[0],list1[1]) 
n =len(list1)
for i in range(2,n): 
    if list1[i]>mx: 
        secondmax=mx
        mx=list1[i] 
    elif list1[i]>secondmax and \
        mx != list1[i]: 
        secondmax=list1[i]
 
print("Second highest number is : ",\
      str(secondmax))




# Python program to find largest
# number in a list
 
# list of numbers
list1 = [10, 20, 4, 45, 99]
 
# sorting the list
list1.sort()
 
# printing the second last element
print("Second largest element is:", list1[-2])




# Python program to find second largest
# number in a list
 
# list of numbers
list1 = [10, 20, 4, 45, 99]
 
# new_list is a set of list1
new_list = set(list1)
 
# removing the largest element from temp list
new_list.remove(max(new_list))
 
# elements in original list are not changed
# print(list1)
 
print(max(new_list))




# Python program to find second largest
# number in a list
 
# creating empty list
list1 = []
 
# asking number of elements to put in list
num = int(input("Enter number of elements in list: "))
 
# iterating till num to append elements in list
for i in range(1, num + 1):
    ele = int(input("Enter elements: "))
    list1.append(ele)
 
'''
# sort the list    
list1.sort()
     
# print second maximum element
print("Second largest element is:", list1[-2])
 
'''
 
# print second maximum element using sorted() method
print("Second largest element is:", sorted(list1)[-2])




# Python program to find N largest 
# element from given list of integers 
  
# Function returns N largest elements 
def Nmaxelements(list1, N): 
    final_list = [] 
  
    for i in range(0, N):  
        max1 = 0
          
        for j in range(len(list1)):      
            if list1[j] > max1: 
                max1 = list1[j]; 
                  
        list1.remove(max1); 
        final_list.append(max1) 
          
    print(final_list) 
  
# Driver code 
list1 = [2, 6, 41, 85, 0, 3, 7, 6, 10] 
N = 2
  
# Calling the function 
Nmaxelements(list1, N) 




# Python program to find N largest 
# element from given list of integers 
  
l = [1000,298,3579,100,200,-45,900] 
n = 4
  
l.sort() 
print(l[-n:]) 




# Python program to print Even Numbers in a List 
  
# list of numbers 
list1 = [10, 21, 4, 45, 66, 93] 
  
# iterating each number in list 
for num in list1: 
      
    # checking condition 
    if num % 2 == 0: 
       print(num, end = " ") 




# Python program to print Even Numbers in a List 
  
# list of numbers 
list1 = [10, 21, 4, 45, 66, 93] 
num = 0
  
# using while loop         
while(num < len(list1)): 
      
    # checking condition 
    if num % 2 == 0: 
       print(list1[num], end = " ") 
      
    # increment num   
    num += 1
     




# Python program to print even Numbers in a List 
  
# list of numbers 
list1 = [10, 21, 4, 45, 66, 93] 
  
# using list comprehension 
even_nos = [num for num in list1 if num % 2 == 0] 
  
print("Even numbers in the list: ", even_nos) 




# Python program to print Even Numbers in a List 
  
# list of numbers  
list1 = [10, 21, 4, 45, 66, 93, 11]  
  
  
# we can also print even no's using lambda exp.  
even_nos = list(filter(lambda x: (x % 2 == 0), list1)) 
  
print("Even numbers in the list: ", even_nos)  




# Python program to print odd Numbers in a List 
  
# list of numbers 
list1 = [10, 21, 4, 45, 66, 93] 
  
# iterating each number in list 
for num in list1: 
      
    # checking condition 
    if num % 2 != 0: 
       print(num, end = " ") 




# Python program to print odd Numbers in a List 
  
# list of numbers 
list1 = [10, 21, 4, 45, 66, 93] 
i = 0
  
# using while loop         
while(i < len(list1)): 
      
    # checking condition 
    if list1[i] % 2 != 0: 
        print(list1[i], end = " ") 
      
    # increment i   
    i += 1
     




# Python program to print odd Numbers in a List 
  
# list of numbers 
list1 = [10, 21, 4, 45, 66, 93] 
  
only_odd = [num for num in list1 if num % 2 == 1] 
  
print(only_odd) 




# Python program to print odd numbers in a List 
  
# list of numbers  
list1 = [10, 21, 4, 45, 66, 93, 11]  
  
  
# we can also print odd no's using lambda exp.  
odd_nos = list(filter(lambda x: (x % 2 != 0), list1)) 
  
print("Odd numbers in the list: ", odd_nos)  




# Python program to print Even Numbers in given range 
  
start, end = 4, 19
  
# iterating each number in list 
for num in range(start, end + 1): 
      
    # checking condition 
    if num % 2 == 0: 
        print(num, end = " ") 




# Python program to print Even Numbers in given range 
  
start = int(input("Enter the start of range: ")) 
end = int(input("Enter the end of range: ")) 
  
# iterating each number in list 
for num in range(start, end + 1): 
      
    # checking condition 
    if num % 2 == 0: 
        print(num, end = " ") 




# Python program to print odd Numbers in given range 
  
start, end = 4, 19
  
# iterating each number in list 
for num in range(start, end + 1): 
      
    # checking condition 
    if num % 2 != 0: 
        print(num, end = " ") 




# Python program to print Even Numbers in given range 
  
start = int(input("Enter the start of range: ")) 
end = int(input("Enter the end of range: ")) 
  
# iterating each number in list 
for num in range(start, end + 1): 
      
    # checking condition 
    if num % 2 != 0: 
        print(num, end = " ") 




# Python program to print Even Numbers in given range 
  
start = int(input("Enter the start of range: ")) 
end = int(input("Enter the end of range: ")) 
  
#create a list that contains only Even numbers in given range 
even_list = range(start, end + 1)[start%2::2] 
  
for num in even_list: 
    print(num, end = " ") 




# Python program to print positive Numbers in a List 
  
# list of numbers 
list1 = [11, -21, 0, 45, 66, -93] 
  
# iterating each number in list 
for num in list1: 
      
    # checking condition 
    if num >= 0: 
       print(num, end = " ") 




# Python program to print positive Numbers in a List 
  
# list of numbers 
list1 = [-10, 21, -4, -45, -66, 93] 
num = 0
  
# using while loop      
while(num < len(list1)): 
      
    # checking condition 
    if list1[num] >= 0: 
        print(list1[num], end = " ") 
      
    # increment num  
    num += 1
     




# Python program to print Positive Numbers in a List 
  
# list of numbers 
list1 = [-10, -21, -4, 45, -66, 93] 
  
# using list comprehension 
pos_nos = [num for num in list1 if num >= 0] 
  
print("Positive numbers in the list: ", *pos_nos) 




# Python program to print positive Numbers in a List 
  
# list of numbers  
list1 = [-10, 21, 4, -45, -66, 93, -11]  
  
  
# we can also print positive no's using lambda exp.  
pos_nos = list(filter(lambda x: (x >= 0), list1)) 
  
print("Positive numbers in the list: ", *pos_nos)  




# Python program to print negative Numbers in a List 
  
# list of numbers 
list1 = [11, -21, 0, 45, 66, -93] 
  
# iterating each number in list 
for num in list1: 
      
    # checking condition 
    if num < 0: 
       print(num, end = " ") 




# Python program to print negative Numbers in a List 
  
# list of numbers 
list1 = [-10, 21, -4, -45, -66, 93] 
num = 0
  
# using while loop      
while(num < len(list1)): 
      
    # checking condition 
    if list1[num] < 0: 
        print(list1[num], end = " ") 
      
    # increment num  
    num += 1
     




# Python program to print negative Numbers in a List 
  
# list of numbers 
list1 = [-10, -21, -4, 45, -66, 93] 
  
# using list comprehension 
neg_nos = [num for num in list1 if num < 0] 
  
print("Negative numbers in the list: ", *neg_nos) 




# Python program to print negative Numbers in a List 
  
# list of numbers  
list1 = [-10, 21, 4, -45, -66, 93, -11]  
  
  
# we can also print negative no's using lambda exp.  
neg_nos = list(filter(lambda x: (x < 0), list1)) 
  
print("Negative numbers in the list: ", *neg_nos)  




# Python program to print positive Numbers in given range 
  
start, end = -4, 19
  
# iterating each number in list 
for num in range(start, end + 1): 
      
    # checking condition 
    if num >= 0: 
        print(num, end = " ") 




# Python program to print positive Numbers in given range 
  
start = int(input("Enter the start of range: ")) 
end = int(input("Enter the end of range: ")) 
  
# iterating each number in list 
for num in range(start, end + 1): 
      
    # checking condition 
    if num >= 0: 
        print(num, end = " ") 




# Python program to print negative Numbers in given range 
  
start, end = -4, 19
  
# iterating each number in list 
for num in range(start, end + 1): 
      
    # checking condition 
    if num < 0: 
        print(num, end = " ") 




# Python program to print negative Numbers in given range 
  
start = int(input("Enter the start of range: ")) 
end = int(input("Enter the end of range: ")) 
  
# iterating each number in list 
for num in range(start, end + 1): 
      
    # checking condition 
    if num < 0: 
        print(num, end = " ") 




# Python program to remove multiple 
# elements from a list  
  
# creating a list 
list1 = [11, 5, 17, 18, 23, 50]  
  
# Iterate each element in list 
# and add them in variale total 
for ele in list1: 
    if ele % 2 == 0: 
        list1.remove(ele) 
  
# printing modified list 
print("New list after removing all even numbers: ", list1) 




# Python program to remove multiple 
# elements from a list  
  
# creating a list 
list1 = [11, 5, 17, 18, 23, 50]  
  
# will create a new list,  
# excluding all even numbers 
list1 = [ elem for elem in list1 if elem % 2 != 0] 
  
print(*list1) 




# Python program to remove multiple 
# elements from a list  
  
# creating a list 
list1 = [11, 5, 17, 18, 23, 50]  
  
# removes elements from index 1 to 4 
# i.e. 5, 17, 18, 23 will be deleted 
del list1[1:5] 
  
print(*list1) 




# Python program to remove multiple 
# elements from a list  
  
# creating a list 
list1 = [11, 5, 17, 18, 23, 50]  
  
# items to be removed 
unwanted_num = {11, 5} 
  
list1 = [ele for ele in list1 if ele not in unwanted_num] 
  
# printing modified list 
print("New list after removing unwanted numbers: ", list1) 




# Python program to remove multiple 
# elements from a list  
  
# creating a list 
list1 = [11, 5, 17, 18, 23, 50]  
  
# given index of elements  
# removes 11, 18, 23 
unwanted = [0, 3, 4] 
  
for ele in sorted(unwanted, reverse = True):  
    del list1[ele] 
  
# printing modified list 
print (*list1) 




# Python3 code to demonstrate  
# Remove empty List from List 
# using list comprehension 
  
# Initializing list  
test_list = [5, 6, [], 3, [], [], 9] 
  
# printing original list  
print("The original list is : " + str(test_list)) 
  
# Remove empty List from List 
# using list comprehension 
res = [ele for ele in test_list if ele != []] 
  
# printing result  
print ("List after empty list removal : " + str(res)) 




# Python3 code to demonstrate  
# Remove empty List from List 
# using filter() 
  
# Initializing list  
test_list = [5, 6, [], 3, [], [], 9] 
  
# printing original list  
print("The original list is : " + str(test_list)) 
  
# Remove empty List from List 
# using filter 
res = list(filter(None, test_list)) 
  
# printing result  
print ("List after empty list removal : " + str(res)) 




# Python program to copy or clone a list 
# Using the Slice Operator 
def Cloning(li1): 
    li_copy = li1[:] 
    return li_copy 
  
# Driver Code 
li1 = [4, 8, 2, 10, 15, 18] 
li2 = Cloning(li1) 
print("Original List:", li1) 
print("After Cloning:", li2) 




# Python code to clone or copy a list 
# Using the in-built function extend() 
def Cloning(li1): 
    li_copy = [] 
    li_copy.extend(li1) 
    return li_copy 
  
# Driver Code 
li1 = [4, 8, 2, 10, 15, 18] 
li2 = Cloning(li1) 
print("Original List:", li1) 
print("After Cloning:", li2) 




# Python code to clone or copy a list 
# Using the in-built function list() 
def Cloning(li1): 
    li_copy = list(li1) 
    return li_copy 
  
# Driver Code 
li1 = [4, 8, 2, 10, 15, 18] 
li2 = Cloning(li1) 
print("Original List:", li1) 
print("After Cloning:", li2) 




# Python code to clone or copy a list 
# Using list comprehension 
def Cloning(li1): 
    li_copy = [i for i in li1] 
    return li_copy 
  
# Driver Code 
li1 = [4, 8, 2, 10, 15, 18] 
li2 = Cloning(li1) 
print("Original List:", li1) 
print("After Cloning:", li2) 




# Python code to clone or copy a list 
# Using append() 
def Cloning(li1): 
    li_copy =[] 
    for item in li1: li_copy.append(item) 
    return li_copy 
  
# Driver Code 
li1 = [4, 8, 2, 10, 15, 18] 
li2 = Cloning(li1) 
print("Original List:", li1) 
print("After Cloning:", li2) 




# Python code to clone or copy a list 
# Using bilt-in method copy() 
def Cloning(li1): 
    li_copy =[] 
    li_copy = li1.copy() 
    return li_copy 
  
# Driver Code 
li1 = [4, 8, 2, 10, 15, 18] 
li2 = Cloning(li1) 
print("Original List:", li1) 
print("After Cloning:", li2) 




# Python code to count the number of occurrences 
def countX(lst, x): 
    count = 0
    for ele in lst: 
        if (ele == x): 
            count = count + 1
    return count 
  
# Driver Code 
lst = [8, 6, 8, 10, 8, 20, 10, 8, 8] 
x = 8
print('{} has occurred {} times'.format(x, countX(lst, x))) 




# Python code to count the number of occurrences 
def countX(lst, x): 
    return lst.count(x) 
  
# Driver Code 
lst = [8, 6, 8, 10, 8, 20, 10, 8, 8] 
x = 8
print('{} has occurred {} times'.format(x, countX(lst, x))) 




from collections import Counter 
  
# declaring the list 
l = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5] 
  
# driver program 
x = 3
d = Counter(l) 
print('{} has occurred {} times'.format(x, d[x])) 




# Python program to remove empty tuples from a  
# list of tuples function to remove empty tuples  
# using list comprehension 
def Remove(tuples): 
    tuples = [t for t in tuples if t] 
    return tuples 
  
# Driver Code 
tuples = [(), ('ram','15','8'), (), ('laxman', 'sita'),  
          ('krishna', 'akbar', '45'), ('',''),()] 
print(Remove(tuples)) 




# Python2 program to remove empty tuples 
# from a list of tuples function to remove  
# empty tuples using filter 
def Remove(tuples): 
    tuples = filter(None, tuples) 
    return tuples 
  
# Driver Code 
tuples = [(), ('ram','15','8'), (), ('laxman', 'sita'),  
          ('krishna', 'akbar', '45'), ('',''),()] 
print Remove(tuples) 




# Python program to remove empty tuples from  
# a list of tuples function to remove empty  
# tuples using filter 
def Remove(tuples): 
    tuples = filter(None, tuples) 
    return tuples 
  
# Driver Code 
tuples = [(), ('ram','15','8'), (), ('laxman', 'sita'),  
          ('krishna', 'akbar', '45'), ('',''),()] 
print (Remove(tuples)) 




# Python program to print  
# duplicates from a list  
# of integers 
def Repeat(x): 
    _size = len(x) 
    repeated = [] 
    for i in range(_size): 
        k = i + 1
        for j in range(k, _size): 
            if x[i] == x[j] and x[i] not in repeated: 
                repeated.append(x[i]) 
    return repeated 
  
# Driver Code 
list1 = [10, 20, 30, 20, 20, 30, 40,  
         50, -20, 60, 60, -20, -20] 
print (Repeat(list1)) 
      
# This code is contributed  
# by Sandeep_anand 




# Python code to get the Cumulative sum of a list 
def Cumulative(lists): 
    cu_list = [] 
    length = len(lists) 
    cu_list = [sum(lists[0:x:1]) for x in range(0, length+1)] 
    return cu_list[1:]
 
# Driver Code 
lists = [10, 20, 30, 40, 50] 
print (Cumulative(lists)) 




list=[10,20,30,40,50]
new_list=[] 
j=0
for i in range(0,len(list)):
    j+=list[i]
    new_list.append(j) 
     
print(new_list) 
#code given by Divyanshu singh




# Python3 code to demonstrate  
# Sum of number digits in List 
# using loop + str() 
  
# Initializing list 
test_list = [12, 67, 98, 34] 
  
# printing original list 
print("The original list is : " + str(test_list)) 
  
# Sum of number digits in List 
# using loop + str() 
res = [] 
for ele in test_list: 
    sum = 0
    for digit in str(ele): 
        sum += int(digit) 
    res.append(sum) 
      
# printing result  
print ("List Integer Summation : " + str(res)) 




# Python3 code to demonstrate  
# Sum of number digits in List 
# using sum() + list comprehension 
  
# Initializing list 
test_list = [12, 67, 98, 34] 
  
# printing original list 
print("The original list is : " + str(test_list)) 
  
# Sum of number digits in List 
# using sum() + list comprehension 
res = list(map(lambda ele: sum(int(sub) for sub in str(ele)), test_list)) 
      
# printing result  
print ("List Integer Summation : " + str(res)) 




my_list = ['geeks', 'for', 'geeks', 'like', 
           'geeky','nerdy', 'geek', 'love', 
               'questions','words', 'life'] 
  
# Yield successive n-sized 
# chunks from l. 
def divide_chunks(l, n): 
      
    # looping till length l 
    for i in range(0, len(l), n):  
        yield l[i:i + n] 
  
# How many elements each 
# list should have 
n = 5
  
x = list(divide_chunks(my_list, n)) 
print (x) 




my_list = [1, 2, 3, 4, 5, 
              6, 7, 8, 9] 
  
# How many elements each 
# list should have 
n = 4 
  
# using list comprehension 
final = [my_list[i * n:(i + 1) * n] for i in range((len(my_list) + n - 1) // n )]  
print (final) 




l = [1, 2, 3, 4, 5, 6, 7, 8, 9]  
   
# How many elements each  
# list should have  
n = 4
   
# using list comprehension  
x = [l[i:i + n] for i in range(0, len(l), n)]  
print(x) 




# Python program to sort 
# one list using
# the other list
 
def sort_list(list1, list2):
 
    zipped_pairs = zip(list2, list1)
 
    z = [x for _, x in sorted(zipped_pairs)]
     
    return z
     
 
# driver code
x = ["a", "b", "c", "d", "e", "f", "g", "h", "i"]
y = [ 0,   1,   1,    0,   1,   2,   2,   0,   1]
 
print(sort_list(x, y))
 
x = ["g", "e", "e", "k", "s", "f", "o", "r", "g", "e", "e", "k", "s"]
y = [ 0,   1,   1,    0,   1,   2,   2,   0,   1]
 
print(sort_list(x, y))




def sorting_of_element(list1,list2):
   
    # initializing blank dictionary
    f_1 = {} 
     
    # initializing blank list
    final_list = [] 
     
    # Addition of two list in one dictionary
    f_1 = {list1[i]: list2[i] for i in range(len(list2))} 
     
    # sorting of dictionary based on value
    f_lst = {k: v for k, v in sorted(f_1.items(), key=lambda item: item[1])}
     
    # Element addition in the list
    for i in f_lst.keys():
        final_list.append(i)
    return final_list
         
list1 = ["a", "b", "c", "d", "e", "f", "g", "h", "i"]
list2 = [ 0,   1,   1,    0,   1,   2,   2,   0,   1]
 
 
sorting_of_element(list1,list2)




# Program to add two matrices using nested loop
 
X = [[1,2,3],
    [4 ,5,6],
    [7 ,8,9]]
 
Y = [[9,8,7],
    [6,5,4],
    [3,2,1]]
 
 
result = [[0,0,0],
        [0,0,0],
        [0,0,0]]
 
# iterate through rows
for i in range(len(X)):   
# iterate through columns
    for j in range(len(X[0])):
        result[i][j] = X[i][j] + Y[i][j]
 
for r in result:
    print(r)




# Program to add two matrices
# using list comprehension
  
X = [[1,2,3],
    [4 ,5,6],
    [7 ,8,9]]
  
Y = [[9,8,7],
    [6,5,4],
    [3,2,1]]
 
result = [[X[i][j] + Y[i][j]  for j in range
(len(X[0]))] for i in range(len(X))]
  
for r in result:
    print(r)




# Program to add two matrices
# using zip()
  
X = [[1,2,3],
    [4 ,5,6],
    [7 ,8,9]]
  
Y = [[9,8,7],
    [6,5,4],
    [3,2,1]]
 
result = [map(sum, zip(*t)) for t in zip(X, Y)]
  
print(result)




# Program to multiply two matrices using nested loops 
  
# take a 3x3 matrix 
A = [[12, 7, 3], 
    [4, 5, 6], 
    [7, 8, 9]] 
  
# take a 3x4 matrix     
B = [[5, 8, 1, 2], 
    [6, 7, 3, 0], 
    [4, 5, 9, 1]] 
      
result = [[0, 0, 0, 0], 
        [0, 0, 0, 0], 
        [0, 0, 0, 0]] 
  
# iterating by row of A 
for i in range(len(A)): 
  
    # iterating by coloum by B  
    for j in range(len(B[0])): 
  
        # iterating by rows of B 
        for k in range(len(B)): 
            result[i][j] += A[i][k] * B[k][j] 
  
for r in result: 
    print(r) 




# Program to multiply two matrices using list comprehension 
  
# take a 3x3 matrix 
A = [[12, 7, 3], 
    [4, 5, 6], 
    [7, 8, 9]] 
  
# take a 3x4 matrix 
B = [[5, 8, 1, 2], 
    [6, 7, 3, 0], 
    [4, 5, 9, 1]] 
  
# result will be 3x4 
result = [[sum(a * b for a, b in zip(A_row, B_col))  
                        for B_col in zip(*B)] 
                                for A_row in A] 
  
for r in result: 
    print(r) 




# Program to multiply two matrices (vectorized implementation) 
  
# Program to multiply two matrices (vectorized implementation) 
import numpy as np 
# take a 3x3 matrix 
A = [[12, 7, 3], 
    [4, 5, 6], 
    [7, 8, 9]] 
  
# take a 3x4 matrix 
B = [[5, 8, 1, 2], 
    [6, 7, 3, 0], 
    [4, 5, 9, 1]] 
  
# result will be 3x4 
  
result= [[0,0,0,0], 
        [0,0,0,0], 
        [0,0,0,0]] 
  
result = np.dot(A,B) 
  
for r in result: 
    print(r) 




# Python3 code to demonstrate 
# Matrix Product 
# Using list comprehension + loop 
  
# getting Product 
def prod(val) : 
    res = 1 
    for ele in val: 
        res *= ele 
    return res  
  
# initializing list 
test_list = [[1, 4, 5], [7, 3], [4], [46, 7, 3]] 
  
# printing original list 
print("The original list : " + str(test_list)) 
  
# using list comprehension + loop 
# Matrix Product 
res = prod([ele for sub in test_list for ele in sub]) 
  
# print result 
print("The total element product in lists is : " + str(res)) 




# Python3 code to demonstrate 
# Matrix Product 
# Using chain() + loop 
from itertools import chain 
  
# getting Product 
def prod(val) : 
    res = 1 
    for ele in val: 
        res *= ele 
    return res  
  
# initializing list 
test_list = [[1, 4, 5], [7, 3], [4], [46, 7, 3]] 
  
# printing original list 
print("The original list : " + str(test_list)) 
  
# using chain() + loop 
# Matrix Product 
res = prod(list(chain(*test_list))) 
  
# print result 
print("The total element product in lists is : " + str(res)) 




# importing numpy as np 
import numpy as np 
  
  
# creating first matrix 
A = np.array([[1, 2], [3, 4]]) 
  
# creating second matrix 
B = np.array([[4, 5], [6, 7]]) 
  
print("Printing elements of first matrix") 
print(A) 
print("Printing elements of second matrix") 
print(B) 
  
# adding two matrix 
print("Addition of two matrix") 
print(np.add(A, B)) 




# importing numpy as np 
import numpy as np 
  
  
# creating first matrix 
A = np.array([[1, 2], [3, 4]]) 
  
# creating second matrix 
B = np.array([[4, 5], [6, 7]]) 
  
print("Printing elements of first matrix") 
print(A) 
print("Printing elements of second matrix") 
print(B) 
  
# subtracting two matrix 
print("Subtraction of two matrix") 
print(np.subtract(A, B)) 




m = [[1,2],[3,4],[5,6]] 
for row in m : 
    print(row) 
rez = [[m[j][i] for j in range(len(m))] for i in range(len(m[0]))] 
print("\n") 
for row in rez: 
    print(row) 




matrix=[(1,2,3),(4,5,6),(7,8,9),(10,11,12)] 
for row in matrix: 
    print(row) 
print("\n") 
t_matrix = zip(*matrix) 
for row in t_matrix: 
    print(row) 




# You need to install numpy in order to import it 
# Numpy transpose returns similar result when  
# applied on 1D matrix 
import numpy  
matrix=[[1,2,3],[4,5,6]] 
print(matrix) 
print("\n") 
print(numpy.transpose(matrix)) 




# You need to install numpy in order to import it 
import numpy as np 
matrix = np.array([[1,2,3],[4,5,6]]) 
print(matrix) 
print("\n") 
print(matrix.T) 




# Python3 code to demonstrate 
# matrix creation of n * n 
# using list comprehension 
  
# initializing N 
N = 4
  
# printing dimension 
print("The dimension : " + str(N)) 
  
# using list comprehension 
# matrix creation of n * n 
res = [list(range(1 + N * i, 1 + N * (i + 1))) 
                            for i in range(N)] 
  
# print result 
print("The created matrix of N * N: " + str(res)) 




# Python3 code to demonstrate 
# matrix creation of n * n 
# using next() + itertools.count() 
import itertools 
  
# initializing N 
N = 4
  
# printing dimension 
print("The dimension : " + str(N)) 
  
# using next() + itertools.count() 
# matrix creation of n * n 
temp = itertools.count(1)  
res = [[next(temp) for i in range(N)] for i in range(N)] 
  
# print result 
print("The created matrix of N * N: " + str(res)) 




# Python3 code to demonstrate working of 
# Get Kth Column of Matrix 
# using list comprehension 
  
# initialize list 
test_list = [[4, 5, 6], [8, 1, 10], [7, 12, 5]] 
  
# printing original list 
print("The original list is : " + str(test_list)) 
  
# initialize K 
K = 2
  
# Get Kth Column of Matrix 
# using list comprehension 
res = [sub[K] for sub in test_list] 
  
# printing result 
print("The Kth column of matrix is : " + str(res)) 




# Python code to demonstrate working of 
# Get Kth Column of Matrix 
# using zip() 
  
# initialize list 
test_list = [[4, 5, 6], [8, 1, 10], [7, 12, 5]] 
  
# printing original list 
print("The original list is : " + str(test_list)) 
  
# initialize K 
K = 2
  
# Get Kth Column of Matrix 
# using zip() 
res = list(zip(*test_list)[K]) 
  
# printing result 
print("The Kth column of matrix is : " + str(res)) 




# Python3 code to demonstrate working of  
# Vertical Concatenation in Matrix 
# Using loop 
  
# initializing lists 
test_list = [["Gfg", "good"], ["is", "for"], ["Best"]] 
  
# printing original list 
print("The original list : " + str(test_list)) 
  
# using loop for iteration 
res = [] 
N = 0
while N != len(test_list): 
    temp = '' 
    for idx in test_list: 
          
        # checking for valid index / column 
        try: temp = temp + idx[N] 
        except IndexError: pass
    res.append(temp) 
    N = N + 1
  
res = [ele for ele in res if ele] 
  
# printing result  
print("List after column Concatenation : " + str(res)) 




# Python3 code to demonstrate working of  
# Vertical Concatenation in Matrix 
# Using join() + list comprehension + zip_longest() 
from itertools import zip_longest 
  
# initializing lists 
test_list = [["Gfg", "good"], ["is", "for"], ["Best"]] 
  
# printing original list 
print("The original list : " + str(test_list)) 
  
# using join to concaternate, zip_longest filling values using  
# "fill" 
res = ["".join(ele) for ele in zip_longest(*test_list, fillvalue ="")] 
  
# printing result  
print("List after column Concatenation : " + str(res)) 




# function which return reverse of a string
 
def isPalindrome(s):
    return s == s[::-1]
 
 
# Driver code
s = "malayalam"
ans = isPalindrome(s)
 
if ans:
    print("Yes")
else:
    print("No")




# function to check string is 
# palindrome or not 
def isPalindrome(str):
 
    # Run loop from 0 to len/2 
    for i in range(0, int(len(str)/2)): 
        if str[i] != str[len(str)-i-1]:
            return False
    return True
 
# main function
s = "malayalam"
ans = isPalindrome(s)
 
if (ans):
    print("Yes")
else:
    print("No")




# function to check string is 
# palindrome or not
def isPalindrome(s):
     
    # Using predefined function to 
    # reverse to string print(s)
    rev = ''.join(reversed(s))
 
    # Checking if both string are 
    # equal or not
    if (s == rev):
        return True
    return False
 
# main function
s = "malayalam"
ans = isPalindrome(s)
 
if (ans):
    print("Yes")
else:
    print("No")




# Python program to check
# if a string is palindrome 
# or not
 
x = "malayalam"
 
w = ""
for i in x:
    w = i + w
 
if (x == w):
    print("Yes")
else:
    print("No")
   




# Python program to check
# if a string is palindrome 
# or not
st = 'malayalam'
j = -1
flag = 0
for i in st:
    if i != st[j]:
      j = j - 1
      flag = 1
      break
    j = j - 1
if flag == 1:
    print("NO")
else:
    print("Yes")




# Recursive function to check if a 
# string is palindrome
 
def isPalindrome(s):
       
    #to change it the string is similar case
    s = s.lower()
    # length of s
    l = len(s)
     
    # if length is less than 2
    if l < 2:
        return True
 
    # If s[0] and s[l-1] are equal
    elif s[0] == s[l - 1]:
        
        # Call is pallindrome form substring(1,l-1)
        return isPalindrome(s[1: l - 1])
 
    else:
        return False
 
# Driver Code
s = "MalaYaLam"
ans = isPalindrome(s)
 
if ans:
    print("Yes")
 
else:
    print("No")




# Python program to demonstrate 
# symmetry and palindrome of the 
# string 
  
  
# Function to check whether the 
# string is plaindrome or not 
def palindrome(a): 
   
    # finding the mid, start  
    # and last index of the string 
    mid = (len(a)-1)//2
    start = 0
    last = len(a)-1
    flag = 0
  
    # A loop till the mid of the 
    # string 
    while(start<mid): 
   
        # comparing letters from right 
        # from the letters from left 
        if (a[start]== a[last]): 
              
            start += 1
            last -= 1
              
        else: 
            flag = 1
            break; 
              
    # Checking the flag variable to  
    # check if the string is palindrome 
    # or not 
    if flag == 0: 
        print("The entered string is palindrome") 
    else: 
        print("The entered string is not palindrome") 
          
# Function to check whether the 
# string is symmetrical or not         
def symmetry(a): 
      
    n = len(a) 
    flag = 0
      
    # Check if the string's length 
    # is odd or even 
    if n%2: 
        mid = n//2 +1
    else: 
        mid = n//2
          
    start1 = 0
    start2 = mid 
      
    while(start1 < mid and start2 < n): 
          
        if (a[start1]== a[start2]): 
            start1 = start1 + 1
            start2 = start2 + 1
        else: 
            flag = 1
            break
       
    # Checking the flag variable to  
    # check if the string is symmetrical 
    # or not 
    if flag == 0: 
        print("The entered string is symmetrical") 
    else: 
        print("The entered string is not symmetrical") 
          
# Driver code 
string = 'amaama'
palindrome(string) 
symmetry(string) 




# Function to reverse words of string  
  
def rev_sentence(sentence):  
  
    # first split the string into words  
    words = sentence.split(' ')  
  
    # then reverse the split string list and join using space  
    reverse_sentence = ' '.join(reversed(words))  
  
    # finally return the joined string  
    return reverse_sentence  
  
if __name__ == "__main__":  
    input = 'geeks quiz practice code'
    print (rev_sentence(input)) 




# Python code to demonstrate 
# method to remove i'th character 
# Naive Method 
  
# Initializing String  
test_str = "GeeksForGeeks"
  
# Printing original string  
print ("The original string is : " + test_str) 
  
# Removing char at pos 3 
# using loop 
new_str = "" 
  
for i in range(len(test_str)): 
    if i != 2: 
        new_str = new_str + test_str[i] 
  
# Printing string after removal   
print ("The string after removal of i'th character : " + new_str) 




# Python code to demonstrate 
# method to remove i'th character 
# using replace() 
  
# Initializing String  
test_str = "GeeksForGeeks"
  
# Printing original string  
print ("The original string is : " + test_str) 
  
# Removing char at pos 3 
# using replace 
new_str = test_str.replace('e', '') 
  
# Printing string after removal   
# removes all occurrences of 'e' 
print ("The string after removal of i'th character( doesn't work) : " + new_str) 
  
# Removing 1st occurrence of s, i.e 5th pos. 
# if we wish to remove it. 
new_str = test_str.replace('s', '', 1) 
  
# Printing string after removal   
# removes first occurrences of s 
print ("The string after removal of i'th character(works) : " + new_str) 




# Python code to demonstrate 
# method to remove i'th character 
# using slice + concatenation 
  
# Initializing String  
test_str = "GeeksForGeeks"
  
# Printing original string  
print ("The original string is : " + test_str) 
  
# Removing char at pos 3 
# using slice + concatenation 
new_str = test_str[:2] +  test_str[3:] 
  
# Printing string after removal   
# removes ele. at 3rd index 
print ("The string after removal of i'th character : " + new_str) 




# Python code to demonstrate 
# method to remove i'th character 
# using join() + list comprehension 
  
# Initializing String  
test_str = "GeeksForGeeks"
  
# Printing original string  
print ("The original string is : " + test_str) 
  
# Removing char at pos 3 
# using join() + list comprehension 
new_str = ''.join([test_str[i] for i in range(len(test_str)) if i != 2]) 
  
# Printing string after removal   
# removes ele. at 3rd index 
print ("The string after removal of i'th character : " + new_str) 




# function to check if small string is  
# there in big string 
def check(string, sub_str): 
    if (string.find(sub_str) == -1): 
        print("NO") 
    else: 
        print("YES") 
            
# driver code 
string = "geeks for geeks"
sub_str ="geek"
check(string, sub_str) 




def check(s2, s1):  
    if (s2.count(s1)>0):      
        print("YES")  
    else:  
        print("NO")  
              
s2 = "A geek in need is a geek indeed"
s1 ="geek"
check(s2, s1)  




# When you have imported the re module, you can start using regular expressions. 
import re 
  
# Take input from users 
MyString1 =  "A geek in need is a geek indeed"
MyString2 ="geek"
  
# re.search() returns a Match object if there is a match anywhere in the string 
if re.search( MyString2, MyString1 ): 
    print("YES,string '{0}' is present in string '{1}' " .format(MyString2,MyString1)) 
else: 
    print("NO,string '{0}' is not present in string {1} " .format(MyString2, MyString1) ) 




# Python3 code to demonstrate working of  
# Words Frequency in String Shorthands 
# Using dictionary comprehension + count() + split() 
  
# initializing string 
test_str = 'Gfg is best . Geeks are good and Geeks like Gfg'
  
# printing original string 
print("The original string is : " + str(test_str)) 
  
# Words Frequency in String Shorthands 
# Using dictionary comprehension + count() + split() 
res = {key: test_str.count(key) for key in test_str.split()} 
  
# printing result  
print("The words frequency : " + str(res))  




# Python3 code to demonstrate working of  
# Words Frequency in String Shorthands 
# Using Counter() + split() 
from collections import Counter 
  
# initializing string 
test_str = 'Gfg is best . Geeks are good and Geeks like Gfg'
  
# printing original string 
print("The original string is : " + str(test_str)) 
  
# Words Frequency in String Shorthands 
# Using Counter() + split() 
res = Counter(test_str.split()) 
  
# printing result  
print("The words frequency : " + str(dict(res)))  




# Python3 code to demonstrate working of  
# Convert Snake case to Pascal case 
# Using title() + replace() 
  
# initializing string 
test_str = 'geeksforgeeks_is_best'
  
# printing original string 
print("The original string is : " + test_str) 
  
# Convert Snake case to Pascal case 
# Using title() + replace() 
res = test_str.replace("_", " ").title().replace(" ", "") 
  
# printing result  
print("The String after changing case : " + str(res))  




# Python3 code to demonstrate working of  
# Convert Snake case to Pascal case 
# Using capwords() 
import string 
  
# initializing string 
test_str = 'geeksforgeeks_is_best'
  
# printing original string 
print("The original string is : " + test_str) 
  
# Convert Snake case to Pascal case 
# Using capwords() 
res = string.capwords(test_str.replace("_", " ")).replace(" ", "") 
  
# printing result  
print("The String after changing case : " + str(res))  




# Python code to demonstrate string length  
# using len 
  
str = "geeks"
print(len(str)) 




# Python code to demonstrate string length  
# using for loop 
  
# Returns length of string 
def findLen(str): 
    counter = 0    
    for i in str: 
        counter += 1
    return counter 
  
  
str = "geeks"
print(findLen(str)) 




# Python code to demonstrate string length  
# using while loop. 
  
# Returns length of string 
def findLen(str): 
    counter = 0
    while str[counter:]: 
        counter += 1
    return counter 
  
str = "geeks"
print(findLen(str)) 




# Python code to demonstrate string length  
# using join and count 
  
# Returns length of string 
def findLen(str): 
    if not str: 
        return 0
    else: 
        some_random_str = 'py'
        return ((some_random_str).join(str)).count(some_random_str) + 1
  
str = "geeks"
print(findLen(str)) 




# Python3 program to print  
#  even length words in a string  
  
def printWords(s): 
      
    # split the string  
    s = s.split(' ')  
      
    # iterate in words of string  
    for word in s:  
          
        # if length is even  
        if len(word)%2==0: 
            print(word)  
  
  
# Driver Code  
s = "i am muskan" 
printWords(s)  




# Python program to accept the strings
# which contains all the vowels
 
# Function for check if string
# is accepted or not
def check(string) :
 
    string = string.lower()
 
    # set() function convert "aeiou"
    # string into set of characters
    # i.e.vowels = {'a', 'e', 'i', 'o', 'u'}
    vowels = set("aeiou")
 
    # set() function convert empty 
    # dictionary into empty set
    s = set({})
 
    # looping through each
    # character of the string
    for char in string :
 
        # Check for the character is present inside
        # the vowels set or not. If present, then
        # add into the set s by using add method
        if char in vowels :
            s.add(char)
        else:
            pass
             
    # check the length of set s equal to length 
    # of vowels set or not. If equal, string is  
    # accepted otherwise not
    if len(s) == len(vowels) :
        print("Accepted")
    else :
        print("Not Accepted")
 
 
# Driver code
if __name__ == "__main__" :
     
    string = "SEEquoiaL"
 
    # calling function
    check(string)




def check(string):
    string = string.replace(' ', '')
    string = string.lower()
    vowel = [string.count('a'), string.count('e'), string.count(
        'i'), string.count('o'), string.count('u')]
 
    # If 0 is present int vowel count array
    if vowel.count(0) > 0:
        return('not accepted')
    else:
        return('accepted')
 
 
# Driver code
if __name__ == "__main__":
 
    string = "SEEquoiaL"
 
    print(check(string))




# Python program for the above approach
def check(string):
    if len(set(string.lower()).intersection("aeiou")) >= 5:
        return ('accepted')
    else:
        return ("not accepted")
 
 
# Driver code
if __name__ == "__main__":
    string = "geeksforgeeks"
    print(check(string))




# Python code to count number of matching 
# characters in a pair of strings 
  
# count function 
def count(str1, str2):  
    c, j = 0, 0
      
    # loop executes till length of str1 and  
    # stores value of str1 character by character  
    # and stores in i at each iteration. 
    for i in str1:     
          
        # this will check if character extracted from 
        # str1 is present in str2 or not(str2.find(i) 
        # return -1 if not found otherwise return the  
        # starting occurrence index of that character 
        # in str2) and j == str1.find(i) is used to  
        # avoid the counting of the duplicate characters 
        # present in str1 found in str2 
        if str2.find(i)>= 0 and j == str1.find(i):  
            c += 1
        j += 1
    print ('No. of matching characters are : ', c) 
  
# Main function 
def main():  
    str1 ='aabcddekll12@' # first string 
    str2 ='bb2211@55k' # second string 
    count(str1, str2) # calling count function  
  
# Driver Code 
if __name__=="__main__": 
    main() 




# Python code to count number of unique matching 
# characters in a pair of strings 
  
# count function count the common unique 
# characters present in both strings . 
def count(str1 ,str2) : 
    # set of characters of string1 
    set_string1 = set(str1) 
  
    # set of characters of string2 
    set_string2 = set(str2) 
  
    # using (&) intersection mathematical operation on sets 
    # the unique characters present in both the strings 
    # are stored in matched_characters set variable 
    matched_characters = set_string1 & set_string2 
  
    # printing the length of matched_characters set 
    # gives the no. of matched characters 
    print("No. of matching characters are : " + str(len(matched_characters)) ) 
  
  
# Driver code 
if __name__ == "__main__" : 
  
    str1 = 'aabcddekll12@'  # first string 
    str2 = 'bb2211@55k'     # second string 
  
    # call count function  
    count( str1 , str2 ) 
     




# Count the Number of matching characters in  
# a pair of string 
import re 
ip1 = "geeks"
ip2 = "geeksonly"
  
c = 0
for i in ip1: 
    if re.search(i,ip2): 
        c=c+1
print("No. of matching characters are ", c) 




from collections import OrderedDict  
  
# Function to remove all duplicates from string  
# and order does not matter  
def removeDupWithoutOrder(str):  
  
    # set() --> A Set is an unordered collection  
    #         data type that is iterable, mutable,  
    #         and has no duplicate elements.  
    # "".join() --> It joins two adjacent elements in  
    #             iterable with any symbol defined in  
    #             "" ( double quotes ) and returns a  
    #             single string  
    return "".join(set(str))  
  
# Function to remove all duplicates from string  
# and keep the order of characters same  
def removeDupWithOrder(str):  
    return "".join(OrderedDict.fromkeys(str))  
  
# Driver program  
if __name__ == "__main__":  
    str = "geeksforgeeks"
    print ("Without Order = ",removeDupWithoutOrder(str))  
    print ("With Order = ",removeDupWithOrder(str))  




def removeDuplicate(str): 
    s=set(str) 
    s="".join(s) 
    print("Without Order:",s) 
    t="" 
    for i in str: 
        if(i in t): 
            pass
        else: 
            t=t+i 
        print("With Order:",t) 
      
str="geeksforgeeks"
removeDuplicate(str) 




from collections import OrderedDict 
  
ordinary_dictionary = {} 
ordinary_dictionary['a'] = 1
ordinary_dictionary['b'] = 2
ordinary_dictionary['c'] = 3
ordinary_dictionary['d'] = 4
ordinary_dictionary['e'] = 5
  
# Output = {'a': 1, 'c': 3, 'b': 2, 'e': 5, 'd': 4} 
print (ordinary_dictionary)     
  
ordered_dictionary = OrderedDict() 
ordered_dictionary['a'] = 1
ordered_dictionary['b'] = 2
ordered_dictionary['c'] = 3
ordered_dictionary['d'] = 4
ordered_dictionary['e'] = 5
  
# Output = {'a':1,'b':2,'c':3,'d':4,'e':5} 
print (ordered_dictionary)       




from collections import OrderedDict 
seq = ('name', 'age', 'gender') 
dict = OrderedDict.fromkeys(seq) 
  
# Output = {'age': None, 'name': None, 'gender': None} 
print (str(dict))  
dict = OrderedDict.fromkeys(seq, 10) 
  
# Output = {'age': 10, 'name': 10, 'gender': 10} 
print (str(dict))        




# Python 3 code to demonstrate  
# Least Frequent Character in String 
# naive method  
  
# initializing string  
test_str = "GeeksforGeeks"
  
# printing original string 
print ("The original string is : " + test_str) 
  
# using naive method to get 
# Least Frequent Character in String 
all_freq = {} 
for i in test_str: 
    if i in all_freq: 
        all_freq[i] += 1
    else: 
        all_freq[i] = 1
res = min(all_freq, key = all_freq.get)  
  
# printing result  
print ("The minimum of all characters in GeeksforGeeks is : " + str(res)) 




# Python 3 code to demonstrate  
# Least Frequent Character in String 
# collections.Counter() + min() 
from collections import Counter 
  
# initializing string  
test_str = "GeeksforGeeks"
  
# printing original string 
print ("The original string is : " + test_str) 
  
# using collections.Counter() + min() to get  
# Least Frequent Character in String 
res = Counter(test_str) 
res = min(res, key = res.get)  
  
# printing result  
print ("The minimum of all characters in GeeksforGeeks is : " + str(res)) 




# Python 3 code to demonstrate  
# Maximum frequency character in String 
# naive method  
  
# initializing string  
test_str = "GeeksforGeeks"
  
# printing original string 
print ("The original string is : " + test_str) 
  
# using naive method to get 
# Maximum frequency character in String 
all_freq = {} 
for i in test_str: 
    if i in all_freq: 
        all_freq[i] += 1
    else: 
        all_freq[i] = 1
res = max(all_freq, key = all_freq.get)  
  
# printing result  
print ("The maximum of all characters in GeeksforGeeks is : " + str(res)) 




# Python 3 code to demonstrate  
# Maximum frequency character in String 
# collections.Counter() + max() 
from collections import Counter 
  
# initializing string  
test_str = "GeeksforGeeks"
  
# printing original string 
print ("The original string is : " + test_str) 
  
# using collections.Counter() + max() to get  
# Maximum frequency character in String 
res = Counter(test_str) 
res = max(res, key = res.get)  
  
# printing result  
print ("The maximum of all characters in GeeksforGeeks is : " + str(res)) 




// C++ program to check if a string  
// contains any special character 
  
// import required packages 
#include <iostream>  
#include <regex>  
using namespace std;  
  
// Function checks if the string  
// contains any special character 
void run(string str) 
{ 
      
    // Make own character set  
    regex regx("[@_!#$%^&*()<>?/|}{~:]"); 
  
    // Pass the string in regex_search  
    // method 
    if(regex_search(str, regx) == 0) 
        cout << "String is accepted"; 
    else
        cout << "String is not accepted."; 
}  
  
// Driver Code  
int main()  
{  
      
    // Enter the string  
    string str = "Geeks$For$Geeks";  
      
    // Calling run function 
    run(str);  
  
    return 0;  
} 
  
// This code is contributed by Yash_R 




# Python3 program to check if a string 
# contains any special character 
  
# import required package 
import re 
  
# Function checks if the string 
# contains any special character 
def run(string): 
  
    # Make own character set and pass  
    # this as argument in compile method 
    regex = re.compile('[@_!#$%^&*()<>?/\|}{~:]') 
      
    # Pass the string in search  
    # method of regex object.     
    if(regex.search(string) == None): 
        print("String is accepted") 
          
    else: 
        print("String is not accepted.") 
      
  
# Driver Code 
if __name__ == '__main__' : 
      
    # Enter the string 
    string = "Geeks$For$Geeks"
      
    # calling run function  
    run(string) 




<?Php 
// PHP program to check if a string  
// contains any special character  
  
// Function checks if the string  
// contains any special character  
function run($string) 
{ 
    $regex = preg_match('[@_!#$%^&*()<>?/\|}{~:]',  
                                         $string); 
    if($regex)  
        print("String is accepted");  
          
    else
        print("String is not accepted."); 
}  
  
// Driver Code  
  
// Enter the string  
$string = 'Geeks$For$Geeks'; 
  
// calling run function 
run($string); 
  
// This code is contributed by Aman ojha 
?> 




# Python program to generate and match  
# the string from all random strings 
# of same length 
  
# Importing string, random 
# and time modules 
import string 
import random 
import time 
  
# all possible characters including  
# lowercase, uppercase and special symbols 
possibleCharacters = string.ascii_lowercase + string.digits + 
                     string.ascii_uppercase + ' ., !?;:'
  
# string to be generated 
t = "geek"
  
# To take input from user 
# t = input(str("Enter your target text: ")) 
  
attemptThis = ''.join(random.choice(possibleCharacters) 
                                for i in range(len(t))) 
attemptNext = '' 
  
completed = False
iteration = 0
  
# Iterate while completed is false 
while completed == False: 
    print(attemptThis) 
      
    attemptNext = '' 
    completed = True
      
    # Fix the index if matches with  
    # the strings to be generated 
    for i in range(len(t)): 
        if attemptThis[i] != t[i]: 
            completed = False
            attemptNext += random.choice(possibleCharacters) 
        else: 
            attemptNext += t[i] 
              
    # increment the iteration  
    iteration += 1
    attemptThis = attemptNext 
    time.sleep(0.1) 
  
# Driver Code 
print("Target matched after " +
      str(iteration) + " iterations") 




// C++ program to find all string  
// which are greater than given length k 
  
#include <bits/stdc++.h> 
using namespace std; 
  
// function find sttring greater than 
// length k 
void string_k(string s, int k) 
{ 
    // create the empty string 
    string w = ""; 
    // iterate the loop till every space 
    for(int i = 0; i < s.size(); i++) 
    { 
        if(s[i] != ' ') 
          
            // append this sub string in 
            // string w 
            w = w + s[i]; 
        else { 
              
            // if length of current sub 
            // string w is greater than 
            // k then print 
            if(w.size() > k) 
                cout << w << " "; 
                w = ""; 
        } 
    } 
} 
  
// Driver code 
int main() 
{ 
    string s = "geek for geeks"; 
    int k = 3; 
    s = s + " "; 
    string_k(s, k); 
    return 0; 
} 
  
// This code is contributed by  
// Manish Shaw (manishshaw1) 




// Java program to find all string  
// which are greater than given length k 
import java.io.*; 
import java.util.*; 
   
public class GFG { 
       
    // function find sttring greater than 
    // length k 
    static void string_k(String s, int k) 
    { 
        // create the empty string 
        String w = ""; 
           
        // iterate the loop till every space 
        for(int i = 0; i < s.length(); i++) 
        { 
            if(s.charAt(i) != ' ') 
               
                // append this sub string in 
                // string w 
                w = w + s.charAt(i); 
            else { 
                   
                // if length of current sub 
                // string w is greater than 
                // k then print 
                if(w.length() > k) 
                    System.out.print(w + " "); 
                w = ""; 
            } 
        } 
    } 
       
    // Driver code 
    public static void main(String args[]) 
    { 
        String s = "geek for geeks"; 
        int k = 3; 
        s = s + " "; 
        string_k(s, k); 
    } 
} 
   
// This code is contributed by  
// Manish Shaw (manishshaw1) 




# Python program to find all string  
# which are greater than given length k 
  
# function find sttring greater than length k 
def string_k(k, str): 
      
    # create the empty string 
    string = [] 
      
    # split the string where space is comes 
    text = str.split(" ") 
      
    # iterate the loop till every substring 
    for x in text: 
          
        # if length of current sub string 
        # is greater than k then 
        if len(x) > k: 
              
            # append this sub string in 
            # string list 
            string.append(x) 
              
     # return string list 
    return string 
  
  
# Driver Program      
k = 3
str ="geek for geeks"
print(string_k(k, str))  




// C# program to find all string  
// which are greater than given length k 
using System; 
  
class GFG { 
      
    // function find sttring greater than 
    // length k 
    static void string_k(string s, int k) 
    { 
        // create the empty string 
        string w = ""; 
          
        // iterate the loop till every space 
        for(int i = 0; i < s.Length; i++) 
        { 
            if(s[i] != ' ') 
              
                // append this sub string in 
                // string w 
                w = w + s[i]; 
            else { 
                  
                // if length of current sub 
                // string w is greater than 
                // k then print 
                if(w.Length > k) 
                    Console.Write(w + " "); 
                w = ""; 
            } 
        } 
    } 
      
    // Driver code 
    static void Main() 
    { 
        string s = "geek for geeks"; 
        int k = 3; 
        s = s + " "; 
        string_k(s, k); 
    } 
} 
  
// This code is contributed by  
// Manish Shaw (manishshaw1) 




<?php 
// PHP program to find all $ 
// which are greater than given length k 
  
// function find sttring greater than 
// length k 
function string_k($s, $k) 
{ 
      
    // create the empty string 
    $w = ""; 
      
    // iterate the loop till every space 
    for($i = 0; $i < strlen($s); $i++) 
    { 
        if($s[$i] != ' ') 
          
            // append this sub $in $w 
            $w = $w.$s[$i]; 
        else { 
              
            // if length of current sub 
            // $w is greater than 
            // k then print 
            if(strlen($w) > $k) 
                echo ($w." "); 
            $w = ""; 
        } 
    } 
} 
  
// Driver code 
$s = "geek for geeks"; 
$k = 3; 
$s = $s . " "; 
string_k($s, $k); 
  
// This code is contributed by  
// Manish Shaw (manishshaw1) 
?> 




# Python3 program for removing i-th  
# indexed character from a string 
  
# Removes character at index i 
def remove(string, i):  
  
    # Characters before the i-th indexed 
    # is stored in a variable a 
    a = string[ : i]  
      
    # Characters after the nth indexed 
    # is stored in a variable b 
    b = string[i + 1: ] 
      
    # Returning string after removing 
    # nth indexed character. 
    return a + b 
      
# Driver Code 
if __name__ == '__main__': 
      
    string = "geeksFORgeeks"
      
    # Remove nth index element 
    i = 5
    
    # Print the new string 
    print(remove(string, i)) 




# Python3 program for removing i-th  
# indexed character from a string 
  
# Removes character at index i 
def remove(string, i):  
  
    for j in range(len(string)): 
        if j == i: 
            string = string.replace(string[i], "", 1) 
    return string 
      
# Driver Code 
if __name__ == '__main__': 
      
    string = "geeksFORgeeks"
      
    # Remove nth index element 
    i = 5
    
    # Print the new string 
    print(remove(string, i)) 




# Python program to split a string and   
# join it using different delimiter 
  
def split_string(string): 
  
    # Split the string based on space delimiter 
    list_string = string.split(' ') 
      
    return list_string 
  
def join_string(list_string): 
  
    # Join the string based on '-' delimiter 
    string = '-'.join(list_string) 
      
    return string 
  
# Driver Function 
if __name__ == '__main__': 
    string = 'Geeks for Geeks'
      
    # Splitting a string 
    list_string = split_string(string) 
    print(list_string) 
  
     # Join list of strings into one 
    new_string = join_string(list_string) 
    print(new_string) 




# Python program to check 
# if a string is binary or not 
  
# function for checking the 
# string is accepted or not 
def check(string) : 
  
    # set function convert string 
    # into set of characters . 
    p = set(string) 
  
    # declare set of '0', '1' . 
    s = {'0', '1'} 
  
    # check set p is same as set s 
    # or set p contains only '0' 
    # or set p contains only '1' 
    # or not, if any one condition 
    # is true then string is accepted 
    # otherwise not . 
    if s == p or p == {'0'} or p == {'1'}: 
        print("Yes") 
    else : 
        print("No") 
  
  
          
# driver code 
if __name__ == "__main__" : 
  
    string = "101010000111"
  
    # function calling 
    check(string) 




# Python program to check 
# if a string is binary or not 
  
# function for checking the 
# string is accepted or not 
def check2(string) : 
  
    # initialize the variable t 
    # with '01' string 
    t = '01'
  
    # initialize the variable count 
    # with 0 value 
    count = 0
  
    # looping through each character 
    # of the string . 
    for char in string : 
  
        # check the character is present in 
        # string t or not. 
        # if this condition is true 
        # assign 1 to the count variable 
        # and break out of the for loop 
        # otherwise pass 
        if char not in t : 
            count = 1
            break
        else : 
            pass
          
    # after coming out of the loop 
    # check value of count is non-zero or not 
    # if the value is non-zero the en condition is true 
    # and string is not accepted 
    # otherwise string is accepted 
    if count : 
        print("No") 
    else : 
        print("Yes") 
  
  
  
# driver code 
if __name__ == "__main__" : 
  
    string = "001021010001010"
  
    # function calling 
    check2(string) 




# Python3 program to find a list of uncommon words 
  
# Function to return all uncommon words 
def UncommonWords(A, B): 
  
    # count will contain all the word counts 
    count = {} 
      
    # insert words of string A to hash 
    for word in A.split(): 
        count[word] = count.get(word, 0) + 1
      
    # insert words of string B to hash 
    for word in B.split(): 
        count[word] = count.get(word, 0) + 1
  
    # return required list of words 
    return [word for word in count if count[word] == 1] 
  
# Driver Code 
A = "Geeks for Geeks"
B = "Learning from Geeks for Geeks"
  
# Print required answer 
print(UncommonWords(A, B)) 




def uncommon(a,b): 
    list_a = a.split() 
    list_b = b.split() 
    uc = '' 
    for i in list_a: 
        if i not in list_b: 
            uc = uc+" "+i 
    for j in list_b: 
        if j not in list_a: 
            uc = uc+" "+j 
  
    return uc 
  
# Driver code 
a = "apple banana mango"
b = "banana fruits mango"
print(uncommon(a,b)) 




def uncommon(a,b): 
  a=a.split() 
  b=b.split() 
  k=set(a).symmetric_difference(set(b)) 
  return k 
  
#Driver code 
if __name__=="__main__": 
  a="apple banana mango" 
  b="banana fruits mango"
  print(list(uncommon(a,b))) 




def uncommon(A, B): 
    un_comm = [i for i in "".join(B).split() if i not in "".join(A).split()] 
    return un_comm 
  
#Driver code 
A = "Geeks for Geeks" 
B = "Learning from Geeks for Geeks"
print(uncommon(A, B)) 




# Python3 code to demonstrate working of  
# Replace duplicate Occurrence in String 
# Using split() + enumerate() + loop 
  
# initializing string 
test_str = 'Gfg is best . Gfg also has Classes now. \ 
                Classes help understand better . ' 
  
# printing original string 
print("The original string is : " + str(test_str)) 
  
# initializing replace mapping  
repl_dict = {'Gfg' :  'It', 'Classes' : 'They' } 
  
# Replace duplicate Occurrence in String 
# Using split() + enumerate() + loop 
test_list = test_str.split(' ') 
res = set() 
for idx, ele in enumerate(test_list): 
    if ele in repl_dict: 
        if ele in res: 
            test_list[idx] = repl_dict[ele] 
        else: 
            res.add(ele) 
res = ' '.join(test_list) 
  
# printing result  
print("The string after replacing : " + str(res))  




# Python3 code to demonstrate working of  
# Replace duplicate Occurrence in String 
# Using keys() + index() + list comprehension 
  
# initializing string 
test_str = 'Gfg is best . Gfg also has Classes now. Classes help understand better . '
  
# printing original string 
print("The original string is : " + str(test_str)) 
  
# initializing replace mapping  
repl_dict = {'Gfg' :  'It', 'Classes' : 'They' } 
  
# Replace duplicate Occurrence in String 
# Using keys() + index() + list comprehension 
test_list = test_str.split(' ') 
res = ' '.join([repl_dict.get(val) if val in repl_dict.keys() and test_list.index(val) != idx  
                                   else val for idx, val in enumerate(test_list)]) 
  
# printing result  
print("The string after replacing : " + str(res))  




# Python3 code to demonstrate working of  
# Replace multiple words with K 
# Using join() + split() + list comprehension 
  
# initializing string 
test_str = 'Geeksforgeeks is best for geeks and CS'
  
# printing original string 
print("The original string is : " + str(test_str)) 
  
# initializing word list  
word_list = ["best", 'CS', 'for'] 
  
# initializing replace word  
repl_wrd = 'gfg'
  
# Replace multiple words with K 
# Using join() + split() + list comprehension 
res = ' '.join([repl_wrd if idx in word_list else idx for idx in test_str.split()]) 
  
# printing result  
print("String after multiple replace : " + str(res))  




# Python3 code to demonstrate working of  
# Replace multiple words with K 
# Using regex + join() 
import re 
  
# initializing string 
test_str = 'Geeksforgeeks is best for geeks and CS'
  
# printing original string 
print("The original string is : " + str(test_str)) 
  
# initializing word list  
word_list = ["best", 'CS', 'for'] 
  
# initializing replace word  
repl_wrd = 'gfg'
  
# Replace multiple words with K 
# Using regex + join() 
res = re.sub("|".join(sorted(word_list, key = len, reverse = True)), repl_wrd, test_str) 
  
# printing result  
print("String after multiple replace : " + str(res))  




# Function to find permutations of a given string 
from itertools import permutations 
  
def allPermutations(str): 
       
     # Get all permutations of string 'ABC' 
     permList = permutations(str) 
  
     # print all permutations 
     for perm in list(permList): 
         print (''.join(perm)) 
        
# Driver program 
if __name__ == "__main__": 
    str = 'ABC'
    allPermutations(str) 




from itertools import permutations 
import string 
  
s = "GEEK"
a = string.ascii_letters 
p = permutations(s) 
  
# Create a dictionary 
d = [] 
for i in list(p): 
  
    # Print only if not in dictionary 
    if (i not in d): 
        d.append(i) 
        print(''.join(i)) 




# Python code to find the URL from an input string 
# Using the regular expression 
import re 
  
def Find(string): 
  
    # findall() has been used  
    # with valid conditions for urls in string 
    regex = r"(?i)\b((?:https?://|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'\".,<>?«»“”‘’]))"
    url = re.findall(regex,string)       
    return [x[0] for x in url] 
      
# Driver Code 
string = 'My Profile: https://auth.geeksforgeeks.org/user/Chinmoy%20Lenka/articles in the portal of http://www.geeksforgeeks.org/'
print("Urls: ", Find(string)) 




# Python program to illustrate use of exec to 
# execute a given code as string. 
  
# function illustrating how exec() functions. 
def exec_code(): 
    LOC = """ 
def factorial(num): 
    fact=1 
    for i in range(1,num+1): 
        fact = fact*i 
    return fact 
print(factorial(5)) 
"""
    exec(LOC) 
      
# Driver Code 
exec_code() 




# Function to rotate string left and right by d length  
  
def rotate(input,d):  
  
    # slice string in two parts for left and right  
    Lfirst = input[0 : d]  
    Lsecond = input[d :]  
    Rfirst = input[0 : len(input)-d]  
    Rsecond = input[len(input)-d : ]  
  
    # now concatenate two parts together  
    print ("Left Rotation : ", (Lsecond + Lfirst) ) 
    print ("Right Rotation : ", (Rsecond + Rfirst))  
  
# Driver program  
if __name__ == "__main__":  
    input = 'GeeksforGeeks'
    d=2
    rotate(input,d)  




def checkEmpty(input, pattern):  
        
    # If both are empty   
    if len(input)== 0 and len(pattern)== 0:  
         return 'true'
    
    # If only pattern is empty  
    if len(pattern)== 0:  
         return 'true'
    
    while (len(input) != 0):  
  
        # find sub-string in main string  
        index = input.find(pattern)  
  
        # check if sub-string founded or not  
        if (index ==(-1)):  
          return 'false'
  
        # slice input string in two parts and concatenate  
        input = input[0:index] + input[index + len(pattern):]               
  
    return 'true'
    
# Driver program  
if __name__ == "__main__":  
    input ='GEEGEEKSKS'
    pattern ='GEEKS'
    print (checkEmpty(input, pattern)) 




from collections import Counter 
  
def find_dup_char(input): 
  
    # now create dictionary using counter method 
    # which will have strings as key and their  
    # frequencies as value 
    WC = Counter(input) 
    j = -1
      
      
    # Finding no. of  occurrence of a character 
    # and get the index of it. 
    for i in WC.values(): 
        j = j + 1
        if( i > 1 ): 
            print WC.keys()[j], 
  
# Driver program 
if __name__ == "__main__": 
    input = 'geeksforgeeks'
    find_dup_char(input) 




# Python3 code to demonstrate working of  
# Swap Binary substring 
# Using translate() 
  
# initializing string 
test_str = "geeksforgeeks"
  
# printing original string 
print("The original string is : " + test_str) 
  
# Swap Binary substring 
# Using translate() 
temp = str.maketrans("geek", "abcd") 
test_str = test_str.translate(temp) 
  
# printing result  
print("The string after swap : " + str(test_str))  




# Python3 code to demonstrate working of  
# Extract Unique values dictionary values 
# Using set comprehension + values() + sorted() 
  
# initializing dictionary 
test_dict = {'gfg' : [5, 6, 7, 8], 
             'is' : [10, 11, 7, 5], 
             'best' : [6, 12, 10, 8], 
             'for' : [1, 2, 5]} 
  
# printing original dictionary 
print("The original dictionary is : " + str(test_dict)) 
  
# Extract Unique values dictionary values 
# Using set comprehension + values() + sorted() 
res = list(sorted({ele for val in test_dict.values() for ele in val})) 
  
# printing result  
print("The unique values list is : " + str(res))  




# Python3 code to demonstrate working of  
# Extract Unique values dictionary values 
# Using chain() + sorted() + values() 
from itertools import chain 
  
# initializing dictionary 
test_dict = {'gfg' : [5, 6, 7, 8], 
             'is' : [10, 11, 7, 5], 
             'best' : [6, 12, 10, 8], 
             'for' : [1, 2, 5]} 
  
# printing original dictionary 
print("The original dictionary is : " + str(test_dict)) 
  
# Extract Unique values dictionary values 
# Using chain() + sorted() + values() 
res = list(sorted(set(chain(*test_dict.values())))) 
  
# printing result  
print("The unique values list is : " + str(res))  




# Python3 Program to find sum of  
# all items in a Dictionary 
  
# Function to print sum 
def returnSum(myDict): 
      
    sum = 0
    for i in myDict: 
        sum = sum + myDict[i] 
      
    return sum
  
# Driver Function 
dict = {'a': 100, 'b':200, 'c':300} 
print("Sum :", returnSum(dict)) 




# Python3 Program to find sum of  
# all items in a Dictionary 
  
# Function to print sum 
def returnSum(dict): 
      
     sum = 0
     for i in dict.values(): 
           sum = sum + i 
       
     return sum
  
# Driver Function 
dict = {'a': 100, 'b':200, 'c':300} 
print("Sum :", returnSum(dict)) 




# Python3 Program to find sum of  
# all items in a Dictionary 
  
# Function to print sum 
def returnSum(dict): 
      
     sum = 0
     for i in myDict: 
           sum = sum + dict[i] 
       
     return sum
  
# Driver Function 
dict = {'a': 100, 'b':200, 'c':300} 
print("Sum :", returnSum(dict)) 




# Python code to demonstrate 
# removal of dict. pair  
# using del 
  
# Initializing dictionary 
test_dict = {"Arushi" : 22, "Anuradha" : 21, "Mani" : 21, "Haritha" : 21} 
  
# Printing dictionary before removal 
print ("The dictionary before performing remove is : " + str(test_dict)) 
  
# Using del to remove a dict 
# removes Mani 
del test_dict['Mani'] 
  
# Printing dictionary after removal 
print ("The dictionary after remove is : " + str(test_dict)) 
  
# Using del to remove a dict 
# raises exception 
del test_dict['Manjeet'] 




# Python code to demonstrate 
# removal of dict. pair  
# using pop() 
  
# Initializing dictionary 
test_dict = {"Arushi" : 22, "Anuradha" : 21, "Mani" : 21, "Haritha" : 21} 
  
# Printing dictionary before removal 
print ("The dictionary before performing remove is : " + str(test_dict)) 
  
# Using pop() to remove a dict. pair 
# removes Mani 
removed_value = test_dict.pop('Mani') 
  
# Printing dictionary after removal 
print ("The dictionary after remove is : " + str(test_dict)) 
print ("The removed key's value is : " + str(removed_value)) 
  
print ('\r') 
  
# Using pop() to remove a dict. pair 
# doesn't raise exception 
# assigns 'No Key found' to removed_value 
removed_value = test_dict.pop('Manjeet', 'No Key found') 
  
# Printing dictionary after removal 
print ("The dictionary after remove is : " + str(test_dict)) 
print ("The removed key's value is : " + str(removed_value)) 




# Python code to demonstrate 
# removal of dict. pair  
# using items() + dict comprehension 
  
# Initializing dictionary 
test_dict = {"Arushi" : 22, "Anuradha" : 21, "Mani" : 21, "Haritha" : 21} 
  
# Printing dictionary before removal 
print ("The dictionary before performing remove is : " + str(test_dict)) 
  
# Using items() + dict comprehension to remove a dict. pair 
# removes Mani 
new_dict = {key:val for key, val in test_dict.items() if key != 'Mani'} 
  
# Printing dictionary after removal 
print ("The dictionary after remove is : " + str(new_dict)) 




# Python code demonstrate the working of sorted() 
# and itemgetter 
  
# importing "operator" for implementing itemgetter 
from operator import itemgetter 
  
# Initializing list of dictionaries 
lis = [{ "name" : "Nandini", "age" : 20},  
{ "name" : "Manjeet", "age" : 20 }, 
{ "name" : "Nikhil" , "age" : 19 }] 
  
# using sorted and itemgetter to print list sorted by age  
print "The list printed sorting by age: "
print sorted(lis, key=itemgetter('age')) 
  
print ("\r") 
  
# using sorted and itemgetter to print list sorted by both age and name 
# notice that "Manjeet" now comes before "Nandini" 
print "The list printed sorting by age and name: "
print sorted(lis, key=itemgetter('age', 'name')) 
  
print ("\r") 
  
# using sorted and itemgetter to print list sorted by age in descending order 
print "The list printed sorting by age in descending order: "
print sorted(lis, key=itemgetter('age'),reverse = True) 




# Python code demonstrate the working of
# sorted() with lambda
 
# Initializing list of dictionaries
lis = [{ "name" : "Nandini", "age" : 20}, 
{ "name" : "Manjeet", "age" : 20 },
{ "name" : "Nikhil" , "age" : 19 }]
 
# using sorted and lambda to print list sorted
# by age 
print "The list printed sorting by age: "
print sorted(lis, key = lambda i: i['age'])
 
print ("\r")
 
# using sorted and lambda to print list sorted 
# by both age and name. Notice that "Manjeet"
# now comes before "Nandini"
print "The list printed sorting by age and name: "
print sorted(lis, key = lambda i: (i['age'], i['name']))
 
print ("\r")
 
# using sorted and lambda to print list sorted
# by age in descending order
print "The list printed sorting by age in descending order: "
print sorted(lis, key = lambda i: i['age'],reverse=True)




# Python code to merge dict using update() method
def Merge(dict1, dict2):
    return(dict2.update(dict1))
     
# Driver code
dict1 = {'a': 10, 'b': 8}
dict2 = {'d': 6, 'c': 4}
 
# This return None
print(Merge(dict1, dict2))
 
# changes made in dict2
print(dict2)




# Python code to merge dict using a single 
# expression
def Merge(dict1, dict2):
    res = {**dict1, **dict2}
    return res
     
# Driver code
dict1 = {'a': 10, 'b': 8}
dict2 = {'d': 6, 'c': 4}
dict3 = Merge(dict1, dict2)
print(dict3)




# code
# Python code to merge dict using a single  
# expression 
def Merge(dict1, dict2): 
    res = dict1 | dict2
    return res 
       
# Driver code 
dict1 = {'x': 10, 'y': 8} 
dict2 = {'a': 6, 'b': 4} 
dict3 = Merge(dict1, dict2) 
print(dict3)
 
# This code is contributed by virentanti16




# Python3 code to demonstrate working of  
# Convert key-values list to flat dictionary 
# Using dict() + zip() 
from itertools import product 
  
# initializing dictionary 
test_dict = {'month' : [1, 2, 3], 
             'name' : ['Jan', 'Feb', 'March']} 
  
# printing original dictionary 
print("The original dictionary is : " + str(test_dict)) 
  
# Convert key-values list to flat dictionary 
# Using dict() + zip() 
res = dict(zip(test_dict['month'], test_dict['name'])) 
  
# printing result  
print("Flattened dictionary : " + str(res))  




# Python code to demonstrate 
# insertion of items in beginning of ordered dict 
from collections import OrderedDict 
  
# initialising ordered_dict 
iniordered_dict = OrderedDict([('akshat', '1'), ('nikhil', '2')]) 
  
# inserting items in starting of dict  
iniordered_dict.update({'manjeet':'3'}) 
iniordered_dict.move_to_end('manjeet', last = False) 
  
# print result 
print ("Resultant Dictionary : "+str(iniordered_dict)) 




# Python code to demonstrate 
# insertion of items in beginning of ordered dict 
from collections import OrderedDict 
  
# initialising ordered_dict 
ini_dict1 = OrderedDict([('akshat', '1'), ('nikhil', '2')]) 
ini_dict2 = OrderedDict([("manjeet", '4'), ("akash", '4')]) 
  
# adding in beginning of dict 
both = OrderedDict(list(ini_dict2.items()) + list(ini_dict1.items())) 
  
# print result 
print ("Resultant Dictionary :"+str(both)) 




# Function to check if string follows order of  
# characters defined by a pattern  
from collections import OrderedDict  
  
def checkOrder(input, pattern):  
      
    # create empty OrderedDict  
    # output will be like {'a': None,'b': None, 'c': None}  
    dict = OrderedDict.fromkeys(input)  
  
    # traverse generated OrderedDict parallel with  
    # pattern string to check if order of characters  
    # are same or not  
    ptrlen = 0
    for key,value in dict.items():  
        if (key == pattern[ptrlen]):  
            ptrlen = ptrlen + 1
          
        # check if we have traverse complete  
        # pattern string  
        if (ptrlen == (len(pattern))):  
            return 'true'
  
    # if we come out from for loop that means  
    # order was mismatched  
    return 'false'
  
# Driver program  
if __name__ == "__main__":  
    input = 'engineers rock'
    pattern = 'egr'
    print (checkOrder(input,pattern))  




# Function to find winner of an election where votes  
# are represented as candidate names  
from collections import Counter  
  
def winner(input):  
  
    # convert list of candidates into dictionary  
    # output will be likes candidates = {'A':2, 'B':4}  
    votes = Counter(input)  
      
    # create another dictionary and it's key will  
    # be count of votes values will be name of  
    # candidates  
    dict = {}  
  
    for value in votes.values():  
  
        # initialize empty list to each key to  
        # insert candidate names having same  
        # number of votes  
        dict[value] = []  
  
    for (key,value) in votes.items():  
        dict[value].append(key)  
  
    # sort keys in descending order to get maximum  
    # value of votes  
    maxVote = sorted(dict.keys(),reverse=True)[0]  
  
    # check if more than 1 candidates have same  
    # number of votes. If yes, then sort the list  
    # first and print first element  
    if len(dict[maxVote])>1:  
        print (sorted(dict[maxVote])[0]) 
    else:  
        print (dict[maxVote][0])  
  
# Driver program  
if __name__ == "__main__":  
    input =['john','johnny','jackie','johnny', 
            'john','jackie','jamie','jamie', 
            'john','johnny','jamie','johnny', 
            'john']  
    winner(input)  




from collections import Counter  
  
votes =['john','johnny','jackie','johnny','john','jackie', 
    'jamie','jamie','john','johnny','jamie','johnny','john']  
  
#Count the votes for persons and stores in the dictionary 
vote_count=Counter(votes) 
  
#Find the maximum number of votes 
max_votes=max(vote_count.values()) 
  
#Search for people having maximum votes and store in a list 
lst=[i for i in vote_count.keys() if vote_count[i]==max_votes] 
  
#Sort the list and print lexicographical smallest name 
print(sorted(lst)[0]) 




# Python3 code to demonstrate working of  
# Append Dictionary Keys and Values ( In order ) in dictionary 
# Using values() + keys() + list() 
  
# initializing dictionary 
test_dict = {"Gfg" : 1, "is" :  3, "Best" : 2} 
  
# printing original dictionary 
print("The original dictionary is : " + str(test_dict)) 
  
# + operator is used to perform adding keys and values 
res = list(test_dict.keys()) + list(test_dict.values()) 
  
# printing result  
print("The ordered keys and values : " + str(res))  




# Python3 code to demonstrate working of  
# Append Dictionary Keys and Values ( In order ) in dictionary 
# Using chain() + keys() + values() 
from itertools import chain 
  
# initializing dictionary 
test_dict = {"Gfg" : 1, "is" :  3, "Best" : 2} 
  
# printing original dictionary 
print("The original dictionary is : " + str(test_dict)) 
  
# chain() is used for concatenation 
res = list(chain(test_dict.keys(), test_dict.values())) 
  
# printing result  
print("The ordered keys and values : " + str(res))  




# Function calling 
def dictionairy():  
 # Declare hash function       
 key_value ={}     
  
# Initializing value  
 key_value[2] = 56       
 key_value[1] = 2 
 key_value[5] = 12 
 key_value[4] = 24
 key_value[6] = 18      
 key_value[3] = 323 
  
 print ("Task 1:-\n") 
 print ("Keys are") 
   
 # iterkeys() returns an iterator over the  
 # dictionary’s keys. 
 for i in sorted (key_value.keys()) :  
     print(i, end = " ") 
  
def main(): 
    # function calling 
    dictionairy()              
      
# Main function calling 
if __name__=="__main__":       
    main() 




# function calling 
def dictionairy():  
  
 # Declaring the hash function       
 key_value ={}     
   
# Initialize value  
 key_value[2] = 56       
 key_value[1] = 2 
 key_value[5] = 12 
 key_value[4] = 24
 key_value[6] = 18      
 key_value[3] = 323 
   
 print ("Task 2:-\nKeys and Values sorted in",  
            "alphabetical order by the key  ")   
  
 # sorted(key_value) returns an iterator over the  
 # Dictionary’s value sorted in keys.   
 for i in sorted (key_value) : 
    print ((i, key_value[i]), end =" ") 
  
def main(): 
    # function calling 
    dictionairy()              
      
# main function calling 
if __name__=="__main__":      
    main() 




# Function calling 
def dictionairy():  
  
 # Declaring hash function       
 key_value ={}     
   
# Initializing the value  
 key_value[2] = 56       
 key_value[1] = 2 
 key_value[5] = 12 
 key_value[4] = 24
 key_value[6] = 18      
 key_value[3] = 323 
   
  
 print ("Task 3:-\nKeys and Values sorted",  
   "in alphabetical order by the value") 
   
 # Note that it will sort in lexicographical order 
 # For mathematical way, change it to float 
 print(sorted(key_value.items(), key = 
             lambda kv:(kv[1], kv[0])))     
   
def main(): 
    # function calling 
    dictionairy()             
      
# main function calling 
if __name__=="__main__":       
    main() 




# Creates a sorted dictionary (sorted by key) 
from collections import OrderedDict 
  
dict = {'ravi':'10','rajnish':'9','sanjeev':'15','yash':'2','suraj':'32'} 
dict1 = OrderedDict(sorted(dict.items())) 
print(dict1) 




# Python3 code to demonstrate working of  
# Sort Dictionary key and values List 
# Using loop + dictionary comprehension 
  
# initializing dictionary 
test_dict = {'gfg': [7, 6, 3],  
             'is': [2, 10, 3],  
             'best': [19, 4]} 
  
# printing original dictionary 
print("The original dictionary is : " + str(test_dict)) 
  
# Sort Dictionary key and values List 
# Using loop + dictionary comprehension 
res = dict() 
for key in sorted(test_dict): 
    res[key] = sorted(test_dict[key]) 
  
# printing result  
print("The sorted dictionary : " + str(res))  




# Python3 code to demonstrate working of  
# Sort Dictionary key and values List 
# Using dictionary comprehension + sorted() 
  
# initializing dictionary 
test_dict = {'gfg': [7, 6, 3],  
             'is': [2, 10, 3],  
             'best': [19, 4]} 
  
# printing original dictionary 
print("The original dictionary is : " + str(test_dict)) 
  
# Sort Dictionary key and values List 
# Using dictionary comprehension + sorted() 
res = {key : sorted(test_dict[key]) for key in sorted(test_dict)} 
  
# printing result  
print("The sorted dictionary : " + str(res))  




# Python code to demonstrate Dictionary and 
# missing value error 
  
# initializing Dictionary 
d = { 'a' : 1 , 'b' : 2 } 
  
# trying to output value of absent key  
print ("The value associated with 'c' is : ") 
print (d['c']) 




country_code = {'India' : '0091', 
                'Australia' : '0025', 
                'Nepal' : '00977'} 
  
# search dictionary for country code of India 
print(country_code.get('India', 'Not Found')) 
  
# search dictionary for country code of Japan 
print(country_dict.get('Japan', 'Not Found')) 




country_code = {'India' : '0091', 
                'Australia' : '0025', 
                'Nepal' : '00977'} 
  
# Set a default value for Japan 
country_code.setdefault('Japan', 'Not Present')  
  
# search dictionary for country code of India 
print(country_code['India']) 
  
# search dictionary for country code of Japan 
print(country_code['Japan']) 




# Python code to demonstrate defaultdict 
  
# importing "collections" for defaultdict 
import collections 
  
# declaring defaultdict 
# sets default value 'Key Not found' to absent keys 
defd = collections.defaultdict(lambda : 'Key Not found') 
  
# initializing values  
defd['a'] = 1
  
# initializing values  
defd['b'] = 2
  
# printing value  
print ("The value associated with 'a' is : ",end="") 
print (defd['a']) 
  
# printing value associated with 'c' 
print ("The value associated with 'c' is : ",end="") 
print (defd['c']) 




# Python code to demonstrate a dictionary 
# with multiple inputs in a key. 
import random as rn 
  
# creating an empty dictionary 
dict = {} 
  
# Insert first triplet in dictionary 
x, y, z = 10, 20, 30
dict[x, y, z] = x + y - z; 
  
# Insert second triplet in dictionary 
x, y, z = 5, 2, 4
dict[x, y, z] = x + y - z; 
  
# print the dictionary 
print(dict) 




# dictionary containing longitude and latitude of places 
places = {("19.07'53.2", "72.54'51.0"):"Mumbai", \ 
          ("28.33'34.1", "77.06'16.6"):"Delhi"} 
  
print(places) 
print('\n') 
  
# Traversing dictionary with multi-keys and crearing 
# different lists from it 
lat = [] 
long = [] 
plc = [] 
for i in places: 
    lat.append(i[0]) 
    long.append(i[1]) 
    plc.append(places[i[0], i[1]]) 
  
print(lat) 
print(long) 
print(plc) 




# Function to return all anagrams together  
def allAnagram(input):  
      
    # empty dictionary which holds subsets  
    # of all anagrams together  
    dict = {}  
  
    # traverse list of strings  
    for strVal in input:  
          
        # sorted(iterable) method accepts any  
        # iterable and rerturns list of items  
        # in ascending order  
        key = ''.join(sorted(strVal))  
          
        # now check if key exist in dictionary  
        # or not. If yes then simply append the  
        # strVal into the list of it's corresponding  
        # key. If not then map empty list onto  
        # key and then start appending values  
        if key in dict.keys():  
            dict[key].append(strVal)  
        else:  
            dict[key] = []  
            dict[key].append(strVal)  
  
    # traverse dictionary and concatenate values  
    # of keys together  
    output = ""  
    for key,value in dict.items():  
        output = output + ' '.join(value) + ' '
  
    return output  
  
# Driver function  
if __name__ == "__main__":  
    input=['cat', 'dog', 'tac', 'god', 'act']  
    print (allAnagram(input))  




# Function to find k'th non repeating character  
# in string  
from collections import OrderedDict  
  
def kthRepeating(input,k):  
  
    # OrderedDict returns a dictionary data  
        # structure having characters of input  
    # string as keys in the same order they  
        # were inserted and 0 as their default value  
    dict=OrderedDict.fromkeys(input,0)  
  
    # now traverse input string to calculate  
        # frequency of each character  
    for ch in input:  
        dict[ch]+=1
  
    # now extract list of all keys whose value  
        # is 1 from dict Ordered Dictionary  
    nonRepeatDict = [key for (key,value) in dict.items() if value==1]  
      
    # now return (k-1)th character from above list  
    if len(nonRepeatDict) < k:  
        return 'Less than k non-repeating characters in input.' 
    else:  
        return nonRepeatDict[k-1]  
  
# Driver function  
if __name__ == "__main__":  
    input = "geeksforgeeks"
    k = 3
    print (kthRepeating(input, k))  




# function to Check if binary representations 
# of two numbers are anagram 
from collections import Counter 
  
def checkAnagram(num1,num2): 
  
    # convert numbers into in binary 
    # and remove first two characters of  
    # output string because bin function  
    # '0b' as prefix in output string 
    bin1 = bin(num1)[2:] 
    bin2 = bin(num2)[2:] 
  
    # append zeros in shorter string 
    zeros = abs(len(bin1)-len(bin2)) 
    if (len(bin1)>len(bin2)): 
         bin2 = zeros * '0' + bin2 
    else: 
         bin1 = zeros * '0' + bin1 
  
    # convert binary representations  
    # into dictionary 
    dict1 = Counter(bin1) 
    dict2 = Counter(bin2) 
  
    # compare both dictionaries 
    if dict1 == dict2: 
         print('Yes') 
    else: 
         print('No') 
  
# Driver program 
if __name__ == "__main__": 
    num1 = 8
    num2 = 4
    checkAnagram(num1,num2) 
     




# Function to find the size of largest subset  
# of anagram words 
from collections import Counter 
  
def maxAnagramSize(input): 
  
    # split input string separated by space 
    input = input.split(" ") 
  
    # sort each string in given list of strings 
    for i in range(0,len(input)): 
         input[i]=''.join(sorted(input[i])) 
  
    # now create dictionary using counter method 
    # which will have strings as key and their  
    # frequencies as value 
    freqDict = Counter(input) 
  
    # get maximum value of frequency 
    print (max(freqDict.values())) 
  
# Driver program 
if __name__ == "__main__": 
    input = 'ant magenta magnate tan gnamate'
    maxAnagramSize(input) 




from collections import Counter 
  
def remov_duplicates(input): 
  
    # split input string separated by space 
    input = input.split(" ") 
  
    # joins two adjacent elements in iterable way 
    for i in range(0, len(input)): 
        input[i] = "".join(input[i]) 
  
    # now create dictionary using counter method 
    # which will have strings as key and their  
    # frequencies as value 
    UniqW = Counter(input) 
  
    # joins two adjacent elements in iterable way 
    s = " ".join(UniqW.keys()) 
    print (s) 
  
# Driver program 
if __name__ == "__main__": 
    input = 'Python is great and Java is also great'
    remov_duplicates(input) 




# Program without using any external library 
s = "Python is great and Java is also great"
l = s.split() 
k = [] 
for i in l: 
  
    # If condition is used to store unique string  
    # in another list 'k'  
    if (s.count(i)>1 and (i not in k)or s.count(i)==1): 
        k.append(i) 
print(' '.join(k)) 




# function to mirror characters of a string 
  
def mirrorChars(input,k): 
  
    # create dictionary 
    original = 'abcdefghijklmnopqrstuvwxyz'
    reverse = 'zyxwvutsrqponmlkjihgfedcba'
    dictChars = dict(zip(original,reverse)) 
  
    # separate out string after length k to change 
    # characters in mirror 
    prefix = input[0:k-1] 
    suffix = input[k-1:] 
    mirror = '' 
  
    # change into mirror 
    for i in range(0,len(suffix)): 
         mirror = mirror + dictChars[suffix[i]] 
  
    # concat prefix and mirrored part 
    print (prefix+mirror) 
           
# Driver program 
if __name__ == "__main__": 
    input = 'paradox'
    k = 3
    mirrorChars(input,k) 




# Python program to count the frequency of  
# elements in a list using a dictionary 
  
def CountFrequency(my_list): 
  
    # Creating an empty dictionary  
    freq = {} 
    for item in my_list: 
        if (item in freq): 
            freq[item] += 1
        else: 
            freq[item] = 1
  
    for key, value in freq.items(): 
        print ("% d : % d"%(key, value)) 
  
# Driver function 
if __name__ == "__main__":  
    my_list =[1, 1, 1, 5, 5, 3, 1, 3, 3, 1, 4, 4, 4, 2, 2, 2, 2] 
  
    CountFrequency(my_list) 




# Python program to count the frequency of 
# elements in a list using a dictionary 
  
def CountFrequency(my_list): 
      
    # Creating an empty dictionary  
    freq = {} 
    for items in my_list: 
        freq[items] = my_list.count(items) 
      
    for key, value in freq.items(): 
        print ("% d : % d"%(key, value)) 
  
# Driver function 
if __name__ == "__main__":  
    my_list =[1, 1, 1, 5, 5, 3, 1, 3, 3, 1, 4, 4, 4, 2, 2, 2, 2] 
    CountFrequency(my_list) 




# Python program to count the frequency of 
# elements in a list using a dictionary 
  
def CountFrequency(my_list): 
      
   # Creating an empty dictionary  
   count = {} 
   for i in [1, 1, 1, 5, 5, 3, 1, 3, 3, 1 ,4, 4, 4, 2, 2, 2, 2]: 
    count[i] = count.get(i, 0) + 1
   return count 
  
# Driver function 
if __name__ == "__main__":  
    my_list =[1, 1, 1, 5, 5, 3, 1, 3, 3, 1, 4, 4, 4, 2, 2, 2, 2] 
    print(CountFrequency(my_list)) 




# Python code to convert into dictionary 
  
def Convert(tup, di): 
    for a, b in tup: 
        di.setdefault(a, []).append(b) 
    return di 
      
# Driver Code     
tups = [("akash", 10), ("gaurav", 12), ("anand", 14),  
     ("suraj", 20), ("akhil", 25), ("ashish", 30)] 
dictionary = {} 
print (Convert(tups, dictionary)) 




# Python code to convert into dictionary 
list_1=[("Nakul",93), ("Shivansh",45), ("Samved",65), 
           ("Yash",88), ("Vidit",70), ("Pradeep",52)] 
dict_1=dict() 
  
for student,score in list_1: 
    dict_1.setdefault(student, []).append(score) 
print(dict_1) 




# Python code to convert into dictionary 
def Convert(tup, di): 
    di = dict(tup) 
    return di 
      
# Driver Code  
tups = [("akash", 10), ("gaurav", 12), ("anand", 14),  
    ("suraj", 20), ("akhil", 25), ("ashish", 30)] 
dictionary = {} 
print (Convert(tups, dictionary)) 




# Python code to convert into dictionary 
  
print (dict([('Sachin', 10), ('MSD', 7), ('Kohli', 18), ('Rohit', 45)])) 




# Python code to find if we can make first string 
# from second by deleting some characters from  
# second and rearranging remaining characters. 
from collections import Counter 
  
def makeString(str1,str2): 
  
    # convert both strings into dictionaries 
    # output will be like str1="aabbcc",  
    # dict1={'a':2,'b':2,'c':2} 
    # str2 = 'abbbcc', dict2={'a':1,'b':3,'c':2} 
    dict1 = Counter(str1) 
    dict2 = Counter(str2) 
  
    # take intersection of two dictionries 
    # output will be result = {'a':1,'b':2,'c':2} 
    result = dict1 & dict2 
  
    # compare resultant dictionary with first 
    # dictionary comparison first compares keys 
    # and then compares their corresponding values  
    return result == dict1 
  
# Driver program 
if __name__ == "__main__": 
    str1 = 'ABHISHEKsinGH'
    str2 = 'gfhfBHkooIHnfndSHEKsiAnG'
    if (makeString(str1,str2)==True): 
        print("Possible") 
    else: 
        print("Not Possible") 




# Function to Check if frequency of all characters 
# can become same by one removal 
from collections import Counter 
  
def allSame(input): 
      
    # calculate frequency of each character 
    # and convert string into dictionary 
    dict=Counter(input) 
  
    # now get list of all values and push it 
    # in set 
    same = list(set(dict.values())) 
  
    if len(same)>2: 
        print('No') 
    elif len (same)==2 and same[1]-same[0]>1: 
        print('No') 
    else: 
        print('Yes') 
  
      
    # now check if frequency of all characters  
    # can become same 
      
# Driver program 
if __name__ == "__main__": 
    input = 'xxxyyzzt'
    allSame(input) 




# Python program to find ordered words 
import requests 
  
# Scrapes the words from the URL below and stores  
# them in a list 
def getWords(): 
  
    # contains about 2500 words 
    url = "http://www.puzzlers.org/pub/wordlists/unixdict.txt"
    fetchData = requests.get(url) 
  
    # extracts the content of the webpage 
    wordList = fetchData.content 
  
    # decodes the UTF-8 encoded text and splits the  
    # string to turn it into a list of words 
    wordList = wordList.decode("utf-8").split() 
  
    return wordList 
  
  
# function to determine whether a word is ordered or not 
def isOrdered(): 
  
    # fetching the wordList 
    collection = getWords() 
  
    # since the first few of the elements of the  
    # dictionary are numbers, getting rid of those 
    # numbers by slicing off the first 17 elements 
    collection = collection[16:] 
    word = '' 
  
    for word in collection: 
        result = 'Word is ordered'
        i = 0
        l = len(word) - 1
  
        if (len(word) < 3): # skips the 1 and 2 lettered strings 
            continue
  
        # traverses through all characters of the word in pairs 
        while i < l:          
            if (ord(word[i]) > ord(word[i+1])): 
                result = 'Word is not ordered'
                break
            else: 
                i += 1
  
        # only printing the ordered words 
        if (result == 'Word is ordered'): 
            print(word,': ',result) 
  
  
# execute isOrdered() function 
if __name__ == '__main__': 
    isOrdered() 




# Function to print words which can be created 
# using given set of characters 
  
  
  
def charCount(word): 
    dict = {} 
    for i in word: 
        dict[i] = dict.get(i, 0) + 1
    return dict
  
  
def possible_words(lwords, charSet): 
    for word in lwords: 
        flag = 1
        chars = charCount(word) 
        for key in chars: 
            if key not in charSet: 
                flag = 0
            else: 
                if charSet.count(key) != chars[key]: 
                    flag = 0
        if flag == 1: 
            print(word) 
  
if __name__ == "__main__": 
    input = ['goo', 'bat', 'me', 'eat', 'goal', 'boy', 'run'] 
    charSet = ['e', 'o', 'b', 'a', 'm', 'g', 'l'] 
    possible_words(input, charSet) 




# Python3 code to demonstrate working of  
# Values Associated Keys 
# Using defaultdict() + loop 
from collections import defaultdict 
  
# initializing dictionary 
test_dict = {'gfg' : [1, 2, 3], 'is' : [1, 4], 'best' : [4, 2]}  
  
# printing original dictionary 
print("The original dictionary is : " + str(test_dict)) 
  
# Values Associated Keys 
# Using defaultdict() + loop 
res = defaultdict(list) 
for key, val in test_dict.items(): 
    for ele in val: 
        res[ele].append(key) 
  
# printing result  
print("The values associated dictionary : " + str(dict(res)))  




import sys 
  
# sample Tuples 
Tuple1 = ("A", 1, "B", 2, "C", 3) 
Tuple2 = ("Geek1", "Raju", "Geek2", "Nikhil", "Geek3", "Deepanshu") 
Tuple3 = ((1, "Lion"), ( 2, "Tiger"), (3, "Fox"), (4, "Wolf")) 
  
# print the sizes of sample Tuples 
print("Size of Tuple1: " + str(sys.getsizeof(Tuple1)) + "bytes") 
print("Size of Tuple2: " + str(sys.getsizeof(Tuple2)) + "bytes") 
print("Size of Tuple3: " + str(sys.getsizeof(Tuple3)) + "bytes") 




# sample Tuples 
Tuple1 = ("A", 1, "B", 2, "C", 3) 
Tuple2 = ("Geek1", "Raju", "Geek2", "Nikhil", "Geek3", "Deepanshu") 
Tuple3 = ((1, "Lion"), ( 2, "Tiger"), (3, "Fox"), (4, "Wolf")) 
  
# print the sizes of sample Tuples 
print("Size of Tuple1: " + str(Tuple1.__sizeof__()) + "bytes") 
print("Size of Tuple2: " + str(Tuple2.__sizeof__()) + "bytes") 
print("Size of Tuple3: " + str(Tuple3.__sizeof__()) + "bytes") 




# Python3 code to demonstrate working of  
# Maximum and Minimum K elements in Tuple 
# Using sorted() + loop 
  
# initializing tuple 
test_tup = (5, 20, 3, 7, 6, 8) 
  
# printing original tuple 
print("The original tuple is : " + str(test_tup)) 
  
# initializing K  
K = 2
  
# Maximum and Minimum K elements in Tuple 
# Using sorted() + loop 
res = [] 
test_tup = list(test_tup) 
temp = sorted(test_tup) 
  
for idx, val in enumerate(temp): 
    if idx < K or idx >= len(temp) - K: 
        res.append(val) 
res = tuple(res) 
  
# printing result  
print("The extracted values : " + str(res))  




# Python3 code to demonstrate working of  
# Maximum and Minimum K elements in Tuple 
# Using slicing + sorted() 
  
# initializing tuple 
test_tup = (5, 20, 3, 7, 6, 8) 
  
# printing original tuple 
print("The original tuple is : " + str(test_tup)) 
  
# initializing K  
K = 2
  
# Maximum and Minimum K elements in Tuple 
# Using slicing + sorted() 
test_tup = list(test_tup) 
temp = sorted(test_tup) 
res = tuple(temp[:K] + temp[-K:]) 
  
# printing result  
print("The extracted values : " + str(res))  




# Python program to create a list of tuples 
# from given list having number and 
# its cube in each tuple 
  
# creating a list 
list1 = [1, 2, 5, 6] 
  
# using list comprehension to iterate each 
# values in list and create a tuple as specified 
res = [(val, pow(val, 3)) for val in list1] 
  
# print the result 
print(res) 




# Python3 code to demonstrate working of  
# Adding Tuple to List and vice - versa 
# Using += operator (list + tuple) 
  
# initializing list 
test_list = [5, 6, 7] 
  
# printing original list 
print("The original list is : " + str(test_list)) 
  
# initializing tuple  
test_tup = (9, 10) 
  
# Adding Tuple to List and vice - versa 
# Using += operator (list + tuple) 
test_list += test_tup 
  
# printing result  
print("The container after addition : " + str(test_list))  




# Python3 code to demonstrate working of  
# Adding Tuple to List and vice - versa 
# Using tuple(), data type conversion [tuple + list] 
  
# initializing list 
test_list = [5, 6, 7] 
  
# printing original list 
print("The original list is : " + str(test_list)) 
  
# initializing tuple  
test_tup = (9, 10) 
  
# Adding Tuple to List and vice - versa 
# Using tuple(), data type conversion [tuple + list] 
res = tuple(list(test_tup) + test_list) 
  
# printing result  
print("The container after addition : " + str(res))  




# Python3 code to demonstrate working of  
# Closest Pair to Kth index element in Tuple 
# Using enumerate() + loop 
  
# initializing list 
test_list = [(3, 4), (78, 76), (2, 3), (9, 8), (19, 23)] 
  
# printing original list 
print("The original list is : " + str(test_list)) 
  
# initializing tuple 
tup = (17, 23) 
  
# initializing K  
K = 1
  
# Closest Pair to Kth index element in Tuple 
# Using enumerate() + loop 
min_dif, res = 999999999, None
for idx, val in enumerate(test_list): 
    dif = abs(tup[K - 1] - val[K - 1]) 
    if dif < min_dif: 
        min_dif, res = dif, idx 
  
# printing result  
print("The nearest tuple to Kth index element is : " + str(test_list[res]))  




# Python3 code to demonstrate working of  
# Closest Pair to Kth index element in Tuple 
# Using min() + lambda 
  
# initializing list 
test_list = [(3, 4), (78, 76), (2, 3), (9, 8), (19, 23)] 
  
# printing original list 
print("The original list is : " + str(test_list)) 
  
# initializing tuple 
tup = (17, 23) 
  
# initializing K  
K = 1
  
# Closest Pair to Kth index element in Tuple 
# Using min() + lambda 
res = min(range(len(test_list)), key = lambda sub: abs(test_list[sub][K - 1] - tup[K - 1])) 
  
# printing result  
print("The nearest tuple to Kth index element is : " + str(test_list[res]))  




# Python3 code to demonstrate working of  
# Join Tuples if similar initial element 
# Using loop 
  
# initializing list 
test_list = [(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] 
  
# printing original list 
print("The original list is : " + str(test_list)) 
  
# Join Tuples if similar initial element 
# Using loop 
res = [] 
for sub in test_list:                                            
    if res and res[-1][0] == sub[0]:               
        res[-1].extend(sub[1:])                         
    else: 
        res.append([ele for ele in sub])      
res = list(map(tuple, res)) 
  
# printing result  
print("The extracted elements : " + str(res))  




# Python3 code to demonstrate working of  
# Join Tuples if similar initial element 
# Using defaultdict() + loop 
from collections import defaultdict 
  
# initializing list 
test_list = [(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] 
  
# printing original list 
print("The original list is : " + str(test_list)) 
  
# Join Tuples if similar initial element 
# Using defaultdict() + loop 
mapp = defaultdict(list) 
for key, val in test_list: 
    mapp[key].append(val) 
res = [(key, *val) for key, val in mapp.items()] 
  
# printing result  
print("The extracted elements : " + str(res))  




# Python3 code to demonstrate working of  
# Extract digits from Tuple list 
# Using map() + chain.from_iterable() + set() + loop 
from itertools import chain 
  
# initializing list 
test_list = [(15, 3), (3, 9), (1, 10), (99, 2)] 
  
# printing original list 
print("The original list is : " + str(test_list)) 
  
# Extract digits from Tuple list 
# Using map() + chain.from_iterable() + set() + loop 
temp = map(lambda ele: str(ele), chain.from_iterable(test_list)) 
res = set() 
for sub in temp: 
    for ele in sub: 
        res.add(ele) 
  
# printing result  
print("The extrated digits : " + str(res))  




# Python3 code to demonstrate working of  
# Extract digits from Tuple list 
# Using regex expression 
import re 
  
# initializing list 
test_list = [(15, 3), (3, 9), (1, 10), (99, 2)] 
  
# printing original list 
print("The original list is : " + str(test_list)) 
  
# Extract digits from Tuple list 
# Using regex expression 
temp = re.sub(r'[\[\]\(\), ]', '', str(test_list)) 
res = [int(ele) for ele in set(temp)] 
  
# printing result  
print("The extrated digits : " + str(res))  




# Python3 code to demonstrate working of  
# All pair combinations of 2 tuples 
# Using list comprehension 
  
# initializing tuples 
test_tuple1 = (4, 5) 
test_tuple2 = (7, 8) 
  
# printing original tuples 
print("The original tuple 1 : " + str(test_tuple1)) 
print("The original tuple 2 : " + str(test_tuple2)) 
  
# All pair combinations of 2 tuples 
# Using list comprehension 
res =  [(a, b) for a in test_tuple1 for b in test_tuple2] 
res = res +  [(a, b) for a in test_tuple2 for b in test_tuple1] 
  
# printing result  
print("The filtered tuple : " + str(res)) 




# Python3 code to demonstrate working of  
# All pair combinations of 2 tuples 
# Using chain() + product() 
from itertools import chain, product 
  
# initializing tuples 
test_tuple1 = (4, 5) 
test_tuple2 = (7, 8) 
  
# printing original tuples 
print("The original tuple 1 : " + str(test_tuple1)) 
print("The original tuple 2 : " + str(test_tuple2)) 
  
# All pair combinations of 2 tuples 
# Using chain() + product() 
res = list(chain(product(test_tuple1, test_tuple2), product(test_tuple2, test_tuple1))) 
  
# printing result  
print("The filtered tuple : " + str(res)) 




# Python3 code to demonstrate working of  
# Remove Tuples of Length K 
# Using list comprehension 
  
# initializing list 
test_list = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] 
  
# printing original list 
print("The original list : " + str(test_list)) 
  
# initializing K  
K = 1
  
# 1 liner to perform task 
# filter just lengths other than K  
# len() used to compute length 
res = [ele for ele in test_list if len(ele) != K] 
  
# printing result  
print("Filtered list : " + str(res)) 




# Python3 code to demonstrate working of  
# Remove Tuples of Length K 
# Using filter() + lambda + len()  
  
# initializing list 
test_list = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] 
  
# printing original list 
print("The original list : " + str(test_list)) 
  
# initializing K  
K = 1
  
# filter() filters non K length values and returns result 
res = list(filter(lambda x : len(x) != K, test_list)) 
  
# printing result  
print("Filtered list : " + str(res)) 




# Python program to sort a list of tuples by the second Item 
  
# Function to sort the list of tuples by its second item 
def Sort_Tuple(tup):  
      
    # getting length of list of tuples 
    lst = len(tup)  
    for i in range(0, lst):  
          
        for j in range(0, lst-i-1):  
            if (tup[j][1] > tup[j + 1][1]):  
                temp = tup[j]  
                tup[j]= tup[j + 1]  
                tup[j + 1]= temp  
    return tup  
  
# Driver Code  
tup =[('for', 24), ('is', 10), ('Geeks', 28),  
      ('Geeksforgeeks', 5), ('portal', 20), ('a', 15)]  
        
print(Sort_Tuple(tup))  




# Python program to sort a list of 
# tuples by the second Item using sort()  
  
# Function to sort hte list by second item of tuple 
def Sort_Tuple(tup):  
  
    # reverse = None (Sorts in Ascending order)  
    # key is set to sort using second element of  
    # sublist lambda has been used  
    tup.sort(key = lambda x: x[1])  
    return tup  
  
# Driver Code  
tup = [('rishav', 10), ('akash', 5), ('ram', 20), ('gaurav', 15)]  
  
# printing the sorted list of tuples 
print(Sort_Tuple(tup))  




# Python program to sort a list of 
# tuples by the second Item using sorted()  
  
# Function to sort the list by second item of tuple 
def Sort_Tuple(tup):  
  
    # reverse = None (Sorts in Ascending order)  
    # key is set to sort using second element of  
    # sublist lambda has been used  
    return(sorted(tup, key = lambda x: x[1]))   
  
# Driver Code  
tup = [('rishav', 10), ('akash', 5), ('ram', 20), ('gaurav', 15)]  
  
# printing the sorted list of tuples 
print(Sort_Tuple(tup))  




# Python3 code to demonstrate working of  
# Order Tuples by List 
# Using dict() + list comprehension 
  
# initializing list 
test_list = [('Gfg', 3), ('best', 9), ('CS', 10), ('Geeks', 2)] 
  
# printing original list 
print("The original list is : " + str(test_list)) 
  
# initializing order list  
ord_list = ['Geeks', 'best', 'CS', 'Gfg'] 
  
# Order Tuples by List 
# Using dict() + list comprehension 
temp = dict(test_list) 
res = [(key, temp[key]) for key in ord_list] 
  
# printing result  
print("The ordered tuple list : " + str(res))  




# Python3 code to demonstrate working of  
# Order Tuples by List 
# Using setdefault() + sorted() + lambda 
  
# initializing list 
test_list = [('Gfg', 3), ('best', 9), ('CS', 10), ('Geeks', 2)] 
  
# printing original list 
print("The original list is : " + str(test_list)) 
  
# initializing order list  
ord_list = ['Geeks', 'best', 'CS', 'Gfg'] 
  
# Order Tuples by List 
# Using setdefault() + sorted() + lambda 
temp = dict() 
for key, ele in enumerate(ord_list): 
    temp.setdefault(ele, []).append(key)        
res = sorted(test_list, key = lambda ele: temp[ele[0]].pop())   
  
# printing result  
print("The ordered tuple list : " + str(res))  




# Python3 code to demonstrate working of  
# Flatten tuple of List to tuple 
# Using sum() + tuple() 
  
# initializing tuple 
test_tuple = ([5, 6], [6, 7, 8, 9], [3]) 
  
# printing original tuple 
print("The original tuple : " + str(test_tuple)) 
  
# Flatten tuple of List to tuple 
# Using sum() + tuple() 
res = tuple(sum(test_tuple, [])) 
  
# printing result  
print("The flattened tuple : " + str(res)) 




# Python3 code to demonstrate working of  
# Flatten tuple of List to tuple 
# Using tuple() + chain.from_iterable() 
from itertools import chain 
  
# initializing tuple 
test_tuple = ([5, 6], [6, 7, 8, 9], [3]) 
  
# printing original tuple 
print("The original tuple : " + str(test_tuple)) 
  
# Flatten tuple of List to tuple 
# Using tuple() + chain.from_iterable() 
res = tuple(chain.from_iterable(test_tuple)) 
  
# printing result  
print("The flattened tuple : " + str(res)) 




# Python3 code to demonstrate working of  
# Convert Nested Tuple to Custom Key Dictionary 
# Using list comprehension + dictionary comprehension 
  
# initializing tuple 
test_tuple = ((4, 'Gfg', 10), (3, 'is', 8), (6, 'Best', 10)) 
  
# printing original tuple 
print("The original tuple : " + str(test_tuple)) 
  
# Convert Nested Tuple to Custom Key Dictionary 
# Using list comprehension + dictionary comprehension 
res = [{'key': sub[0], 'value': sub[1], 'id': sub[2]}  
                               for sub in test_tuple] 
  
# printing result  
print("The converted dictionary : " + str(res)) 




# Python3 code to demonstrate working of  
# Convert Nested Tuple to Custom Key Dictionary 
# Using zip() + list comprehension 
  
# initializing tuple 
test_tuple = ((4, 'Gfg', 10), (3, 'is', 8), (6, 'Best', 10)) 
  
# printing original tuple 
print("The original tuple : " + str(test_tuple)) 
  
# initializing Keys  
keys = ['key', 'value', 'id'] 
  
# Convert Nested Tuple to Custom Key Dictionary 
# Using zip() + list comprehension 
res = [{key: val for key, val in zip(keys, sub)} 
                          for sub in test_tuple] 
  
# printing result  
print("The converted dictionary : " + str(res)) 




# Python 3 program for recursive binary search.
# Modifications needed for the older Python 2 are found in comments.
 
# Returns index of x in arr if present, else -1
def binary_search(arr, low, high, x):
 
    # Check base case
    if high >= low:
 
        mid = (high + low) // 2
 
        # If element is present at the middle itself
        if arr[mid] == x:
            return mid
 
        # If element is smaller than mid, then it can only
        # be present in left subarray
        elif arr[mid] > x:
            return binary_search(arr, low, mid - 1, x)
 
        # Else the element can only be present in right subarray
        else:
            return binary_search(arr, mid + 1, high, x)
 
    else:
        # Element is not present in the array
        return -1
 
# Test array
arr = [ 2, 3, 4, 10, 40 ]
x = 10
 
# Function call
result = binary_search(arr, 0, len(arr)-1, x)
 
if result != -1:
    print("Element is present at index", str(result))
else:
    print("Element is not present in array")




# Iterative Binary Search Function
# It returns index of x in given array arr if present,
# else returns -1
def binary_search(arr, x):
    low = 0
    high = len(arr) - 1
    mid = 0
 
    while low <= high:
 
        mid = (high + low) // 2
 
        # If x is greater, ignore left half
        if arr[mid] < x:
            low = mid + 1
 
        # If x is smaller, ignore right half
        elif arr[mid] > x:
            high = mid - 1
 
        # means x is present at mid
        else:
            return mid
 
    # If we reach here, then the element was not present
    return -1
 
 
# Test array
arr = [ 2, 3, 4, 10, 40 ]
x = 10
 
# Function call
result = binary_search(arr, x)
 
if result != -1:
    print("Element is present at index", str(result))
else:
    print("Element is not present in array")




# Searching an element in a list/array in python 
# can be simply done using \'in\' operator 
# Example: 
# if x in arr: 
#   print arr.index(x) 
  
# If you want to implement Linear Search in python 
  
# Linearly search x in arr[] 
# If x is present then return its location 
# else return -1 
  
def search(arr, x): 
  
    for i in range(len(arr)): 
  
        if arr[i] == x: 
            return i 
  
    return -1




# Python program for implementation of Insertion Sort 
  
# Function to do insertion sort 
def insertionSort(arr): 
  
    # Traverse through 1 to len(arr) 
    for i in range(1, len(arr)): 
  
        key = arr[i] 
  
        # Move elements of arr[0..i-1], that are 
        # greater than key, to one position ahead 
        # of their current position 
        j = i-1
        while j >=0 and key < arr[j] : 
                arr[j+1] = arr[j] 
                j -= 1
        arr[j+1] = key 
  
  
# Driver code to test above 
arr = [12, 11, 13, 5, 6] 
insertionSort(arr) 
print ("Sorted array is:") 
for i in range(len(arr)): 
    print ("%d" %arr[i]) 
  
# This code is contributed by Mohit Kumra 




# Recursive Python program for insertion sort 
# Recursive function to sort an array using insertion sort 
  
def insertionSortRecursive(arr,n): 
    # base case 
    if n<=1: 
        return
      
    # Sort first n-1 elements 
    insertionSortRecursive(arr,n-1) 
    \'\'\'Insert last element at its correct position 
        in sorted array.\'\'\'
    last = arr[n-1] 
    j = n-2
      
      # Move elements of arr[0..i-1], that are 
      # greater than key, to one position ahead 
      # of their current position  
    while (j>=0 and arr[j]>last): 
        arr[j+1] = arr[j] 
        j = j-1
  
    arr[j+1]=last 
      
# A utility function to print an array of size n 
def printArray(arr,n): 
    for i in range(n): 
        print arr[i], 
  
# Driver program to test insertion sort  
arr = [12,11,13,5,6] 
n = len(arr) 
insertionSortRecursive(arr, n) 
printArray(arr, n) 
  
# Contributed by Harsh Valecha 




# Python program for implementation of Quicksort Sort 
  
# This function takes last element as pivot, places 
# the pivot element at its correct position in sorted 
# array, and places all smaller (smaller than pivot) 
# to left of pivot and all greater elements to right 
# of pivot 
  
  
def partition(arr, low, high): 
    i = (low-1)         # index of smaller element 
    pivot = arr[high]     # pivot 
  
    for j in range(low, high): 
  
        # If current element is smaller than or 
        # equal to pivot 
        if arr[j] <= pivot: 
  
            # increment index of smaller element 
            i = i+1
            arr[i], arr[j] = arr[j], arr[i] 
  
    arr[i+1], arr[high] = arr[high], arr[i+1] 
    return (i+1) 
  
# The main function that implements QuickSort 
# arr[] --> Array to be sorted, 
# low  --> Starting index, 
# high  --> Ending index 
  
# Function to do Quick sort 
  
  
def quickSort(arr, low, high): 
    if len(arr) == 1: 
        return arr 
    if low < high: 
  
        # pi is partitioning index, arr[p] is now 
        # at right place 
        pi = partition(arr, low, high) 
  
        # Separately sort elements before 
        # partition and after partition 
        quickSort(arr, low, pi-1) 
        quickSort(arr, pi+1, high) 
  
  
# Driver code to test above 
arr = [10, 7, 8, 9, 1, 5] 
n = len(arr) 
quickSort(arr, 0, n-1) 
print("Sorted array is:") 
for i in range(n): 
    print("%d" % arr[i]), 
  
# This code is contributed by Mohit Kumra 
#This code in improved by https://github.com/anushkrishnav 




# Python program for implementation of Quicksort  
  
# This function is same in both iterative and recursive 
def partition(arr,l,h): 
    i = ( l - 1 ) 
    x = arr[h] 
  
    for j in range(l , h): 
        if   arr[j] <= x: 
  
            # increment index of smaller element 
            i = i+1
            arr[i],arr[j] = arr[j],arr[i] 
  
    arr[i+1],arr[h] = arr[h],arr[i+1] 
    return (i+1) 
  
# Function to do Quick sort 
# arr[] --> Array to be sorted, 
# l  --> Starting index, 
# h  --> Ending index 
def quickSortIterative(arr,l,h): 
  
    # Create an auxiliary stack 
    size = h - l + 1
    stack = [0] * (size) 
  
    # initialize top of stack 
    top = -1
  
    # push initial values of l and h to stack 
    top = top + 1
    stack[top] = l 
    top = top + 1
    stack[top] = h 
  
    # Keep popping from stack while is not empty 
    while top >= 0: 
  
        # Pop h and l 
        h = stack[top] 
        top = top - 1
        l = stack[top] 
        top = top - 1
  
        # Set pivot element at its correct position in 
        # sorted array 
        p = partition( arr, l, h ) 
  
        # If there are elements on left side of pivot, 
        # then push left side to stack 
        if p-1 > l: 
            top = top + 1
            stack[top] = l 
            top = top + 1
            stack[top] = p - 1
  
        # If there are elements on right side of pivot, 
        # then push right side to stack 
        if p+1 < h: 
            top = top + 1
            stack[top] = p + 1
            top = top + 1
            stack[top] = h 
  
# Driver code to test above 
arr = [4, 3, 5, 2, 1, 3, 2, 3] 
n = len(arr) 
quickSortIterative(arr, 0, n-1) 
print ("Sorted array is:") 
for i in range(n): 
    print ("%d" %arr[i]), 
  
# This code is contributed by Mohit Kumra 




# Python program for implementation of Selection 
# Sort 
import sys 
A = [64, 25, 12, 22, 11] 
  
# Traverse through all array elements 
for i in range(len(A)): 
      
    # Find the minimum element in remaining  
    # unsorted array 
    min_idx = i 
    for j in range(i+1, len(A)): 
        if A[min_idx] > A[j]: 
            min_idx = j 
              
    # Swap the found minimum element with  
    # the first element         
    A[i], A[min_idx] = A[min_idx], A[i] 
  
# Driver code to test above 
print ("Sorted array") 
for i in range(len(A)): 
    print("%d" %A[i]),  




# Python program for implementation of Bubble Sort 
  
def bubbleSort(arr): 
    n = len(arr) 
  
    # Traverse through all array elements 
    for i in range(n-1): 
    # range(n) also work but outer loop will repeat one time more than needed. 
  
        # Last i elements are already in place 
        for j in range(0, n-i-1): 
  
            # traverse the array from 0 to n-i-1 
            # Swap if the element found is greater 
            # than the next element 
            if arr[j] > arr[j+1] : 
                arr[j], arr[j+1] = arr[j+1], arr[j] 
  
# Driver code to test above 
arr = [64, 34, 25, 12, 22, 11, 90] 
  
bubbleSort(arr) 
  
print ("Sorted array is:") 
for i in range(len(arr)): 
    print ("%d" %arr[i]),  




# Python program for implementation of MergeSort 
  
# Merges two subarrays of arr[]. 
# First subarray is arr[l..m] 
# Second subarray is arr[m+1..r] 
def merge(arr, l, m, r): 
    n1 = m - l + 1
    n2 = r- m 
  
    # create temp arrays 
    L = [0] * (n1) 
    R = [0] * (n2) 
  
    # Copy data to temp arrays L[] and R[] 
    for i in range(0 , n1): 
        L[i] = arr[l + i] 
  
    for j in range(0 , n2): 
        R[j] = arr[m + 1 + j] 
  
    # Merge the temp arrays back into arr[l..r] 
    i = 0     # Initial index of first subarray 
    j = 0     # Initial index of second subarray 
    k = l     # Initial index of merged subarray 
  
    while i < n1 and j < n2 : 
        if L[i] <= R[j]: 
            arr[k] = L[i] 
            i += 1
        else: 
            arr[k] = R[j] 
            j += 1
        k += 1
  
    # Copy the remaining elements of L[], if there 
    # are any 
    while i < n1: 
        arr[k] = L[i] 
        i += 1
        k += 1
  
    # Copy the remaining elements of R[], if there 
    # are any 
    while j < n2: 
        arr[k] = R[j] 
        j += 1
        k += 1
  
# l is for left index and r is right index of the 
# sub-array of arr to be sorted 
def mergeSort(arr,l,r): 
    if l < r: 
  
        # Same as (l+r)//2, but avoids overflow for 
        # large l and h 
        m = (l+(r-1))//2
  
        # Sort first and second halves 
        mergeSort(arr, l, m) 
        mergeSort(arr, m+1, r) 
        merge(arr, l, m, r) 
  
  
# Driver code to test above 
arr = [12, 11, 13, 5, 6, 7] 
n = len(arr) 
print ("Given array is") 
for i in range(n): 
    print ("%d" %arr[i]), 
  
mergeSort(arr,0,n-1) 
print ("\n\nSorted array is") 
for i in range(n): 
    print ("%d" %arr[i]), 
  
# This code is contributed by Mohit Kumra 




# Recursive Python Program for merge sort 
  
def merge(left, right): 
    if not len(left) or not len(right): 
        return left or right 
  
    result = [] 
    i, j = 0, 0
    while (len(result) < len(left) + len(right)): 
        if left[i] < right[j]: 
            result.append(left[i]) 
            i+= 1
        else: 
            result.append(right[j]) 
            j+= 1
        if i == len(left) or j == len(right): 
            result.extend(left[i:] or right[j:]) 
            break 
  
    return result 
  
def mergesort(list): 
    if len(list) < 2: 
        return list
  
    middle = len(list)/2
    left = mergesort(list[:middle]) 
    right = mergesort(list[middle:]) 
  
    return merge(left, right) 
      
seq = [12, 11, 13, 5, 6, 7] 
print("Given array is") 
print(seq);  
print("\n") 
print("Sorted array is") 
print(mergesort(seq)) 
  
# Code Contributed by Mohit Gupta_OMG  




# Python program for implementation of heap Sort 
  
# To heapify subtree rooted at index i. 
# n is size of heap 
def heapify(arr, n, i): 
    largest = i  # Initialize largest as root 
    l = 2 * i + 1     # left = 2*i + 1 
    r = 2 * i + 2     # right = 2*i + 2 
  
    # See if left child of root exists and is 
    # greater than root 
    if l < n and arr[i] < arr[l]: 
        largest = l 
  
    # See if right child of root exists and is 
    # greater than root 
    if r < n and arr[largest] < arr[r]: 
        largest = r 
  
    # Change root, if needed 
    if largest != i: 
        arr[i],arr[largest] = arr[largest],arr[i]  # swap 
  
        # Heapify the root. 
        heapify(arr, n, largest) 
  
# The main function to sort an array of given size 
def heapSort(arr): 
    n = len(arr) 
  
    # Build a maxheap. 
    # Since last parent will be at ((n//2)-1) we can start at that location. 
    for i in range(n // 2 - 1, -1, -1): 
        heapify(arr, n, i) 
  
    # One by one extract elements 
    for i in range(n-1, 0, -1): 
        arr[i], arr[0] = arr[0], arr[i]   # swap 
        heapify(arr, i, 0) 
  
# Driver code to test above 
arr = [ 12, 11, 13, 5, 6, 7] 
heapSort(arr) 
n = len(arr) 
print ("Sorted array is") 
for i in range(n): 
    print ("%d" %arr[i]), 
# This code is contributed by Mohit Kumra 




# Python program for counting sort 
  
# The main function that sort the given string arr[] in  
# alphabetical order 
def countSort(arr): 
  
    # The output character array that will have sorted arr 
    output = [0 for i in range(256)] 
  
    # Create a count array to store count of inidividul 
    # characters and initialize count array as 0 
    count = [0 for i in range(256)] 
  
    # For storing the resulting answer since the  
    # string is immutable 
    ans = ["" for _ in arr] 
  
    # Store count of each character 
    for i in arr: 
        count[ord(i)] += 1
  
    # Change count[i] so that count[i] now contains actual 
    # position of this character in output array 
    for i in range(256): 
        count[i] += count[i-1] 
  
    # Build the output character array 
    for i in range(len(arr)): 
        output[count[ord(arr[i])]-1] = arr[i] 
        count[ord(arr[i])] -= 1
  
    # Copy the output array to arr, so that arr now 
    # contains sorted characters 
    for i in range(len(arr)): 
        ans[i] = output[i] 
    return ans  
  
# Driver program to test above function 
arr = "geeksforgeeks"
ans = countSort(arr) 
print "Sorted character array is %s"  %("".join(ans)) 
  
# This code is contributed by Nikhil Kumar Singh 




# Python program for implementation of Shell Sort 
  
def shellSort(arr): 
  
    # Start with a big gap, then reduce the gap 
    n = len(arr) 
    gap = n/2
  
    # Do a gapped insertion sort for this gap size. 
    # The first gap elements a[0..gap-1] are already in gapped  
    # order keep adding one more element until the entire array 
    # is gap sorted 
    while gap > 0: 
  
        for i in range(gap,n): 
  
            # add a[i] to the elements that have been gap sorted 
            # save a[i] in temp and make a hole at position i 
            temp = arr[i] 
  
            # shift earlier gap-sorted elements up until the correct 
            # location for a[i] is found 
            j = i 
            while  j >= gap and arr[j-gap] >temp: 
                arr[j] = arr[j-gap] 
                j -= gap 
  
            # put temp (the original a[i]) in its correct location 
            arr[j] = temp 
        gap /= 2
  
  
# Driver code to test above 
arr = [ 12, 34, 54, 2, 3] 
  
n = len(arr) 
print ("Array before sorting:") 
for i in range(n): 
    print(arr[i]), 
  
shellSort(arr) 
  
print ("\nArray after sorting:") 
for i in range(n): 
    print(arr[i]), 
  
# This code is contributed by Mohit Kumra 




#Python program to print topological sorting of a DAG 
from collections import defaultdict 
  
#Class to represent a graph 
class Graph: 
    def __init__(self,vertices): 
        self.graph = defaultdict(list) #dictionary containing adjacency List 
        self.V = vertices #No. of vertices 
  
    # function to add an edge to graph 
    def addEdge(self,u,v): 
        self.graph[u].append(v) 
  
    # A recursive function used by topologicalSort 
    def topologicalSortUtil(self,v,visited,stack): 
  
        # Mark the current node as visited. 
        visited[v] = True
  
        # Recur for all the vertices adjacent to this vertex 
        for i in self.graph[v]: 
            if visited[i] == False: 
                self.topologicalSortUtil(i,visited,stack) 
  
        # Push current vertex to stack which stores result 
        stack.insert(0,v) 
  
    # The function to do Topological Sort. It uses recursive  
    # topologicalSortUtil() 
    def topologicalSort(self): 
        # Mark all the vertices as not visited 
        visited = [False]*self.V 
        stack =[] 
  
        # Call the recursive helper function to store Topological 
        # Sort starting from all vertices one by one 
        for i in range(self.V): 
            if visited[i] == False: 
                self.topologicalSortUtil(i,visited,stack) 
  
        # Print contents of stack 
        print stack 
  
g= Graph(6) 
g.addEdge(5, 2); 
g.addEdge(5, 0); 
g.addEdge(4, 0); 
g.addEdge(4, 1); 
g.addEdge(2, 3); 
g.addEdge(3, 1); 
  
print "Following is a Topological Sort of the given graph"
g.topologicalSort() 
#This code is contributed by Neelam Yadav 




# Python program for implementation of Radix Sort  
    
# A function to do counting sort of arr[] according to  
# the digit represented by exp.  
def countingSort(arr, exp1):  
    
    n = len(arr)  
    
    # The output array elements that will have sorted arr  
    output = [0] * (n)  
    
    # initialize count array as 0  
    count = [0] * (10)  
    
    # Store count of occurrences in count[]  
    for i in range(0, n):  
        index = (arr[i]/exp1)  
        count[int((index)%10)] += 1
    
    # Change count[i] so that count[i] now contains actual  
    #  position of this digit in output array  
    for i in range(1,10):  
        count[i] += count[i-1]  
    
    # Build the output array  
    i = n-1
    while i>=0:  
        index = (arr[i]/exp1)  
        output[ count[ int((index)%10) ] - 1] = arr[i]  
        count[int((index)%10)] -= 1
        i -= 1
    
    # Copying the output array to arr[],  
    # so that arr now contains sorted numbers  
    i = 0
    for i in range(0,len(arr)):  
        arr[i] = output[i]  
  
# Method to do Radix Sort 
def radixSort(arr): 
  
    # Find the maximum number to know number of digits 
    max1 = max(arr) 
  
    # Do counting sort for every digit. Note that instead 
    # of passing digit number, exp is passed. exp is 10^i 
    # where i is current digit number 
    exp = 1
    while max1/exp > 0: 
        countingSort(arr,exp) 
        exp *= 10
  
# Driver code to test above 
arr = [ 170, 45, 75, 90, 802, 24, 2, 66] 
radixSort(arr) 
  
for i in range(len(arr)): 
    print(arr[i]), 
  
# This code is contributed by Mohit Kumra 
# This code is updated by Sudeep Saxena(saxenasudeepcse@gmail.com) on July 9, 2020 




# Python Program implementation   
# of binary insertion sort 
  
def binary_search(arr, val, start, end): 
    # we need to distinugish whether we should insert 
    # before or after the left boundary. 
    # imagine [0] is the last step of the binary search 
    # and we need to decide where to insert -1 
    if start == end: 
        if arr[start] > val: 
            return start 
        else: 
            return start+1
  
    # this occurs if we are moving beyond left\'s boundary 
    # meaning the left boundary is the least position to 
    # find a number greater than val 
    if start > end: 
        return start 
  
    mid = (start+end)/2
    if arr[mid] < val: 
        return binary_search(arr, val, mid+1, end) 
    elif arr[mid] > val: 
        return binary_search(arr, val, start, mid-1) 
    else: 
        return mid 
  
def insertion_sort(arr): 
    for i in xrange(1, len(arr)): 
        val = arr[i] 
        j = binary_search(arr, val, 0, i-1) 
        arr = arr[:j] + [val] + arr[j:i] + arr[i+1:] 
    return arr 
  
print("Sorted array:") 
print insertion_sort([37, 23, 0, 17, 12, 72, 31, 
                        46, 100, 88, 54]) 
  
# Code contributed by Mohit Gupta_OMG  




# Python program for Bitonic Sort. Note that this program 
# works only when size of input is a power of 2. 
  
# The parameter dir indicates the sorting direction, ASCENDING 
# or DESCENDING; if (a[i] > a[j]) agrees with the direction, 
# then a[i] and a[j] are interchanged.*/ 
def compAndSwap(a, i, j, dire): 
    if (dire==1 and a[i] > a[j]) or (dire==0 and a[i] > a[j]): 
        a[i],a[j] = a[j],a[i] 
  
# It recursively sorts a bitonic sequence in ascending order, 
# if dir = 1, and in descending order otherwise (means dir=0). 
# The sequence to be sorted starts at index position low, 
# the parameter cnt is the number of elements to be sorted. 
def bitonicMerge(a, low, cnt, dire): 
    if cnt > 1: 
        k = cnt/2
        for i in range(low , low+k): 
            compAndSwap(a, i, i+k, dire) 
        bitonicMerge(a, low, k, dire) 
        bitonicMerge(a, low+k, k, dire) 
  
# This funcion first produces a bitonic sequence by recursively 
# sorting its two halves in opposite sorting orders, and then 
# calls bitonicMerge to make them in the same order 
def bitonicSort(a, low, cnt,dire): 
    if cnt > 1: 
          k = cnt/2
          bitonicSort(a, low, k, 1) 
          bitonicSort(a, low+k, k, 0) 
          bitonicMerge(a, low, cnt, dire) 
  
# Caller of bitonicSort for sorting the entire array of length N 
# in ASCENDING order 
def sort(a,N, up): 
    bitonicSort(a,0, N, up) 
  
# Driver code to test above 
a = [3, 7, 4, 8, 6, 2, 1, 5] 
n = len(a) 
up = 1
  
sort(a, n, up) 
print ("\n\nSorted array is") 
for i in range(n): 
    print("%d" %a[i]), 




# Python program for implementation of CombSort 
  
# To find next gap from current 
def getNextGap(gap): 
  
    # Shrink gap by Shrink factor 
    gap = (gap * 10)/13
    if gap < 1: 
        return 1
    return gap 
  
# Function to sort arr[] using Comb Sort 
def combSort(arr): 
    n = len(arr) 
  
    # Initialize gap 
    gap = n 
  
    # Initialize swapped as true to make sure that 
    # loop runs 
    swapped = True
  
    # Keep running while gap is more than 1 and last 
    # iteration caused a swap 
    while gap !=1 or swapped == 1: 
  
        # Find next gap 
        gap = getNextGap(gap) 
  
        # Initialize swapped as false so that we can 
        # check if swap happened or not 
        swapped = False
  
        # Compare all elements with current gap 
        for i in range(0, n-gap): 
            if arr[i] > arr[i + gap]: 
                arr[i], arr[i + gap]=arr[i + gap], arr[i] 
                swapped = True
  
  
# Driver code to test above 
arr = [ 8, 4, 1, 3, -44, 23, -6, 28, 0] 
combSort(arr) 
  
print ("Sorted array:") 
for i in range(len(arr)): 
    print (arr[i]), 
  
  
# This code is contributed by Mohit Kumra 




# Python program to implement Pigeonhole Sort */ 
  
# source code : "https://en.wikibooks.org/wiki/ 
#   Algorithm_Implementation/Sorting/Pigeonhole_sort" 
def pigeonhole_sort(a): 
    # size of range of values in the list  
    # (ie, number of pigeonholes we need) 
    my_min = min(a) 
    my_max = max(a) 
    size = my_max - my_min + 1
  
    # our list of pigeonholes 
    holes = [0] * size 
  
    # Populate the pigeonholes. 
    for x in a: 
        assert type(x) is int, "integers only please"
        holes[x - my_min] += 1
  
    # Put the elements back into the array in order. 
    i = 0
    for count in range(size): 
        while holes[count] > 0: 
            holes[count] -= 1
            a[i] = count + my_min 
            i += 1
              
  
a = [8, 3, 2, 7, 4, 6, 8] 
print("Sorted order is : ", end =" ") 
  
pigeonhole_sort(a) 
          
for i in range(0, len(a)): 
    print(a[i], end =" ") 
     




# Python program for implementation of Cocktail Sort 
  
def cocktailSort(a): 
    n = len(a) 
    swapped = True
    start = 0
    end = n-1
    while (swapped==True): 
  
        # reset the swapped flag on entering the loop, 
        # because it might be true from a previous 
        # iteration. 
        swapped = False
  
        # loop from left to right same as the bubble 
        # sort 
        for i in range (start, end): 
            if (a[i] > a[i+1]) : 
                a[i], a[i+1]= a[i+1], a[i] 
                swapped=True
  
        # if nothing moved, then array is sorted. 
        if (swapped==False): 
            break
  
        # otherwise, reset the swapped flag so that it 
        # can be used in the next stage 
        swapped = False
  
        # move the end point back by one, because 
        # item at the end is in its rightful spot 
        end = end-1
  
        # from right to left, doing the same 
        # comparison as in the previous stage 
        for i in range(end-1, start-1,-1): 
            if (a[i] > a[i+1]): 
                a[i], a[i+1] = a[i+1], a[i] 
                swapped = True
  
        # increase the starting point, because 
        # the last stage would have moved the next 
        # smallest number to its rightful spot. 
        start = start+1
  
# Driver code to test above 
a = [5, 1, 4, 2, 8, 0, 2] 
cocktailSort(a) 
print("Sorted array is:") 
for i in range(len(a)): 
    print ("%d" %a[i]), 




# Python program to implement Gnome Sort 
  
# A function to sort the given list using Gnome sort 
def gnomeSort( arr, n): 
    index = 0
    while index < n: 
        if index == 0: 
            index = index + 1
        if arr[index] >= arr[index - 1]: 
            index = index + 1
        else: 
            arr[index], arr[index-1] = arr[index-1], arr[index] 
            index = index - 1
  
    return arr 
  
# Driver Code 
arr = [ 34, 2, 10, -9] 
n = len(arr) 
  
arr = gnomeSort(arr, n) 
print "Sorted seqquence after applying Gnome Sort :", 
for i in arr: 
    print i, 
  
# Contributed By Harshit Agrawal 




# Python Program to implement  
# Odd-Even / Brick Sort 
  
def oddEvenSort(arr, n): 
    # Initially array is unsorted 
    isSorted = 0
    while isSorted == 0: 
        isSorted = 1
        temp = 0
        for i in range(1, n-1, 2): 
            if arr[i] > arr[i+1]: 
                arr[i], arr[i+1] = arr[i+1], arr[i] 
                isSorted = 0
                  
        for i in range(0, n-1, 2): 
            if arr[i] > arr[i+1]: 
                arr[i], arr[i+1] = arr[i+1], arr[i] 
                isSorted = 0
      
    return
  
  
arr = [34, 2, 10, -9] 
n = len(arr) 
  
oddEvenSort(arr, n); 
for i in range(0, n): 
    print(arr[i], end =" ") 
      
# Code Contribute by Mohit Gupta_OMG <(0_o)> 




# Python program for implementation of Bogo Sort 
import random 
  
# Sorts array a[0..n-1] using Bogo sort 
def bogoSort(a): 
    n = len(a) 
    while (is_sorted(a)== False): 
        shuffle(a) 
  
# To check if array is sorted or not 
def is_sorted(a): 
    n = len(a) 
    for i in range(0, n-1): 
        if (a[i] > a[i+1] ): 
            return False
    return True
  
# To generate permuatation of the array 
def shuffle(a): 
    n = len(a) 
    for i in range (0,n): 
        r = random.randint(0,n-1) 
        a[i], a[r] = a[r], a[i] 
  
# Driver code to test above 
a = [3, 2, 4, 1, 0, 5] 
bogoSort(a) 
print("Sorted array :") 
for i in range(len(a)): 
    print ("%d" %a[i]), 




# Python program to impleament cycle sort 
  
def cycleSort(array): 
  writes = 0
    
  # Loop through the array to find cycles to rotate. 
  for cycleStart in range(0, len(array) - 1): 
    item = array[cycleStart] 
      
    # Find where to put the item. 
    pos = cycleStart 
    for i in range(cycleStart + 1, len(array)): 
      if array[i] < item: 
        pos += 1
      
    # If the item is already there, this is not a cycle. 
    if pos == cycleStart: 
      continue
      
    # Otherwise, put the item there or right after any duplicates. 
    while item == array[pos]: 
      pos += 1
    array[pos], item = item, array[pos] 
    writes += 1
      
    # Rotate the rest of the cycle. 
    while pos != cycleStart: 
        
      # Find where to put the item. 
      pos = cycleStart 
      for i in range(cycleStart + 1, len(array)): 
        if array[i] < item: 
          pos += 1
        
      # Put the item there or right after any duplicates. 
      while item == array[pos]: 
        pos += 1
      array[pos], item = item, array[pos] 
      writes += 1
    
  return writes 
    
#  driver code  
arr = [1, 8, 3, 9, 10, 10, 2, 4 ] 
n = len(arr)  
cycleSort(arr) 
  
print("After sort : ") 
for i in range(0, n) :  
    print(arr[i], end = \' \') 
  
# Code Contributed by Mohit Gupta_OMG <(0_o)> 




# Python program to implement stooge sort 
  
def stoogesort(arr, l, h): 
    if l >= h: 
        return
   
    # If first element is smaller 
    # than last,swap them 
    if arr[l]>arr[h]: 
        t = arr[l] 
        arr[l] = arr[h] 
        arr[h] = t 
   
    # If there are more than 2 elements in 
    # the array 
    if h-l+1 > 2: 
        t = (int)((h-l+1)/3) 
   
        # Recursively sort first 2/3 elements 
        stoogesort(arr, l, (h-t)) 
   
        # Recursively sort last 2/3 elements 
        stoogesort(arr, l+t, (h)) 
   
        # Recursively sort first 2/3 elements 
        # again to confirm 
        stoogesort(arr, l, (h-t)) 
   
  
# deriver  
arr = [2, 4, 5, 3, 1] 
n = len(arr) 
  
stoogesort(arr, 0, n-1) 
   
for i in range(0, n): 
    print(arr[i], end = \' \') 
  
# Code Contributed by Mohit Gupta_OMG <(0_o)> 




// C++ program to print the pattern G  
#include <iostream> 
using namespace std; 
  
void pattern(int line) 
{ 
    int i, j; 
    for(i = 0; i < line; i++) 
    { 
        for(j = 0; j < line; j++) 
        { 
            if((j == 1 && i != 0 && i != line - 1) || 
              ((i == 0 || i == line - 1) && j > 1 && 
              j < line - 2) || (i == ((line - 1) / 2) &&  
              j > 2 && j < line - 1) || (j == line - 2 &&  
              i != 0 && i >= ((line - 1) / 2) && i != line - 1)) 
                printf("*"); 
            else
                printf( " "); 
  
        } 
        printf("\n"); 
    } 
} 
  
// Driver code 
int main()  
{ 
    int line = 7; 
    pattern(line); 
    return 0; 
} 
  
// This code is contributed  
// by  vt_m.  




// Java program to print the pattern G  
import java.io.*; 
  
class GFG { 
  
    static void pattern(int line) 
    { 
        int i, j; 
        for(i = 0; i < line; i++) 
        { 
            for(j = 0; j < line; j++) 
            { 
                if((j == 1 && i != 0 && i != line - 1) || 
                ((i == 0 || i == line - 1) && j > 1 && 
                j < line - 2) || (i == ((line - 1) / 2) &&  
                j > 2 && j < line - 1) || (j == line - 2 &&  
                i != 0 && i >= ((line - 1) / 2) && i != line - 1)) 
                    System.out.print("*"); 
                else
                    System.out.print( " "); 
      
            } 
            System.out.println(); 
        } 
    } 
      
    // Driver code 
    public static void main (String[] args)  
    { 
        int line = 7; 
        pattern(line); 
    } 
} 
  
// This code is contributed by vt_m. 




# Python program to print pattern G 
def Pattern(line): 
    pat="" 
    for i in range(0,line):     
        for j in range(0,line):      
            if ((j == 1 and i != 0 and i != line-1) or ((i == 0 or
                i == line-1) and j > 1 and j < line-2) or (i == ((line-1)/2) 
                and j > line-5 and j < line-1) or (j == line-2 and
                i != 0 and i != line-1 and i >=((line-1)/2))):   
                pat=pat+"*"   
            else:       
                pat=pat+" "   
        pat=pat+"\n"   
    return pat 
   
# Driver Code 
line = 7
print(Pattern(line)) 




// C# program to print the pattern G  
using System; 
  
class GFG { 
  
    static void pattern(int line) 
    { 
        int i, j; 
        for(i = 0; i < line; i++) 
        { 
            for(j = 0; j < line; j++) 
            { 
                if((j == 1 && i != 0 && i != line - 1) || 
                ((i == 0 || i == line - 1) && j > 1 && 
                j < line - 2) || (i == ((line - 1) / 2) &&  
                j > 2 && j < line - 1) || (j == line - 2 &&  
                i != 0 && i >= ((line - 1) / 2) && i != line - 1)) 
                    Console.Write("*"); 
                else
                    Console.Write( " "); 
      
            } 
            Console.WriteLine(); 
        } 
    } 
      
    // Driver code 
    public static void Main ()  
    { 
        int line = 7; 
        pattern(line); 
    } 
} 
  
// This code is contributed by vt_m. 




<?php 
// PHP program to print pattern G 
  
function Pattern($line){ 
    for ($i=0; $i<$line; $i++) 
    { 
      for ($j=0; $j<=$line; $j++) 
        { 
        if (($j == 1 and $i != 0 and $i != $line-1) or (($i == 0 or
            $i == $line-1) and $j > 1 and $j < $line-2) or ($i == (($line-1)/2) 
            and $j > 2 and $j < $line-1) or ($j == $line-2 and
            $i != 0 and $i >=(($line-1)/2) and $i != $line-1)) 
                echo "*";     
            else 
                echo " ";      
        }         
      echo "\n"; 
    } 
} 
  
// Driver Code 
$line = 7; 
Pattern($line) 
?> 




# python 3 code to print inverted star 
# pattern  
  
# n is the number of rows in which 
# star is going to be printed. 
n=11
  
# i is going to be enabled to 
# range between n-i t 0 with a 
# decrement of 1 with each iteration. 
# and in print function, for each iteration, 
# ” ” is multiplied with n-i and ‘*’ is 
# multiplied with i to create correct 
# space before of the stars. 
for i in range (n, 0, -1): 
    print((n-i) * ' ' + i * '*') 




# Python3 Program to demonstrate  
# staircase pattern 
  
# function definition 
def pattern(n): 
  
    # for loop for rows 
    for i in range(1,n+1): 
  
        # conditional operator 
        k =i + 1 if(i % 2 != 0) else i 
  
        # for loop for printing spaces 
        for g in range(k,n): 
            if g>=k: 
                print(end="  ") 
  
        # according to value of k carry 
        # out further operation 
        for j in range(0,k): 
            if j == k - 1: 
                print(" * ") 
            else: 
                print(" * ", end = " ") 
  
  
# Driver code 
n = 10
pattern(n) 




# Python3 code to print input in your own font 
  
name = "GEEK"
  
# To take input from User 
# name = input("Enter your name: \n\n") 
  
lngth = len(name) 
l = "" 
  
for x in range(0, lngth): 
    c = name[x] 
    c = c.upper() 
      
    if (c == "A"): 
        print("..######..\n..#....#..\n..######..", end = " ") 
        print("\n..#....#..\n..#....#..\n\n") 
          
    elif (c == "B"): 
        print("..######..\n..#....#..\n..#####...", end = " ") 
        print("\n..#....#..\n..######..\n\n") 
          
    elif (c == "C"): 
        print("..######..\n..#.......\n..#.......", end = " ") 
        print("\n..#.......\n..######..\n\n") 
          
    elif (c == "D"): 
        print("..#####...\n..#....#..\n..#....#..", end = " ") 
        print("\n..#....#..\n..#####...\n\n") 
          
    elif (c == "E"): 
        print("..######..\n..#.......\n..#####...", end = " ") 
        print("\n..#.......\n..######..\n\n") 
          
    elif (c == "F"): 
        print("..######..\n..#.......\n..#####...", end = " ") 
        print("\n..#.......\n..#.......\n\n") 
          
    elif (c == "G"): 
        print("..######..\n..#.......\n..#.####..", end = " ") 
        print("\n..#....#..\n..#####...\n\n") 
          
    elif (c == "H"): 
        print("..#....#..\n..#....#..\n..######..", end = " ") 
        print("\n..#....#..\n..#....#..\n\n") 
          
    elif (c == "I"): 
        print("..######..\n....##....\n....##....", end = " ") 
        print("\n....##....\n..######..\n\n") 
          
    elif (c == "J"): 
        print("..######..\n....##....\n....##....", end = " ") 
        print("\n..#.##....\n..####....\n\n") 
          
    elif (c == "K"): 
        print("..#...#...\n..#..#....\n..##......", end = " ") 
        print("\n..#..#....\n..#...#...\n\n") 
          
    elif (c == "L"): 
        print("..#.......\n..#.......\n..#.......", end = " ") 
        print("\n..#.......\n..######..\n\n") 
          
    elif (c == "M"): 
        print("..#....#..\n..##..##..\n..#.##.#..", end = " ") 
        print("\n..#....#..\n..#....#..\n\n") 
          
    elif (c == "N"): 
        print("..#....#..\n..##...#..\n..#.#..#..", end = " ") 
        print("\n..#..#.#..\n..#...##..\n\n") 
          
    elif (c == "O"): 
        print("..######..\n..#....#..\n..#....#..", end = " ") 
        print("\n..#....#..\n..######..\n\n") 
          
    elif (c == "P"): 
        print("..######..\n..#....#..\n..######..", end = " ") 
        print("\n..#.......\n..#.......\n\n") 
          
    elif (c == "Q"): 
        print("..######..\n..#....#..\n..#.#..#..", end = " ") 
        print("\n..#..#.#..\n..######..\n\n") 
          
    elif (c == "R"): 
        print("..######..\n..#....#..\n..#.##...", end = " ") 
        print("\n..#...#...\n..#....#..\n\n") 
          
    elif (c == "S"): 
        print("..######..\n..#.......\n..######..", end = " ") 
        print("\n.......#..\n..######..\n\n") 
          
    elif (c == "T"): 
        print("..######..\n....##....\n....##....", end = " ") 
        print("\n....##....\n....##....\n\n") 
          
    elif (c == "U"): 
        print("..#....#..\n..#....#..\n..#....#..", end = " ") 
        print("\n..#....#..\n..######..\n\n") 
          
    elif (c == "V"): 
        print("..#....#..\n..#....#..\n..#....#..", end = " ") 
        print("\n...#..#...\n....##....\n\n") 
          
    elif (c == "W"): 
        print("..#....#..\n..#....#..\n..#.##.#..", end = " ") 
        print("\n..##..##..\n..#....#..\n\n") 
          
    elif (c == "X"): 
        print("..#....#..\n...#..#...\n....##....", end = " ") 
        print("\n...#..#...\n..#....#..\n\n") 
          
    elif (c == "Y"): 
        print("..#....#..\n...#..#...\n....##....", end = " ") 
        print("\n....##....\n....##....\n\n") 
          
    elif (c == "Z"): 
        print("..######..\n......#...\n.....#....", end = " ") 
        print("\n....#.....\n..######..\n\n") 
          
    elif (c == " "): 
        print("..........\n..........\n..........", end = " ") 
        print("\n..........\n\n") 
          
    elif (c == "."): 
        print("----..----\n\n") 




from datetime import *
import pytz 
  
  
tz_INDIA = pytz.timezone('Asia/Kolkata')  
datetime_INDIA = datetime.now(tz_INDIA) 
print("INDIA time:", datetime_INDIA.strftime("%H:%M:%S")) 




from datetime import datetime 
  
# now() method is used to 
# get object containing  
# current date & time. 
now_method = datetime.now() 
  
# strftime() method used to 
# create a string representing 
# the current time. 
currentTime = now_method.strftime("%H:%M:%S") 
print("Current Time =", currentTime) 




from datetime import datetime 
  
# Time object containing  
# the current time. 
time = datetime.now().time()  
  
print("Current Time =", time) 




import time 
  
  
# localtime() method used to 
# get the object containing 
# the local time. 
Time = time.localtime() 
  
# strftime() method used to 
# create a string representing 
# the current time. 
currentTime = time.strftime("%H:%M:%S", Time) 
print(currentTime) 




# Python3 code to demonstrate  
# Getting current date and time using   
# now().  
    
# importing datetime module for now()  
import datetime  
    
# using now() to get current time  
current_time = datetime.datetime.now()  
    
# Printing value of now.  
print ("Time now at greenwich meridian is : "
                                    , end = "")  
print (current_time)  




# Python3 code to demonstrate  
# attributes of now()  
    
# importing datetime module for now()  
import datetime  
    
# using now() to get current time  
current_time = datetime.datetime.now()  
    
# Printing attributes of now().  
print ("The attributes of now() are : ")  
    
print ("Year : ", end = "")  
print (current_time.year)  
    
print ("Month : ", end = "")  
print (current_time.month)  
    
print ("Day : ", end = "")  
print (current_time.day)  
    
print ("Hour : ", end = "")  
print (current_time.hour)  
    
print ("Minute : ", end = "")  
print (current_time.minute)  
    
print ("Second : ", end = "")  
print (current_time.second)  
    
print ("Microsecond : ", end = "")  
print (current_time.microsecond)  




# Python3 code to demonstrate  
# attributes of now() for timezone  
    
# for now()  
import datetime  
    
# for timezone()  
import pytz  
    
# using now() to get current time  
current_time = datetime.datetime.now(pytz.timezone('Asia/Kolkata'))  
    
# printing current time in india  
print ("The current time in india is : ")  
print (current_time)   




# Python program to find yesterday, 
# today and tomorrow 
  
  
# Import datetime and timedelta 
# class from datetime module 
from datetime import datetime, timedelta 
  
  
# Get today's date 
presentday = datetime.now() # or presentday = datetime.today() 
  
# Get Yesterday 
yesterday = presentday - timedelta(1) 
  
# Get Tomorrow 
tomorrow = presentday + timedelta(1) 
  
  
# strftime() is to format date according to 
# the need by converting them to string 
print("Yesterday = ", yesterday.strftime('%d-%m-%Y')) 
print("Today = ", presentday.strftime('%d-%m-%Y')) 
print("Tomorrow = ", tomorrow.strftime('%d-%m-%Y')) 




# Python program to convert time 
# from 12 hour to 24 hour format 
  
# Function to convert the date format 
def convert24(str1): 
      
    # Checking if last two elements of time 
    # is AM and first two elements are 12 
    if str1[-2:] == "AM" and str1[:2] == "12": 
        return "00" + str1[2:-2] 
          
    # remove the AM     
    elif str1[-2:] == "AM": 
        return str1[:-2] 
      
    # Checking if last two elements of time 
    # is PM and first two elements are 12    
    elif str1[-2:] == "PM" and str1[:2] == "12": 
        return str1[:-2] 
          
    else: 
          
        # add 12 to hours and remove PM 
        return str(int(str1[:2]) + 12) + str1[2:8] 
  
# Driver Code         
print(convert24("08:05:45 PM")) 




# Python program to find the 
# difference between two times 
  
  
# function to obtain the time 
# in minutes form 
def difference(h1, m1, h2, m2): 
      
    # convert h1 : m1 into 
    # minutes 
    t1 = h1 * 60 + m1 
      
    # convert h2 : m2 into 
    # minutes  
    t2 = h2 * 60 + m2 
      
    if (t1 == t2):  
        print("Both are same times") 
        return 
    else: 
          
        # calculating the difference 
        diff = t2-t1 
          
    # calculating hours from 
    # difference 
    h = (int(diff / 60)) % 24
      
    # calculating minutes from  
    # difference 
    m = diff % 60
  
    print(h, ":", m) 
  
# Driver's code 
if __name__ == "__main__": 
      
    difference(7, 20, 9, 45) 
    difference(15, 23, 18, 54) 
    difference(16, 20, 16, 20) 
  
# This code is contributed by SrujayReddy 




# importing libraries 
import time 
  
  
# Timer starts 
starttime=time.time() 
lasttime=starttime 
lapnum=1
  
print("Press ENTER to count laps.\nPress CTRL+C to stop") 
  
try: 
     while True: 
              
          # Input for the ENTER key press 
          input() 
  
          # The current lap-time 
          laptime=round((time.time() - lasttime), 2) 
  
          # Total time elapsed  
          # since the timer started 
          totaltime=round((time.time() - starttime), 2) 
  
          # Printing the lap number, 
          # lap-time and total time 
          print("Lap No. "+str(lapnum))  
          print("Total Time: "+str(totaltime)) 
          print("Lap Time: "+str(laptime)) 
            
          print("*"*20) 
  
          # Updating the previous total time 
          # and lap number 
          lasttime=time.time() 
          lapnum+=1
  
# Stopping when CTRL+C is pressed 
except KeyboardInterrupt: 
     print("Done")




# Python program to convert  
# date to timestamp 
  
  
import time 
import datetime 
  
  
string = "20/01/2020"
print(time.mktime(datetime.datetime.strptime(string, 
                                             "%d/%m/%Y").timetuple())) 




# Python program to convert  
# date to timestamp 
  
  
  
import time 
import datetime 
  
  
string = "20/01/2020"
  
element = datetime.datetime.strptime(string,"%d/%m/%Y") 
  
tuple = element.timetuple() 
timestamp = time.mktime(tuple) 
  
print(timestamp) 




# Python program to convert  
# date to timestamp 
  
  
import time 
import datetime 
  
  
string = "20/01/2020"
  
  
element = datetime.datetime.strptime(string,"%d/%m/%Y") 
  
timestamp = datetime.datetime.timestamp(element) 
print(timestamp) 




from datetime import datetime 
  
  
timestamp = 1545730073
dt_obj = datetime.fromtimestamp(1140825600) 
  
print("date_time:",dt_obj) 
print("type of dt:",type(dt_obj))




from datetime import datetime 
  
  
timestamp = 1553367060
dt_obj = datetime.fromtimestamp(timestamp).strftime('%d-%m-%y') 
  
print("date:",dt_obj)




# python program Find number of 
# times every day occurs in a Year  
   
  
import datetime  
import calendar 
   
def day_occur_time(year): 
      
    # stores days in a week  
    days = [ "Monday", "Tuesday", "Wednesday",   
           "Thursday",  "Friday", "Saturday",  
           "Sunday" ] 
      
    # Initialize all counts as 52 
    L = [52 for i in range(7)] 
      
    # Find the index of the first day 
    # of the year 
    pos = -1
    day = datetime.datetime(year, month = 1, day = 1).strftime("%A") 
    for i in range(7): 
        if day == days[i]: 
            pos = i 
              
    # mark the occurrence to be 53 of 1st day 
    # and 2nd day if the year is leap year 
    if calendar.isleap(year): 
        L[pos] += 1
        L[(pos+1)%7] += 1
          
    else: 
        L[pos] += 1
          
      
    # Print the days 
    for i in range(7): 
        print(days[i], L[i]) 
       
   
# Driver Code  
year = 2019
day_occur_time(year) 




# _importing module 
import re 
  
  
def check(str, pattern): 
    
    # _matching the strings 
    if re.search(pattern, str): 
        print("Valid String") 
    else: 
        print("Invalid String") 
  
# _driver code 
pattern = re.compile('^[1234]+$') 
check('2134', pattern) 
check('349', pattern)




import re 
  
  
string = "ThisIsGeeksforGeeks !, 123"
  
# Creating separate lists using  
# the re.findall() method. 
uppercase_characters = re.findall(r"[A-Z]", string) 
lowercase_characters = re.findall(r"[a-z]", string) 
numerical_characters = re.findall(r"[0-9]", string) 
special_characters = re.findall(r"[, .!?]", string) 
  
print("The no. of uppercase characters is", len(uppercase_characters)) 
print("The no. of lowercase characters is", len(lowercase_characters)) 
print("The no. of numerical characters is", len(numerical_characters)) 
print("The no. of special characters is", len(special_characters)) 




# your code goes here# Python program to  
# find the most occurring element  
import re  
from collections import Counter  
  
def most_occr_element(word): 
      
    # re.findall will extract all the elements  
    # from the string and make a list 
    arr = re.findall(r'[0-9]+', word)     
      
    # to store maxm frequency 
    maxm = 0  
  
    # to store maxm element of most frequency 
    max_elem = 0
      
    # counter will store all the number with  
    # their frequencies 
    # c = counter((55, 2), (2, 1), (3, 1), (4, 1))     
    c = Counter(arr) 
    
    # Store all the keys of counter in a list in 
    # which first would we our required element     
    for x in list(c.keys()): 
  
        if c[x]>= maxm: 
            maxm = c[x] 
            max_elem = int(x) 
                  
    return max_elem 
  
# Driver program  
if __name__ == "__main__":  
    word = 'geek55of55gee4ksabc3dr2x'
    print(most_occr_element(word)) 




# Function to extract maximum numeric value from  
# a given string 
import re 
  
def extractMax(input): 
  
     # get a list of all numbers separated by  
     # lower case characters  
     # \d+ is a regular expression which means 
     # one or more digit 
     # output will be like ['100','564','365'] 
     numbers = re.findall('\d+',input) 
  
     # now we need to convert each number into integer 
     # int(string) converts string into integer 
     # we will map int() function onto all elements  
     # of numbers list 
     numbers = map(int,numbers) 
  
     print max(numbers) 
  
# Driver program 
if __name__ == "__main__": 
    input = '100klh564abc365bg'
    extractMax(input) 




import re  
    
def putSpace(input):  
    
    # regex [A-Z][a-z]* means any string starting   
    # with capital character followed by many   
    # lowercase letters   
    words = re.findall('[A-Z][a-z]*', input)  
    
    # Change first letter of each word into lower  
    # case  
    result = []  
    for word in words:  
        word = chr( ord (word[0]) + 32) + word[1:]  
        result.append(word)  
    print (' '.join(result))  
    
# Driver program  
if __name__ == "__main__":  
    input = 'BruceWayneIsBatman'
    putSpace(input) 




# Python program to check if a string starts 
# and ends with the same charcter 
  
# import re module as it provides 
# support for regular expressions  
import re 
  
# the regular  expression 
regex = r'^[a-z]$|^([a-z]).*\1$'
  
# function for checking the string 
def check(string): 
  
    # pass the regualar expression  
    # and the string in the search() method  
    if(re.search(regex, string)):   
        print("Valid")   
    else:   
        print("Invalid")   
  
if __name__ == '__main__' : 
  
    sample1 = "abba"
    sample2 = "a"
    sample3 = "abcd"
  
    check(sample1) 
    check(sample2) 
    check(sample3) 




# Python3 code to find sequences of one upper 
# case letter followed by lower case letters 
import re 
  
# Function to match the string 
def match(text): 
          
        # regex 
        pattern = '[A-Z]+[a-z]+$'
          
        # searching pattern 
        if re.search(pattern, text): 
                return('Yes') 
        else: 
                return('No') 
  
# Driver Function 
print(match("Geeks")) 
print(match("geeksforGeeks")) 
print(match("geeks")) 




// C++ program to remove duplicate words
// using Regular Expression or ReGex.
#include <iostream>
#include <regex>
using namespace std;
 
// Function to validate the sentence
// and remove the duplicate words
string removeDuplicateWords(string s)
{
 
  // Regex to matching repeated words.
  const regex pattern("\\b(\\w+)(?:\\W+\\1\\b)+", regex_constants::icase);
 
  string answer = s;
  for (auto it = sregex_iterator(s.begin(), s.end(), pattern);
       it != sregex_iterator(); it++)
  {
      // flag type for determining the matching behavior
      // here it is for matches on 'string' objects
      smatch match;
      match = *it;
      answer.replace(answer.find(match.str(0)), match.str(0).length(), match.str(1));
  }
 
  return answer;
}
 
// Driver Code
int main()
{
  // Test Case: 1
  string str1
      = "Good bye bye world world";
  cout << removeDuplicateWords(str1) << endl;
 
  // Test Case: 2
  string str2
      = "Ram went went to to his home";
  cout << removeDuplicateWords(str2) << endl;
 
  // Test Case: 3
  string str3
      = "Hello hello world world";
  cout << removeDuplicateWords(str3) << endl;
 
  return 0;
}
 
// This code is contributed by yuvraj_chandra




// Java program to remove duplicate words
// using Regular Expression or ReGex.
 
import java.util.regex.Matcher;
import java.util.regex.Pattern;
 
class GFG {
 
    // Function to validate the sentence
    // and remove the duplicate words
    public static String
    removeDuplicateWords(String input)
    {
 
        // Regex to matching repeated words.
        String regex
            = "\\b(\\w+)(?:\\W+\\1\\b)+";
        Pattern p
            = Pattern.compile(
                regex,
                Pattern.CASE_INSENSITIVE);
 
        // Pattern class contains matcher() method
        // to find matching between given sentence
        // and regular expression.
        Matcher m = p.matcher(input);
 
        // Check for subsequences of input
        // that match the compiled pattern
        while (m.find()) {
            input
                = input.replaceAll(
                    m.group(),
                    m.group(1));
        }
        return input;
    }
 
    // Driver code
    public static void main(String args[])
    {
 
        // Test Case: 1
        String str1
            = "Good bye bye world world";
        System.out.println(
            removeDuplicateWords(str1));
 
        // Test Case: 2
        String str2
            = "Ram went went to to his home";
        System.out.println(
            removeDuplicateWords(str2));
 
        // Test Case: 3
        String str3
            = "Hello hello world world";
        System.out.println(
            removeDuplicateWords(str3));
    }
}




# Python program to remove duplicate words
# using Regular Expression or ReGex.
import re
 
 
# Function to validate the sentence
# and remove the duplicate words
def removeDuplicateWords(input):
 
    # Regex to matching repeated words
    regex = r'\b(\w+)(?:\W+\1\b)+'
 
    return re.sub(regex, r'\1', input, flags=re.IGNORECASE)
 
 
# Driver Code
 
# Test Case: 1
str1 = "Good bye bye world world"
print(removeDuplicateWords(str1))
 
# Test Case: 2
str2 = "Ram went went to to his home"
print(removeDuplicateWords(str2))
 
# Test Case: 3
str3 = "Hello hello world world"
print(removeDuplicateWords(str3))
 
# This code is contributed by yuvraj_chandra




# Python code to demonstrate 
# to remove all the characters 
# except numbers and alphabets 
  
import re 
  
# initialising string 
ini_string = "123abcjw:, .@! eiw"
  
# printing initial string 
print ("initial string : ", ini_string) 
  
# function to demonstrate removal of characters 
# which are not numbers and alphabets using re 
  
result = re.sub('[\W_]+', '', ini_string) 
  
# printing final string 
print ("final string", result) 




# Python code to demonstrate 
# to remove all the characters 
# except numbers and alphabets 
  
import re 
  
# initialising string 
ini_string = "123abcjw:, .@! eiw"
  
# printing initial string 
print ("initial string : ", ini_string) 
  
# function to demonstrate removal of characters 
# which are not numbers and alphabets using re 
getVals = list([val for val in ini_string 
               if val.isalpha() or val.isnumeric()]) 
  
result = "".join(getVals) 
  
# printing final string 
print ("final string", result) 




# Python code to demonstrate 
# to remove all the characters 
# except numbers and alphabets 
  
# initialising string 
ini_string = "123abcjw:, .@! eiw"
  
# printing initial string 
print ("initial string : ", ini_string) 
  
# function to demonstrate removal of characters 
# which are not numbers and alphabets using re 
getVals = list([val for val in ini_string if val.isalnum()]) 
result = "".join(getVals) 
  
# printing final string 
print ("final string", result) 




# Python program to accept string ending 
# with only alphanumeric character. 
# import re module 
  
# re module provides support 
# for regular expressions 
import re 
  
# Make a regular expression to accept string 
# ending with alphanumeric character 
regex = '[a-zA-z0-9]$'
      
# Define a function for accepting string 
# ending with alphanumeric character 
def check(string):  
  
     # pass the regualar expression 
     # and the string in search() method 
    if(re.search(regex, string)):  
        print("Accept")  
          
    else:  
        print("Discard")  
      
  
# Driver Code  
if __name__ == '__main__' :  
      
    # Enter the string  
    string = "ankirai@"
      
    # calling run function  
    check(string) 
  
    string = "ankitrai326"
    check(string) 
  
    string = "ankit."
    check(string) 
  
    string = "geeksforgeeks"
    check(string) 




# Python program to accept string starting with a vowel 
  
# import re module 
  
# re module provides support 
# for regular expressions 
import re 
  
# Make a regular expression 
# to accept string starting with vowel 
regex = '^[aeiouAEIOU][A-Za-z0-9_]*'
      
# Define a function for 
# accepting string start with vowel 
def check(string):  
  
     # pass the regualar expression 
     # and the string in search() method 
    if(re.search(regex, string)):  
        print("Valid")  
          
    else:  
        print("Invalid")  
      
  
# Driver Code  
if __name__ == '__main__' :  
      
    # Enter the string  
    string = "ankit"
      
    # calling run function  
    check(string) 
  
    string = "geeks"
    check(string) 
  
    string = "sandeep"
    check(string) 




# import library 
import re 
  
# define a function  
def find(string, sample) : 
    
  # check substring present  
  # in a string or not 
  if (sample in string): 
  
      y = "^" + sample 
  
      # check if string starts  
      # with the substring 
      x = re.search(y, string) 
  
      if x : 
          print("string starts with the given substring") 
  
      else : 
          print("string doesn't start with the given substring") 
  
  else : 
      print("entered string isn't a substring") 
  
  
# Driver code 
string = "geeks for geeks makes learning fun"  
sample = "geeks"
  
# function call 
find(string, sample) 
  
sample = "makes"
  
# function call 
find(string, sample) 




# import library 
import re 
  
# define a function  
def find(string, sample) : 
    
  # check substring present  
  # in a string or not 
  if (sample in string): 
  
      y = "\A" + sample 
  
      # check if string starts  
      # with the substring 
      x = re.search(y, string) 
  
      if x : 
          print("string starts with the given substring") 
  
      else : 
          print("string doesn't start with the given substring") 
  
  else : 
      print("entered string isn't a substring") 
  
  
# Driver code 
string = "geeks for geeks makes learning fun"  
sample = "geeks"
  
# function call 
find(string, sample) 
  
sample = "makes"
  
# function call 
find(string, sample) 




// C++ program to validate URL
// using Regular Expression
#include <iostream>
#include <regex>
using namespace std;
 
// Function to validate URL
// using regular expression
bool isValidURL(string url)
{
 
  // Regex to check valid URL
  const regex pattern("((http|https)://)(www.)?[a-zA-Z0-9@:%._\\+~#?&//=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%._\\+~#?&//=]*)");
 
  // If the URL
  // is empty return false
  if (url.empty())
  {
     return false;
  }
 
  // Return true if the URL
  // matched the ReGex
  if(regex_match(url, pattern))
  {
    return true;
  }
  else
  {
    return false;
  }
}
 
// Driver Code
int main()
{
  string url = "https://www.geeksforgeeks.org";
 
  if (isValidURL(url))
  {
    cout << "YES";
  }
  else
  {
    cout << "NO";
  }
  return 0;
}
 
// This code is contributed by yuvraj_chandra




// Java program to check URL is valid or not
// using Regular Expression
 
import java.util.regex.*;
 
class GFG {
 
    // Function to validate URL
    // using regular expression
    public static boolean
    isValidURL(String url)
    {
        // Regex to check valid URL
        String regex = "((http|https)://)(www.)?"
              + "[a-zA-Z0-9@:%._\\+~#?&//=]"
              + "{2,256}\\.[a-z]"
              + "{2,6}\\b([-a-zA-Z0-9@:%"
              + "._\\+~#?&//=]*)";
 
        // Compile the ReGex
        Pattern p = Pattern.compile(regex);
 
        // If the string is empty
        // return false
        if (url == null) {
            return false;
        }
 
        // Find match between given string
        // and regular expression
        // using Pattern.matcher()
        Matcher m = p.matcher(url);
 
        // Return if the string
        // matched the ReGex
        return m.matches();
    }
 
    // Driver code
    public static void main(String args[])
    {
        String url
            = "https://www.geeksforgeeks.org";
        if (isValidURL(url) == true) {
            System.out.println("Yes");
        }
        else
            System.out.println("NO");
    }
}




# Python3 program to check
# URL is valid or not 
# using regular expression 
import re
 
# Function to validate URL 
# using regular expression 
def isValidURL(str):
 
    # Regex to check valid URL 
    regex = ("((http|https)://)(www.)?" +
             "[a-zA-Z0-9@:%._\\+~#?&//=]" +
             "{2,256}\\.[a-z]" +
             "{2,6}\\b([-a-zA-Z0-9@:%" +
             "._\\+~#?&//=]*)")
     
    # Compile the ReGex
    p = re.compile(regex)
 
    # If the string is empty 
    # return false
    if (str == None):
        return False
 
    # Return if the string 
    # matched the ReGex
    if(re.search(p, str)):
        return True
    else:
        return False
 
# Driver code
 
# Test Case 1:
url = "https://www.geeksforgeeks.org"
 
if(isValidURL(url) == True):
    print("Yes")
else:
    print("No")
 
# This code is contributed by avanitrachhadiya2155




# import library 
import re   
  
# url link 
s = 'https://www.geeksforgeeks.org/'
  
# finding the protocol  
obj1 = re.findall('(\w+)://', 
                  s) 
print(obj1) 
  
# finding the hostname which may 
# contain dash or dots 
obj2 = re.findall('://www.([\w\-\.]+)',  
                  s) 
print(obj2)




# import library 
import re   
  
# url link 
s = 'file://localhost:4040/abc_file'
  
# finding the file capture group 
obj1 = re.findall('(\w+)://', s)   
print(obj1) 
  
# finding the hostname which may  
# contain dash or dots 
obj2 = re.findall('://([\w\-\.]+)', s) 
print(obj2) 
  
# finding the hostname which may  
# contain dash or dots or port 
# number 
obj3 = re.findall('://([\w\-\.]+)(:(\d+))?', s) 
print(obj3)




# import library 
import re 
  
# url 
s = 'http://www.example.com/index.html' 
  
# searching for all capture groups 
obj = re.findall('(\w+)://([\w\-\.]+)/(\w+).(\w+)', 
                 s) 
  
print(obj)




// C++ program to validate
// IP address using Regex
 
#include <bits/stdc++.h>
using namespace std;
 
// Function for Validating IP
string Validate_It(string IP)
{
 
    // Regex expression for validating IPv4
    regex ipv4("(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])");
 
    // Regex expression for validating IPv6
    regex ipv6("((([0-9a-fA-F]){1,4})\\:){7}([0-9a-fA-F]){1,4}");
 
    // Checking if it is a valid IPv4 addresses
    if (regex_match(IP, ipv4))
        return "Valid IPv4";
 
    // Checking if it is a valid IPv6 addresses
    else if (regex_match(IP, ipv6))
        return "Valid IPv6";
 
    // Return Invalid
    return "Invalid IP";
}
 
// Driver Code
int main()
{
    // IP addresses to validate
    string IP = "203.120.223.13";
    cout << Validate_It(IP) << endl;
 
    IP = "fffe:3465:efab:23fe:2235:6565:aaab:0001";
    cout << Validate_It(IP) << endl;
 
    IP = "2F33:12a0:3Ea0:0302";
    cout << Validate_It(IP) << endl;
 
    return 0;
}




# Python3 program to validate 
# IP address using Regex 
import re
 
# Function for Validating IP 
def Validate_It(IP):
 
    # Regex expression for validating IPv4 
    regex = "(([0-9]|[1-9][0-9]|1[0-9][0-9]|"\
            "2[0-4][0-9]|25[0-5])\\.){3}"\
            "([0-9]|[1-9][0-9]|1[0-9][0-9]|"\
            "2[0-4][0-9]|25[0-5])"
     
    # Regex expression for validating IPv6 
    regex1 = "((([0-9a-fA-F]){1,4})\\:){7}"\
             "([0-9a-fA-F]){1,4}"
     
    p = re.compile(regex)
    p1 = re.compile(regex1)
 
    # Checking if it is a valid IPv4 addresses 
    if (re.search(p, IP)):
        return "Valid IPv4"
 
    # Checking if it is a valid IPv6 addresses 
    elif (re.search(p1, IP)):
        return "Valid IPv6"
 
    # Return Invalid 
    return "Invalid IP"
 
# Driver Code 
 
# IP addresses to validate 
IP = "203.120.223.13"
print(Validate_It(IP))
 
IP = "fffe:3465:efab:23fe:2235:6565:aaab:0001"
print(Validate_It(IP))
 
IP = "2F33:12a0:3Ea0:0302"
print(Validate_It(IP))
 
# This code is contributed by avanitrachhadiya2155




# Python program to validate an Email 
  
# import re module 
  
# re module provides support 
# for regular expressions 
import re 
  
# Make a regular expression 
# for validating an Email 
regex = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$'
# for custom mails use: '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w+$' 
      
# Define a function for 
# for validating an Email 
def check(email):  
  
    # pass the regular expression 
    # and the string in search() method 
    if(re.search(regex,email)):  
        print("Valid Email")  
          
    else:  
        print("Invalid Email")  
      
  
# Driver Code  
if __name__ == '__main__' :  
      
    # Enter the email  
    email = "ankitrai326@gmail.com"
      
    # calling run function  
    check(email) 
  
    email = "my.ownsite@ourearth.org"
    check(email) 
  
    email = "ankitrai326.com"
    check(email) 




# import library 
import re 
  
# list of different types of file 
filenames = ["gfg.html", "geeks.xml",  
            "computer.txt", "geeksforgeeks.jpg"] 
  
for file in filenames: 
    # search given pattern in the line  
    match = re.search("\.xml$", file) 
  
    # if match is found 
    if match: 
        print("The file ending with .xml is:", 
             file) 




# importing the module
import re
 
# opening and reading the file 
with open('C:/Users/user/Desktop/New Text Document.txt') as fh:
   fstring = fh.readlines()
 
# decalring the regex pattern for IP addresses
pattern = re.compile(r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})')
 
# initializing the list object
lst=[]
 
# extracting the IP addresses
for line in fstring:
   lst.append(pattern.search(line)[0])
 
# displaying the extracted IP adresses
print(lst)




# importing the module
import re
 
# opening and reading the file
with open('test2.txt') as fh:
  string = fh.readlines()
   
# decalring the regex pattern for IP addresses 
pattern =re.compile('''((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.)
{3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)''')
 
# initializing the list objects
valid =[]
invalid=[]
 
# extracting the IP addresses
for line in string:
    line = line.rstrip()
    result = pattern.search(line)
 
    # valid IP addresses
    if result:
      valid.append(line)
 
    # invalid IP addresses  
    else:
      invalid.append(line)
 
# displaying the IP addresses
print("Valid IPs")
print(valid)
print("Invalid IPs")
print(invalid)




# Python program to check validation of password 
# Module of regular expression is used with search() 
import re 
password = "R@m@_f0rtu9e$"
flag = 0
while True:   
    if (len(password)<8): 
        flag = -1
        break
    elif not re.search("[a-z]", password): 
        flag = -1
        break
    elif not re.search("[A-Z]", password): 
        flag = -1
        break
    elif not re.search("[0-9]", password): 
        flag = -1
        break
    elif not re.search("[_@$]", password): 
        flag = -1
        break
    elif re.search("\s", password): 
        flag = -1
        break
    else: 
        flag = 0
        print("Valid Password") 
        break
  
if flag ==-1: 
    print("Not a Valid Password") 




l, u, p, d = 0, 0, 0, 0
s = "R@m@_f0rtu9e$"
if (len(s) >= 8): 
    for i in s: 
  
        # counting lowercase alphabets  
        if (i.islower()): 
            l+=1            
  
        # counting uppercase alphabets 
        if (i.isupper()): 
            u+=1            
  
        # counting digits 
        if (i.isdigit()): 
            d+=1            
  
        # counting the mentioned special characters 
        if(i=='@'or i=='$' or i=='_'): 
            p+=1           
if (l>=1 and u>=1 and p>=1 and d>=1 and l+p+u+d==len(s)): 
    print("Valid Password") 
else: 
    print("Invalid Password") 




# Categorizing password as Strong or  
# Weak in Python using Regex  
  
  
import re 
  
  
# Function to categorize password 
def password(v): 
   
    # the password should not be a 
    # newline or space 
    if v == "\n" or v == " ": 
        return "Password cannot be a newline or space!"
   
    # the password length should be in 
    # between 9 and 20 
    if 9 <= len(v) <= 20: 
   
        # checks for occurrence of a character  
        # three or more times in a row 
        if re.search(r'(.)\1\1', v): 
            return "Weak Password: Same character repeats three or more times in a row"
   
        # checks for occurrence of same string  
        # pattern( minimum of two character length) 
        # repeating 
        if re.search(r'(..)(.*?)\1', v): 
            return "Weak password: Same string pattern repetition"
   
        else: 
            return "Strong Password!"
   
    else: 
        return "Password length must be 9-20 characters!"
  
# Main method 
def main(): 
   
    # Driver code 
    print(password("Qggf!@ghf3")) 
    print(password("Gggksforgeeks")) 
    print(password("aaabnil1gu")) 
    print(password("Aasd!feasn")) 
    print(password("772*hd897")) 
    print(password(" ")) 
   
   
# Driver Code 
if __name__ == '__main__': 
    main() 




# Python program to read  
# file word by word 
   
# opening the text file 
with open('GFG.txt','r') as file: 
   
    # reading each line     
    for line in file: 
   
        # reading each word         
        for word in line.split(): 
   
            # displaying the words            
            print(word)  




# Python program to read  
# file word by word 
   
# opening the text file 
with open('GFG.txt','r') as file: 
   
    # reading each line     
    for line in file: 
   
        # reading each word         
        for word in line.split(): 
   
            # displaying the words            
            print(word)  




# Demonstrated Python Program 
# to read file character by character 
  
  
file = open('file.txt', 'r') 
  
while 1: 
      
    # read by character 
    char = file.read(1)           
    if not char:  
        break
          
    print(char) 
  
file.close() 




# Python code to demonstrate  
# Read character by character 
  
  
with open('file.txt') as f: 
      
    while True: 
          
        # Read from file  
        c = f.read(5) 
        if not c: 
            break
  
        # print the character 
        print(c) 




# Python implementation to compute 
# number of characters, words, spaces 
# and lines in a file 
  
# Function to count number  
# of characters, words, spaces  
# and lines in a file 
def counter(fname): 
  
    # variable to store total word count 
    num_words = 0
      
    # variable to store total line count 
    num_lines = 0
      
    # variable to store total character count 
    num_charc = 0
      
    # variable to store total space count 
    num_spaces = 0
      
    # opening file using with() method 
    # so that file gets closed  
    # after completion of work 
    with open(fname, 'r') as f: 
          
        # loop to iterate file 
        # line by line 
        for line in f: 
              
            # incrementing value of  
            # num_lines with each  
            # iteration of loop to 
            # store total line count  
            num_lines += 1
              
            # declaring a variable word 
            # and assigning its value as Y 
            # because every file is  
            # supposed to start with  
            # a word or a character 
            word = 'Y'
              
            # loop to iterate every 
            # line letter by letter 
            for letter in line: 
                  
                # condition to check  
                # that the encountered character 
                # is not white space and a word 
                if (letter != ' ' and word == 'Y'): 
                      
                    # incrementing the word 
                    # count by 1 
                    num_words += 1
                      
                    # assigning value N to  
                    # variable word because until 
                    # space will not encounter 
                    # a word can not be completed 
                    word = 'N'
                      
                # condition to check  
                # that the encountered character 
                # is a white space 
                elif (letter == ' '): 
                      
                    # incrementing the space 
                    # count by 1 
                    num_spaces += 1
                      
                    # assigning value Y to 
                    # variable word because after 
                    # white space a word 
                    # is supposed to occur 
                    word = 'Y'
                      
                # loop to iterate every  
                # letter character by  
                # character 
                for i in letter: 
                      
                    # condition to check  
                    # that the encountered character  
                    # is not  white space and not 
                    # a newline character 
                    if(i !=" " and i !="\n"): 
                          
                        # incrementing character 
                        # count by 1 
                        num_charc += 1
                          
    # printing total word count  
    print("Number of words in text file: ", num_words) 
      
    # printing total line count 
    print("Number of lines in text file: ", num_lines) 
      
    # printing total character count 
    print('Number of characters in text file: ', num_charc) 
      
    # printing total space count 
    print('Number of spaces in text file: ', num_spaces) 
      
# Driver Code:  
if __name__ == '__main__':  
    fname = 'File1.txt'
    try:  
        counter(fname)  
    except:  
        print('File not found') 




# Python implementation to compute 
# number of characters, words, spaces 
# and lines in a file 
  
# importing os module 
import os 
  
# Function to count number  
# of characters, words, spaces  
# and lines in a file 
def counter(fname): 
      
    # variable to store total word count 
    num_words = 0
      
    # variable to store total line count 
    num_lines = 0
      
    # variable to store total character count 
    num_charc = 0
      
    # variable to store total space count 
    num_spaces = 0
      
    # opening file using with() method 
    # so that file gets closed  
    # after completion of work 
    with open(fname, 'r') as f: 
          
        # loop to iterate file 
        # line by line 
        for line in f: 
              
            # separating a line  
            # from \n character  
            # and storing again in line  
            # variable for further operations 
            line = line.strip(os.linesep) 
              
            # splitting the line  
            # to make a list of 
            # all the words present 
            # in that line and storing 
            # that list in 
            # wordlist variable 
            wordslist = line.split() 
              
            # incrementing value of  
            # num_lines with each  
            # iteration of loop to 
            # store total line count 
            num_lines = num_lines + 1
              
            # incrementing value of  
            # num_words by the  
            # number of items in the 
            # list wordlist 
            num_words = num_words + len(wordslist) 
              
            # incrementing value of  
            # num_charc by 1 whenever 
            # value of variable c is other  
            # than white space in the separated line 
            num_charc = num_charc + sum(1 for c in line  
                          if c not in (os.linesep, ' ')) 
              
            # incrementing value of  
            # num_spaces by 1 whenever 
            # value of variable s is  
            # white space in the separated line 
            num_spaces = num_spaces + sum(1 for s in line  
                                if s in (os.linesep, ' ')) 
      
    # printing total word count 
    print("Number of words in text file: ", num_words) 
      
    # printing total line count 
    print("Number of lines in text file: ", num_lines) 
      
    # printing total character count 
    print("Number of characters in text file: ", num_charc) 
      
    # printing total space count 
    print("Number of spaces in text file: ", num_spaces) 
  
# Driver Code:  
if __name__ == '__main__':  
    fname = 'File1.txt'
    try:  
        counter(fname)  
    except:  
        print('File not found') 




# Python program to count the 
# occurrences of key-value pair 
# in the text file 
  
  
# opening text file 
f = open("file.txt", "r") 
d = dict() 
  
for res in f: 
    # removing new line and extra 
    # space characters 
    res = res.strip() 
  
    # changing ase to prevent matching 
    # errors 
    res = res.lower() 
  
    # separating key-value pairs 
    lines = res.split() 
  
    for line in lines: 
  
        if line in d: 
  
            # If the key-value pair 
            # is present in d then  
            # increment its value by one 
            d[line] = d[line]+1
        else: 
  
            # Insert the key-value pair 
            # in the dictionary and sets 
            # its value to one 
            d[line] = 1
  
f.close() 
  
# Printing Result 
for key in list(d.keys()): 
    print("The count of {} is {}".format(key,d[key])) 




count = 1
chrw = "" 
  
# text file 
file = open('textfile.txt', 'r') 
while 1: 
    sp = file.read(1) 
  
    if count<= 3: 
        chrw = chrw + sp 
  
    if count>3: 
        if sp ==" ": 
            count = 0
            if len(chrw)>0: 
                print(chrw) 
                chrw ="" 
        elif sp !=" ": 
            chrw ="" 
    count = count + 1
  
    if not sp: 
        break
  
file.close()  




# READ FILE 
df = open("geeks.txt") 
  
# read file 
read = df.read() 
  
# return cursor to 
# the beginning 
# of the file. 
df.seek(0) 
read 




# create empty list 
arr = [] 
  
# count number of 
# lines in the file 
line = 1
for word in read: 
    if word == '\n': 
        line += 1
print("Number of lines in file is: ", line) 
  
for i in range(line): 
    # readline() method, 
    # reads one line at 
    # a time 
    arr.append(df.readline()) 




# Function that will return 
# line in which word is present 
def findline(word): 
    for i in range(len(arr)): 
        if word in arr[i]: 
            print(i+1, end=", ") 
  
  
findline("Hello") 




# Python program to count the  
# number of lines in a text file 
  
  
# Opening a file 
file = open("gfg.txt","r") 
Counter = 0
  
# Reading from file 
Content = file.read() 
CoList = Content.split("\n") 
  
for i in CoList: 
    if i: 
        Counter += 1
          
print("This is the number of lines in the file") 
print(Counter) 




# defining object file1 to 
# open GeeksforGeeks file in  
# read mode 
file1 = open('GeeksforGeeks.txt', 
             'r') 
  
# defining object file2 to  
# open GeeksforGeeksUpdated file 
# in write mode 
file2 = open('GeeksforGeeksUpdated.txt', 
             'w') 
  
# reading each line from original  
# text file 
for line in file1.readlines(): 
    
     # reading all lines that do not 
     # begin with "TextGenerator" 
    if not (line.startswith('TextGenerator')): 
        
        # printing those lines 
        print(line) 
          
        # storing only those lines that  
        # do not begin with "TextGenerator" 
        file2.write(line) 
  
# close and save the files 
file2.close() 
file1.close()




# importing regex module 
import re 
  
# defining object file1 to open 
# GeeksforGeeks file in read mode 
file1 = open('GeeksforGeeks.txt', 
           'r') 
  
# defining object file2 to open  
# GeeksforGeeksUpdated file in 
# write mode 
file2 = open('GeeksforGeeksUpdated.txt','w') 
  
# reading each line from original 
# text file 
for line in file1.readlines(): 
    
    # reading all lines that begin  
    # with "TextGenerator" 
    x = re.findall("^Geeks", line) 
      
    if not x: 
        
        # printing those lines 
        print(line) 
          
        # storing only those lines that  
        # do not begin with "TextGenerator" 
        file2.write(line) 
          
# close and save the files 
file1.close() 
file2.close() 
     




# creating the output file 
outputFile = open('C:/Users/user/Desktop/Lorem_output.txt', "w") 
  
# reading the input file 
inputFile = open('C:/Users/user/Desktop/Lorem_input.txt', "r") 
  
# holds lines already seen 
lines_seen_so_far = set() 
  
# iterating each line in the file 
for line in inputFile: 
  
    # checking if line is unique 
    if line not in lines_seen_so_far: 
  
        # write unique lines in output file 
        outputFile.write(line) 
  
        # adds unique lines to lines_seen_so_far 
        lines_seen_so_far.add(line)         
  
# closing the file 
inputFile.close() 
outputFile.close() 




def parse(d): 
    dictionary = dict() 
    # Removes curly braces and splits the pairs into a list 
    pairs = d.strip('{}').split(', ') 
    for i in pairs: 
        pair = i.split(': ') 
        # Other symbols from the key-value pair should be stripped. 
        dictionary[pair[0].strip('\'\'\"\"')] = pair[1].strip('\'\'\"\"') 
    return dictionary 
try: 
    geeky_file = open('geeky_file.txt', 'rt') 
    lines = geeky_file.read().split('\n') 
    for l in lines: 
        if l != '': 
            dictionary = parse(l) 
            print(dictionary) 
    geeky_file.close() 
except: 
    print("Something unexpected occurred!")




import pickle 
  
  
try: 
    geeky_file = open('GFG.txt', 'r') 
    dictionary_list = pickle.load(geeky_file) 
      
    for d in dictionary_list: 
        print(d) 
    geeky_file.close() 
  
except: 
    print("Something unexpected occurred!")




# entering the file names 
firstfile = input("Enter the name of first file ") 
secondfile = input("Enter the name of second file ") 
  
# opening both files in read only mode to read initial contents 
f1 = open(firstfile, 'r') 
f2 = open(secondfile, 'r') 
  
# printing the contens of the file before appending 
print('content of first file before appending -', f1.read()) 
print('content of second file before appending -', f2.read()) 
  
# closing the files 
f1.close() 
f2.close() 
  
# opening first file in append mode and second file in read mode 
f1 = open(firstfile, 'a+') 
f2 = open(secondfile, 'r') 
  
# appending the contents of the second file to the first file 
f1.write(f2.read()) 
  
# relocating the cursor of the files at the beginning 
f1.seek(0) 
f2.seek(0) 
  
# printing the contents of the files after appendng 
print('content of first file after appending -', f1.read()) 
print('content of second file after appending -', f2.read()) 
  
# closing the files 
f1.close() 
f2.close() 




# open file in read mode 
fn = open('bcd.txt', 'r') 
  
# open other file in write mode 
fn1 = open('nfile.txt', 'w') 
  
# read the content of the file line by line 
cont = fn.readlines() 
type(cont) 
for i in range(0, len(cont)): 
    if(i % 2 ! = 0): 
        fn1.write(cont[i]) 
    else: 
        pass
  
# close the file 
fn1.close() 
  
# open file in read mode 
fn1 = open('nfile.txt', 'r') 
  
# read the content of the file 
cont1 = fn1.read() 
  
# print the content of the file 
print(cont1) 
  
# close all files 
fn.close() 
fn1.close() 




# Python program to 
# demonstrate merging 
# of two files 
  
data = data2 = "" 
  
# Reading data from file1 
with open('file1.txt') as fp: 
    data = fp.read() 
  
# Reading data from file2 
with open('file2.txt') as fp: 
    data2 = fp.read() 
  
# Merging 2 files 
# To add the data of file2 
# from next line 
data += "\n"
data += data2 
  
with open ('file3.txt', 'w') as fp: 
    fp.write(data) 




# Python program to 
# demonstrate merging of 
# two files 
  
# Creating a list of filenames 
filenames = ['file1.txt', 'file2.txt'] 
  
# Open file3 in write mode 
with open('file3.txt', 'w') as outfile: 
  
    # Iterate through list 
    for names in filenames: 
  
        # Open each file in read mode 
        with open(names) as infile: 
  
            # read the data from file1 and 
            # file2 and write it in file3 
            outfile.write(infile.read()) 
  
        # Add '\n' to enter data of file2 
        # from next line 
        outfile.write("\n") 




# Open file in read mode 
f = open('GFG.txt', 'r') 
  
# Read the content of the 
# file and store it in a list 
lines = f.readlines() 
      
# Close file 
f.close() 
  
# User's choice 
choice = 1
  
# Split the line into words  
line = lines[choice].split() 
  
# line is reversed 
Reversed = " ".join(line[::-1]) 
  
# Updating the content of the 
# file 
lines.pop(choice) 
lines.insert(choice, Reversed) 
  
# Open file in write mode 
u = open('GFG.txt', 'w') 
  
# Write the new content in file 
# and note, it is overwritten  
u.writelines(lines) 
u.close() 




# Open the file in write mode 
f1 = open("output1.txt", "w") 
  
# Open the input file and get  
# the content into a variable data 
with open("file.txt", "r") as myfile: 
    data = myfile.read() 
  
# For Full Reversing we will store the  
# value of data into new variable data_1  
# in a reverse order using [start: end: step], 
# where step when passed -1 will reverse  
# the string 
data_1 = data[::-1] 
  
# Now we will write the fully reverse  
# data in the output1 file using  
# following command 
f1.write(data_1) 
  
f1.close() 




# Open the file in write mode 
f2 = open("output2.txt", "w") 
  
  
# Open the input file again and get  
# the content as list to a variable data 
with open("file.txt", "r") as myfile: 
    data = myfile.readlines() 
  
# We will just reverse the  
# array using following code 
data_2 = data[::-1] 
  
# Now we will write the fully reverse  
# list in the output2 file using  
# following command 
f2.writelines(data_2) 
  
f2.close() 




# Python3 code to reverse the lines 
# of a file using Stack. 
   
      
# Creating Stack class (LIFO rule) 
class Stack: 
      
    def __init__(self): 
          
        # Creating an empty stack 
        self._arr = [] 
          
    # Creating push() method. 
    def push(self, val): 
        self._arr.append(val) 
   
    def is_empty(self): 
          
        # Returns True if empty 
        return len(self._arr) == 0
  
    # Creating Pop method. 
    def pop(self): 
          
        if self.is_empty(): 
            print("Stack is empty") 
            return
          
        return self._arr.pop() 
  
# Creating a function which will reverse 
# the lines of a file and Overwrites the  
# given file with its contents line-by-line 
# reversed 
def reverse_file(filename): 
       
    S = Stack() 
    original = open(filename) 
      
    for line in original: 
        S.push(line.rstrip("\n")) 
      
    original.close() 
       
       
    output = open(filename, 'w') 
      
    while not S.is_empty(): 
        output.write(S.pop()+"\n") 
      
    output.close() 
  
  
# Driver Code 
filename = "GFG.txt"
  
# Calling the reverse_file function 
reverse_file(filename) 
   
# Now reading the content of the file 
with open(filename) as file: 
        for f in file.readlines(): 
            print(f, end ="") 




# Python program to reverse a linked list
# Time Complexity : O(n)
# Space Complexity : O(n) as 'next' 
#variable is getting created in each loop.
 
# Node class
 
 
class Node:
 
    # Constructor to initialize the node object
    def __init__(self, data):
        self.data = data
        self.next = None
 
 
class LinkedList:
 
    # Function to initialize head
    def __init__(self):
        self.head = None
 
    # Function to reverse the linked list
    def reverse(self):
        prev = None
        current = self.head
        while(current is not None):
            next = current.next
            current.next = prev
            prev = current
            current = next
        self.head = prev
 
    # Function to insert a new node at the beginning
    def push(self, new_data):
        new_node = Node(new_data)
        new_node.next = self.head
        self.head = new_node
 
    # Utility function to print the linked LinkedList
    def printList(self):
        temp = self.head
        while(temp):
            print temp.data,
            temp = temp.next
 
 
# Driver program to test above functions
llist = LinkedList()
llist.push(20)
llist.push(4)
llist.push(15)
llist.push(85)
 
print "Given Linked List"
llist.printList()
llist.reverse()
print "\nReversed Linked List"
llist.printList()
 
# This code is contributed by Nikhil Kumar Singh(nickzuck_007)




# Simple and tail recursive Python program to
# reverse a linked list
 
# Node class
 
 
class Node:
 
    # Constructor to initialize the node object
    def __init__(self, data):
        self.data = data
        self.next = None
 
 
class LinkedList:
 
    # Function to initialize head
    def __init__(self):
        self.head = None
 
    def reverseUtil(self, curr, prev):
 
        # If last node mark it head
        if curr.next is None:
            self.head = curr
 
            # Update next to prev node
            curr.next = prev
            return
 
        # Save curr.next node for recursive call
        next = curr.next
 
        # And update next
        curr.next = prev
 
        self.reverseUtil(next, curr)
 
    # This function mainly calls reverseUtil()
    # with previous as None
 
    def reverse(self):
        if self.head is None:
            return
        self.reverseUtil(self.head, None)
 
    # Function to insert a new node at the beginning
 
    def push(self, new_data):
        new_node = Node(new_data)
        new_node.next = self.head
        self.head = new_node
 
    # Utility function to print the linked LinkedList
    def printList(self):
        temp = self.head
        while(temp):
            print temp.data,
            temp = temp.next
 
 
# Driver program
llist = LinkedList()
llist.push(8)
llist.push(7)
llist.push(6)
llist.push(5)
llist.push(4)
llist.push(3)
llist.push(2)
llist.push(1)
 
print "Given linked list"
llist.printList()
 
llist.reverse()
 
print "\nReverse linked list"
llist.printList()
 
# This code is contributed by Nikhil Kumar Singh(nickzuck_007)




# Python3 code to find largest prime 
# factor of number 
import math 
  
# A function to find largest prime factor 
def maxPrimeFactors (n): 
      
    # Initialize the maximum prime factor 
    # variable with the lowest one 
    maxPrime = -1
      
    # Print the number of 2s that divide n 
    while n % 2 == 0: 
        maxPrime = 2
        n >>= 1     # equivalent to n /= 2 
          
    # n must be odd at this point,  
    # thus skip the even numbers and  
    # iterate only for odd integers 
    for i in range(3, int(math.sqrt(n)) + 1, 2): 
        while n % i == 0: 
            maxPrime = i 
            n = n / i 
      
    # This condition is to handle the  
    # case when n is a prime number  
    # greater than 2 
    if n > 2: 
        maxPrime = n 
      
    return int(maxPrime) 
  
# Driver code to test above function 
n = 15
print(maxPrimeFactors(n)) 
  
n = 25698751364526
print(maxPrimeFactors(n)) 
  
# This code is contributed by "Sharad_Bhardwaj". 




# Python program to print prime factors 
  
import math 
  
# A function to print all prime factors of  
# a given number n 
def primeFactors(n): 
      
    # Print the number of two\'s that divide n 
    while n % 2 == 0: 
        print 2, 
        n = n / 2
          
    # n must be odd at this point 
    # so a skip of 2 ( i = i + 2) can be used 
    for i in range(3,int(math.sqrt(n))+1,2): 
          
        # while i divides n , print i ad divide n 
        while n % i== 0: 
            print i, 
            n = n / i 
              
    # Condition if n is a prime 
    # number greater than 2 
    if n > 2: 
        print n 
          
# Driver Program to test above function 
  
n = 315
primeFactors(n) 
  
# This code is contributed by Harshit Agrawal 




# Python program to find sum of given 
# series. 
  
def productPrimeFactors(n): 
    product = 1
      
    for i in range(2, n+1): 
        if (n % i == 0): 
            isPrime = 1
              
            for j in range(2, int(i/2 + 1)): 
                if (i % j == 0): 
                    isPrime = 0
                    break
                  
            # condition if \'i\' is Prime number 
            # as well as factor of num 
            if (isPrime): 
                product = product * i 
                  
    return product   
      
      
      
# main() 
n = 44
print (productPrimeFactors(n)) 
  
# Contributed by _omg 




# Python program to find product of  
# unique prime factors of a number 
  
import math 
  
def productPrimeFactors(n): 
    product = 1
      
    # Handle prime factor 2 explicitly so that 
    # can optimally handle other prime factors. 
    if (n % 2 == 0): 
        product *= 2
        while (n%2 == 0): 
            n = n/2
              
    # n must be odd at this point. So we can 
    # skip one element (Note i = i +2) 
    for i in range (3, int(math.sqrt(n)), 2): 
        # While i divides n, print i and 
        # divide n 
        if (n % i == 0): 
            product = product * i 
            while (n%i == 0): 
                n = n/i 
                  
    # This condition is to handle the case when n 
    # is a prime number greater than 2 
    if (n > 2): 
        product = product * n 
          
    return product      
      
# main() 
n = 44
print (int(productPrimeFactors(n))) 
  
# Contributed by _omg 




# Formula based Python3 program  
# to find sum of all divisors 
# of n. 
import math 
  
# Returns sum of all factors 
# of n. 
def sumofoddFactors( n ): 
      
    # Traversing through all  
    # prime factors. 
    res = 1
      
    # ignore even factors by  
    # of 2 
    while n % 2 == 0: 
        n = n // 2
      
    for i in range(3, int(math.sqrt(n) + 1)): 
          
        # While i divides n, print 
        # i and divide n 
        count = 0
        curr_sum = 1
        curr_term = 1
        while n % i == 0: 
            count+=1
              
            n = n // i 
            curr_term *= i 
            curr_sum += curr_term 
          
        res *= curr_sum 
      
    # This condition is to 
    # handle the case when 
    # n is a prime number. 
    if n >= 2: 
        res *= (1 + n) 
      
    return res 
  
# Driver code 
n = 30
print(sumofoddFactors(n)) 
  
# This code is contributed by "Sharad_Bhardwaj". 




# Dynamic Programming Python implementation of Coin  
# Change problem 
def count(S, m, n): 
    # We need n+1 rows as the table is constructed  
    # in bottom up manner using the base case 0 value 
    # case (n = 0) 
    table = [[0 for x in range(m)] for x in range(n+1)] 
  
    # Fill the entries for 0 value case (n = 0) 
    for i in range(m): 
        table[0][i] = 1
  
    # Fill rest of the table entries in bottom up manner 
    for i in range(1, n+1): 
        for j in range(m): 
  
            # Count of solutions including S[j] 
            x = table[i - S[j]][j] if i-S[j] >= 0 else 0
  
            # Count of solutions excluding S[j] 
            y = table[i][j-1] if j >= 1 else 0
  
            # total count 
            table[i][j] = x + y 
  
    return table[n][m-1] 
  
# Driver program to test above function 
arr = [1, 2, 3] 
m = len(arr) 
n = 4
print(count(arr, m, n)) 
  
# This code is contributed by Bhavya Jain 




# Dynamic Programming Python implementation of Coin  
# Change problem 
def count(S, m, n): 
  
    # table[i] will be storing the number of solutions for 
    # value i. We need n+1 rows as the table is constructed 
    # in bottom up manner using the base case (n = 0) 
    # Initialize all table values as 0 
    table = [0 for k in range(n+1)] 
  
    # Base case (If given value is 0) 
    table[0] = 1
  
    # Pick all coins one by one and update the table[] values 
    # after the index greater than or equal to the value of the 
    # picked coin 
    for i in range(0,m): 
        for j in range(S[i],n+1): 
            table[j] += table[j-S[i]] 
  
    return table[n] 
  
# Driver program to test above function 
arr = [1, 2, 3] 
m = len(arr) 
n = 4
x = count(arr, m, n) 
print (x) 
  
# This code is contributed by Afzal Ansari 




# Recursive Python function to solve the tower of hanoi 
  
def TowerOfHanoi(n , source, destination, auxiliary): 
    if n==1: 
        print "Move disk 1 from source",source,"to destination",destination 
        return
    TowerOfHanoi(n-1, source, auxiliary, destination) 
    print "Move disk",n,"from source",source,"to destination",destination 
    TowerOfHanoi(n-1, auxiliary, destination, source) 
          
# Driver code 
n = 4
TowerOfHanoi(n,'A','B','C')  
# A, C, B are the name of rods 
  
# Contributed By Dilip Jain 




# Python program to print all primes smaller than or equal to 
# n using Sieve of Eratosthenes 
  
def SieveOfEratosthenes(n): 
      
    # Create a boolean array "prime[0..n]" and initialize 
    # all entries it as true. A value in prime[i] will 
    # finally be false if i is Not a prime, else true. 
    prime = [True for i in range(n + 1)] 
    p = 2
    while (p * p <= n): 
          
        # If prime[p] is not changed, then it is a prime 
        if (prime[p] == True): 
              
            # Update all multiples of p 
            for i in range(p * 2, n + 1, p): 
                prime[i] = False
        p += 1
    prime[0]= False
    prime[1]= False
    # Print all prime numbers 
    for p in range(n + 1): 
        if prime[p]: 
            print p, #Use print(p) for python 3 
  
# driver program 
if __name__=='__main__': 
    n = 30
    print "Following are the prime numbers smaller",  
    #Use print("Following are the prime numbers smaller") for Python 3 
    print "than or equal to", n 
    #Use print("than or equal to", n) for Python 3 
    SieveOfEratosthenes(n) 




# Function to check if binary representation of 
# a number is pallindrome or not 
  
def binaryPallindrome(num): 
  
     # convert number into binary 
     binary = bin(num) 
  
     # skip first two characters of string 
     # because bin function appends '0b' as  
     # prefix in binary representation of 
     # a number 
     binary = binary[2:] 
  
     # now reverse binary string and compare 
     # it with original 
     return binary == binary[-1::-1] 
  
# Driver program 
if __name__ == "__main__": 
    num = 9
    print binaryPallindrome(num) 




# Python program to demonstrate Basic Euclidean Algorithm 
  
  
# Function to return gcd of a and b 
def gcd(a, b):  
    if a == 0 : 
        return b  
      
    return gcd(b%a, a) 
  
a = 10
b = 15
print("gcd(", a , "," , b, ") = ", gcd(a, b)) 
  
a = 35
b = 10
print("gcd(", a , "," , b, ") = ", gcd(a, b)) 
  
a = 31
b = 2
print("gcd(", a , "," , b, ") = ", gcd(a, b)) 
  
# Code Contributed By Mohit Gupta_OMG <(0_o)> 




# Python program to demonstrate working of extended  
# Euclidean Algorithm  
     
# function for extended Euclidean Algorithm  
def gcdExtended(a, b):  
    # Base Case  
    if a == 0 :   
        return b,0,1
             
    gcd,x1,y1 = gcdExtended(b%a, a)  
     
    # Update x and y using results of recursive  
    # call  
    x = y1 - (b//a) * x1  
    y = x1  
     
    return gcd,x,y 
      
  
# Driver code 
a, b = 35,15
g, x, y = gcdExtended(a, b)  
print("gcd(", a , "," , b, ") = ", g)  




# Python3 program to find 
# maximum height of arranged 
# coin triangle 
  
# Returns the square root of n. 
# Note that the function  
def squareRoot(n): 
   
    # We are using n itself as 
        # initial approximation 
    # This can definitely be improved  
    x = n  
    y = 1 
  
    e = 0.000001  # e decides the accuracy level  
    while (x - y > e): 
        x = (x + y) / 2
        y = n/x 
          
    return x  
   
  
# Method to find maximum height 
# of arrangement of coins 
def findMaximumHeight(N): 
   
    # calculating portion inside the square root 
    n = 1 + 8*N  
    maxH = (-1 + squareRoot(n)) / 2
    return int(maxH)  
   
  
# Driver code to test above method 
N = 12 
print(findMaximumHeight(N)) 
  
# This code is contributed by 
# Smitha Dinesh Semwal 




# Python program to find minimum 
# sum of product of number 
   
# To find minimum sum of 
# product of number 
def findMinSum(num): 
    sum = 0
      
    # Find factors of number 
    # and add to the sum 
    i = 2
    while(i * i <= num): 
        while(num % i == 0): 
            sum += i 
            num /= i 
        i += 1
    sum += num 
      
    # Return sum of numbers 
    # having minimum product 
    return sum
  
# Driver Code 
num = 12
print findMinSum(num) 
  
# This code is contributed by Sachin Bisht 




# Python program to check if difference between sum of 
# odd digits and sum of even digits is 0 or not 
  
def isDiff(n): 
    return (n % 11 == 0) 
  
# Driver code 
n = 1243; 
if (isDiff(n)): 
    print("Yes") 
else: 
    print("No") 
  
# Mohit Gupta_OMG <0_o> 




# Python program to print a  
# square matrix in Z form 
  
arr = [[4, 5, 6, 8],  
        [1, 2, 3, 1],  
        [7, 8, 9, 4],  
        [1, 8, 7, 5]] 
  
n = len(arr[0]) 
                   
i=0
for j in range(0, n-1): 
    print(arr[i][j], end =" ")  
          
k = 1
for i in range(0, n): 
    for j in range(n, 0, -1): 
        if(j==n-k): 
            print(arr[i][j], end = " ")  
            break;  
    k+=1
  
# Print last row 
i=n-1;  
for j in range(0, n): 
    print(arr[i][j], end = " ") 
  
# Code contributed by Mohit Gupta_OMG <(0_o)> 




# Python code to find smallest K-digit   
# number divisible by X 
  
def answer(X, K): 
      
    # Computing MAX 
    MIN = pow(10, K-1) 
      
    if(MIN%X == 0): 
        return (MIN) 
      
    else: 
        return ((MIN + X) - ((MIN + X) % X)) 
      
  
X = 83;  
K = 5;  
  
print(answer(X, K));  
  
# Code contributed by Mohit Gupta_OMG <(0_o)> 




# Python program to Print Number 
# series without using loop 
  
def PrintNumber(N, Original, K, flag): 
    #print the number 
    print(N, end = " ") 
      
    # change flag if number 
    # become negative 
      
    if (N <= 0): 
        if(flag==0): 
            flag = 1
        else: 
            flag = 0
          
    # base condition for 
    # second_case (Adding K) 
      
    if (N == Original and (not(flag))): 
        return
      
    # if flag is true 
    # we subtract value until 
    # number is greater then zero 
      
    if (flag == True): 
        PrintNumber(N - K, Original, K, flag) 
        return
      
    # second case (Addition ) 
    if (not(flag)): 
        PrintNumber(N + K, Original, K, flag); 
        return
      
N = 20
K = 6
PrintNumber(N, N, K, True) 
  
# This code is contributed by Mohit Gupta_OMG 




# Python code to calculate number 
# of ways of selecting \'p\' non  
# consecutive stations out of  
# \'n\' stations 
  
def stopping_station( p, n): 
    num = 1
    dem = 1
    s = p 
  
    # selecting \'s\' positions 
    # out of \'n-s+1\' 
    while p != 1: 
        dem *= p 
        p-=1
      
    t = n - s + 1
    while t != (n-2 * s + 1): 
        num *= t 
        t-=1
    if (n - s + 1) >= s: 
        return int(num/dem) 
    else: 
        # if conditions does not 
        # satisfy of combinatorics 
        return -1
  
# driver code  
num = stopping_station(4, 12) 
if num != -1: 
    print(num) 
else: 
    print("Not Possible") 
  
# This code is contributed by "Abhishek Sharma 44" 




// C++ program to check if a triangle  
// of positive area is possible with 
// the given angles 
#include <bits/stdc++.h>  
using namespace std;  
  
string isTriangleExists(int a, int b, int c) 
{ 
    // Checking if the sum of three  
    // angles is 180 and none of  
    // the angles is zero 
    if(a != 0 && b != 0 && c != 0 && (a + b + c)== 180) 
        // Checking if sum of any two angles 
        // is greater than equal to the third one 
        if((a + b)>= c || (b + c)>= a || (a + c)>= b) 
            return "YES"; 
        else
            return "NO"; 
    else
        return "NO"; 
} 
// Driver Code 
int main() 
{ 
int a=50, b=60, c = 70; 
cout << isTriangleExists(a, b, c) << endl; 
return 0; 
} 
// This code is contributed by mits 




// Java program to check if a triangle  
// of positive area is possible with 
// the given angles 
  
class GFG 
{ 
static String isTriangleExists(int a, int b, int c) 
{ 
    // Checking if the sum of three  
    // angles is 180 and none of  
    // the angles is zero 
    if(a != 0 && b != 0 && c != 0 && (a + b + c)== 180) 
        // Checking if sum of any two angles 
        // is greater than equal to the third one 
        if((a + b)>= c || (b + c)>= a || (a + c)>= b) 
            return "YES"; 
        else
            return "NO"; 
    else
        return "NO"; 
} 
// Driver Code 
public static void main(String[] args) 
{ 
int a=50, b=60, c = 70; 
System.out.println(isTriangleExists(a, b, c)); 
} 
} 
// This code is contributed by mits 




# Python program to check if a triangle  
# of positive area is possible with 
# the given angles 
  
def isTriangleExists(a, b, c): 
    # Checking if the sum of three  
    # angles is 180 and none of  
    # the angles is zero 
    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): 
        # Checking if sum of any two angles 
        # is greater than equal to the third one 
        if((a + b)>= c or (b + c)>= a or (a + c)>= b): 
            return "YES"
        else: 
            return "NO"
    else: 
        return "NO"
  
# Driver Code 
a, b, c = 50, 60, 70
  
print(isTriangleExists(50, 60, 70)) 




// C# program to check if a triangle  
// of positive area is possible with 
// the given angles 
class GFG 
{ 
static string isTriangleExists(int a,  
                               int b, 
                               int c) 
{ 
    // Checking if the sum of three  
    // angles is 180 and none of  
    // the angles is zero 
    if(a != 0 && b != 0 &&  
       c != 0 && (a + b + c) == 180) 
         
        // Checking if sum of any two  
        // angles is greater than equal 
        // to the third one 
        if((a + b) >= c || (b + c) >= a ||  
                           (a + c) >= b) 
            return "YES"; 
        else
            return "NO"; 
    else
        return "NO"; 
} 
  
// Driver Code 
static void Main() 
{ 
    int a = 50, b = 60, c = 70; 
    System.Console.WriteLine(isTriangleExists(a, b, c)); 
} 
} 
  
// This code is contributed by mits 




<?php 
// PHP program to check if a triangle  
// of positive area is possible with 
// the given angles 
  
function isTriangleExists($a, $b, $c) 
{ 
    // Checking if the sum of three  
    // angles is 180 and none of  
    // the angles is zero 
    if($a != 0 && $b != 0 &&  
       $c != 0 && ($a + $b + $c) == 180) 
         
        // Checking if sum of any two  
        // angles is greater than equal  
        // to the third one 
        if(($a + $b)>= $c ||  
           ($b + $c)>= $a || ($a + $c)>= $b) 
            return "YES"; 
        else
            return "NO"; 
    else
        return "NO"; 
} 
  
// Driver Code 
$a = 50; 
$b = 60; 
$c = 70; 
echo isTriangleExists($a, $b, $c); 
  
// This code is contributed by mits 
?> 




# Python program to find the most occurring 
# character and its count 
from collections import Counter 
  
def find_most_occ_char(input): 
  
    # now create dictionary using counter method 
    # which will have strings as key and their  
    # frequencies as value 
    wc = Counter(input) 
  
    # Finding maximum occurrence of a character  
        # and get the index of it. 
    s = max(wc.values()) 
    i = wc.values().index(s) 
      
    print wc.items()[i] 
  
# Driver program 
if __name__ == "__main__": 
    input = 'geeksforgeeks'
    find_most_occ_char(input) 




# Formula based Python3 
# program to find sum  
# of alldivisors of n. 
import math 
  
# Returns sum of all  
# factors of n. 
def sumofFactors(n) : 
      
    # If n is odd, then 
    # there are no even 
    # factors. 
    if (n % 2 != 0) : 
        return 0 
   
    # Traversing through 
    # all prime factors. 
    res = 1
    for i in range(2, (int)(math.sqrt(n)) + 1) : 
          
        # While i divides n 
        # print i and divide n 
        count = 0
        curr_sum = 1
        curr_term = 1
        while (n % i == 0) : 
            count= count + 1
   
            n = n // i 
   
            # here we remove the 
            # 2^0 that is 1. All 
            # other factors 
            if (i == 2 and count == 1) : 
                curr_sum = 0
   
            curr_term = curr_term * i 
            curr_sum = curr_sum + curr_term 
          
        res = res * curr_sum 
          
   
    # This condition is to 
    # handle the case when 
    # n is a prime number. 
    if (n >= 2) : 
        res = res * (1 + n) 
   
    return res 
  
  
# Driver code 
n = 18
print(sumofFactors(n)) 
  
  
# This code is contributed by Nikita Tiwari. 




# Python 3 program to
# check the number is
# divisible by all 
# digits are not.
 
# Function to check 
# the divisibility 
# of the number by
# its digit.
def checkDivisibility(n, digit) :
     
    # If the digit divides the
    # number then return true
    # else return false.
    return (digit != 0 and n % digit == 0)
     
# Function to check if
# all digits of n divide
# it or not
def allDigitsDivide( n) :
     
    temp = n
    while (temp > 0) :
         
        # Taking the digit of
        # the number into digit
        # var.
        digit = temp % 10
        if ((checkDivisibility(n, digit)) == False) :
            return False
 
        temp = temp // 10
     
    return True
 
# Driver function
n = 128
 
if (allDigitsDivide(n)) :
    print("Yes")
else :
    print("No" )
     
# This code is contributed by Nikita Tiwari.




// C++ implementation of the above approach 
#include<bits/stdc++.h> 
using namespace std; 
  
  
  
// Function to convert N into base K 
int toK(int N, int K) 
{ 
  
// Weight of each digit 
    int w = 1; 
    int s = 0; 
    while (N != 0) 
     { 
        int r = N % K; 
        N = N/K; 
        s = r * w + s; 
        w *= 10; 
     } 
    return s; 
  
} 
  
// Function to check for consecutive 0 
bool check(int N) 
{ 
  
// Flag to check if there are consecutive  
    // zero or not 
    bool fl = false; 
    while (N != 0) 
    { 
  
        int r = N % 10; 
        N = N/10; 
  
        // If there are two consecutive zero  
        // then returning False 
        if (fl == true and r == 0) 
            return false; 
        if (r > 0) 
            { 
            fl = false; 
            continue; 
            } 
        fl = true; 
  
    } 
     return true; 
          
} 
  
// We first convert to given base, then 
// check if the converted number has two 
// consecutive 0s or not 
void hasConsecutiveZeroes(int N, int K) 
{ 
    int z = toK(N, K); 
    if (check(z)) 
       cout<<"Yes"<<endl; 
    else
      cout<<"No"<<endl; 
} 
  
      
  
// Driver code 
int main() 
{ 
int N = 15; 
int K = 8; 
hasConsecutiveZeroes(N, K); 
  
} 
// This code is contributed by 
// Surendra_Gangwar 




// Java implementation of the above approach 
import java.util.*; 
  
class GFG  
{  
  
// Function to convert N into base K 
static int toK(int N, int K) 
{ 
  
    // Weight of each digit 
    int w = 1; 
    int s = 0; 
    while (N != 0) 
    { 
        int r = N % K; 
        N = N / K; 
        s = r * w + s; 
        w *= 10; 
    } 
    return s; 
  
} 
  
// Function to check for consecutive 0 
static boolean check(int N) 
{ 
  
    // Flag to check if there are consecutive  
    // zero or not 
    boolean fl = false; 
    while (N != 0) 
    { 
  
        int r = N % 10; 
        N = N / 10; 
  
        // If there are two consecutive zero  
        // then returning False 
        if (fl == true && r == 0) 
            return false; 
        if (r > 0) 
        { 
            fl = false; 
            continue; 
        } 
        fl = true; 
    } 
    return true; 
} 
  
// We first convert to given base, then 
// check if the converted number has two 
// consecutive 0s or not 
static void hasConsecutiveZeroes(int N, int K) 
{ 
    int z = toK(N, K); 
    if (check(z)) 
        System.out.println("Yes"); 
    else
        System.out.println("No"); 
} 
  
// Driver code 
public static void main(String[] args) 
{ 
    int N = 15; 
    int K = 8; 
    hasConsecutiveZeroes(N, K); 
} 
} 
  
// This code is contributed by Princi Singh 




# Python implementation of the above approach 
  
# We first convert to given base, then 
# check if the converted number has two 
# consecutive 0s or not 
def hasConsecutiveZeroes(N, K): 
    z = toK(N, K) 
    if (check(z)): 
        print("Yes") 
    else: 
        print("No") 
  
# Function to convert N into base K 
def toK(N, K): 
  
    # Weight of each digit 
    w = 1
    s = 0
    while (N != 0): 
        r = N % K 
        N = N//K 
        s = r * w + s 
        w* = 10
    return s 
  
# Function to check for consecutive 0 
def check(N): 
  
    # Flag to check if there are consecutive  
    # zero or not 
    fl = False
    while (N != 0): 
        r = N % 10
        N = N//10
  
        # If there are two consecutive zero  
        # then returning False 
        if (fl == True and r == 0): 
            return False
        if (r > 0): 
            fl = False
            continue
        fl = True
    return True
  
# Driver code 
N, K = 15, 8
hasConsecutiveZeroes(N, K) 




// C# implementation of the above approach 
using System; 
  
class GFG  
{  
  
// Function to convert N into base K 
static int toK(int N, int K) 
{ 
  
    // Weight of each digit 
    int w = 1; 
    int s = 0; 
    while (N != 0) 
    { 
        int r = N % K; 
        N = N / K; 
        s = r * w + s; 
        w *= 10; 
    } 
    return s; 
} 
  
// Function to check for consecutive 0 
static Boolean check(int N) 
{ 
  
    // Flag to check if there are consecutive  
    // zero or not 
    Boolean fl = false; 
    while (N != 0) 
    { 
  
        int r = N % 10; 
        N = N / 10; 
  
        // If there are two consecutive zero  
        // then returning False 
        if (fl == true && r == 0) 
            return false; 
        if (r > 0) 
        { 
            fl = false; 
            continue; 
        } 
        fl = true; 
    } 
    return true; 
} 
  
// We first convert to given base, then 
// check if the converted number has two 
// consecutive 0s or not 
static void hasConsecutiveZeroes(int N, int K) 
{ 
    int z = toK(N, K); 
    if (check(z)) 
        Console.WriteLine("Yes"); 
    else
        Console.WriteLine("No"); 
} 
  
// Driver code 
public static void Main(String[] args) 
{ 
    int N = 15; 
    int K = 8; 
    hasConsecutiveZeroes(N, K); 
} 
} 
  
// This code is contributed by 29AjayKumar 




<?php 
// PHP implementation of the above approach 
  
// We first convert to given base,  
// then check if the converted number  
// has two consecutive 0s or not 
function hasConsecutiveZeroes($N, $K) 
{ 
    $z = toK($N, $K); 
    if (check($z)) 
        print("Yes"); 
    else
        print("No"); 
} 
  
// Function to convert N into base K 
function toK($N, $K) 
{ 
    // Weight of each digit 
    $w = 1; 
    $s = 0; 
    while ($N != 0) 
    { 
        $r = $N % $K; 
        $N = (int)($N / $K); 
        $s = $r * $w + $s; 
        $w *= 10; 
    } 
    return $s; 
} 
  
// Function to check for consecutive 0 
function check($N) 
{ 
    // Flag to check if there are  
    // consecutive zero or not 
    $fl = false; 
    while ($N != 0) 
    { 
        $r = $N % 10; 
        $N = (int)($N / 10); 
  
        // If there are two consecutive  
        // zero then returning false 
        if ($fl == true and $r == 0) 
            return false; 
        if ($r > 0) 
        { 
            $fl = false; 
            continue; 
        } 
        $fl = true; 
    } 
    return true; 
} 
  
// Driver code 
$N = 15; 
$K = 8; 
hasConsecutiveZeroes($N, $K); 
  
// This code is contributed by mits 
?> 




# Python Program to find number of possible 
# values of X to satisfy A mod X = B  
import math 
  
# Returns the number of divisors of (A - B) 
# greater than B 
def calculateDivisors (A, B): 
    N = A - B 
    noOfDivisors = 0 
      
    a = math.sqrt(N) 
    for i in range(1, int(a + 1)): 
        # if N is divisible by i 
        if ((N % i == 0)): 
            # count only the divisors greater than B 
            if (i > B): 
                noOfDivisors +=1
                  
            # checking if a divisor isnt counted twice 
            if ((N / i) != i and (N / i) > B): 
                noOfDivisors += 1; 
                  
    return noOfDivisors 
      
# Utility function to calculate number of all 
# possible values of X for which the modular 
# equation holds true  
     
def numberOfPossibleWaysUtil (A, B): 
    # if A = B there are infinitely many solutions 
    # to equation  or we say X can take infinitely 
    # many values > A. We return -1 in this case  
    if (A == B): 
        return -1
          
    # if A < B, there are no possible values of 
    # X satisfying the equation 
    if (A < B): 
        return 0 
          
    # the last case is when A > B, here we calculate 
    # the number of divisors of (A - B), which are 
    # greater than B     
      
    noOfDivisors = 0
    noOfDivisors = calculateDivisors; 
    return noOfDivisors 
          
      
# Wrapper function for numberOfPossibleWaysUtil()  
def numberOfPossibleWays(A, B): 
    noOfSolutions = numberOfPossibleWaysUtil(A, B) 
      
    #if infinitely many solutions available 
    if (noOfSolutions == -1): 
        print ("For A = " , A , " and B = " , B 
                , ", X can take Infinitely many values"
                , " greater than "  , A) 
      
    else: 
        print ("For A = " , A , " and B = " , B 
                , ", X can take " , noOfSolutions 
                , " values") 
# main() 
A = 26
B = 2
numberOfPossibleWays(A, B) 
  
  
A = 21
B = 5
numberOfPossibleWays(A, B) 
  
# Contributed by _omg 




# Python program to verify Legendre\'s Conjecture 
# for a given n 
  
import math  
  
def isprime( n ): 
      
    i = 2
    for i in range (2, int((math.sqrt(n)+1))): 
        if n%i == 0: 
            return False
    return True
      
def LegendreConjecture( n ): 
    print ( "Primes in the range ", n*n 
            , " and ", (n+1)*(n+1) 
            , " are:" ) 
              
      
    for i in range (n*n, (((n+1)*(n+1))+1)): 
        if(isprime(i)): 
            print (i) 
              
n = 50
LegendreConjecture(n) 
  
# Contributed by _omg 


